/* soapH.h
   Generated by gSOAP 2.8.62 for ServerAPI.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_LONG64_DEFINED
#define SOAP_TYPE_LONG64_DEFINED

inline void soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_LONG64(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_LONG64(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_LONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_LONG64(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_LONG64(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_LONG64(struct soap *soap, LONG64 *p)
{
	if (::soap_read_LONG64(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__variableStoreType_DEFINED
#define SOAP_TYPE_ns1__variableStoreType_DEFINED

inline void soap_default_ns1__variableStoreType(struct soap *soap, enum ns1__variableStoreType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__variableStoreType
	*a = SOAP_DEFAULT_ns1__variableStoreType;
#else
	*a = (enum ns1__variableStoreType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__variableStoreType(struct soap*, const char*, int, const enum ns1__variableStoreType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__variableStoreType2s(struct soap*, enum ns1__variableStoreType);
SOAP_FMAC3 enum ns1__variableStoreType * SOAP_FMAC4 soap_in_ns1__variableStoreType(struct soap*, const char*, enum ns1__variableStoreType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__variableStoreType(struct soap*, const char*, enum ns1__variableStoreType *);

SOAP_FMAC3 enum ns1__variableStoreType * SOAP_FMAC4 soap_new_ns1__variableStoreType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__variableStoreType(struct soap*, const enum ns1__variableStoreType *, const char*, const char*);

inline int soap_write_ns1__variableStoreType(struct soap *soap, enum ns1__variableStoreType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__variableStoreType(soap, p, "ns1:variableStoreType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__variableStoreType(struct soap *soap, const char *URL, enum ns1__variableStoreType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__variableStoreType(soap, p, "ns1:variableStoreType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__variableStoreType(struct soap *soap, const char *URL, enum ns1__variableStoreType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__variableStoreType(soap, p, "ns1:variableStoreType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__variableStoreType * SOAP_FMAC4 soap_get_ns1__variableStoreType(struct soap*, enum ns1__variableStoreType *, const char*, const char*);

inline int soap_read_ns1__variableStoreType(struct soap *soap, enum ns1__variableStoreType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__variableStoreType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__variableStoreType(struct soap *soap, const char *URL, enum ns1__variableStoreType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__variableStoreType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__variableStoreType(struct soap *soap, enum ns1__variableStoreType *p)
{
	if (::soap_read_ns1__variableStoreType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__classPresentationType_DEFINED
#define SOAP_TYPE_ns1__classPresentationType_DEFINED

inline void soap_default_ns1__classPresentationType(struct soap *soap, enum ns1__classPresentationType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__classPresentationType
	*a = SOAP_DEFAULT_ns1__classPresentationType;
#else
	*a = (enum ns1__classPresentationType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__classPresentationType(struct soap*, const char*, int, const enum ns1__classPresentationType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__classPresentationType2s(struct soap*, enum ns1__classPresentationType);
SOAP_FMAC3 enum ns1__classPresentationType * SOAP_FMAC4 soap_in_ns1__classPresentationType(struct soap*, const char*, enum ns1__classPresentationType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__classPresentationType(struct soap*, const char*, enum ns1__classPresentationType *);

SOAP_FMAC3 enum ns1__classPresentationType * SOAP_FMAC4 soap_new_ns1__classPresentationType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__classPresentationType(struct soap*, const enum ns1__classPresentationType *, const char*, const char*);

inline int soap_write_ns1__classPresentationType(struct soap *soap, enum ns1__classPresentationType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__classPresentationType(soap, p, "ns1:classPresentationType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__classPresentationType(struct soap *soap, const char *URL, enum ns1__classPresentationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__classPresentationType(soap, p, "ns1:classPresentationType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__classPresentationType(struct soap *soap, const char *URL, enum ns1__classPresentationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__classPresentationType(soap, p, "ns1:classPresentationType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__classPresentationType * SOAP_FMAC4 soap_get_ns1__classPresentationType(struct soap*, enum ns1__classPresentationType *, const char*, const char*);

inline int soap_read_ns1__classPresentationType(struct soap *soap, enum ns1__classPresentationType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__classPresentationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__classPresentationType(struct soap *soap, const char *URL, enum ns1__classPresentationType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__classPresentationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__classPresentationType(struct soap *soap, enum ns1__classPresentationType *p)
{
	if (::soap_read_ns1__classPresentationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__userType_attributesMap_entry_DEFINED
#define SOAP_TYPE__ns1__userType_attributesMap_entry_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__userType_attributesMap_entry(struct soap*, const char*, int, const _ns1__userType_attributesMap_entry *, const char*);
SOAP_FMAC3 _ns1__userType_attributesMap_entry * SOAP_FMAC4 soap_in__ns1__userType_attributesMap_entry(struct soap*, const char*, _ns1__userType_attributesMap_entry *, const char*);
SOAP_FMAC1 _ns1__userType_attributesMap_entry * SOAP_FMAC2 soap_instantiate__ns1__userType_attributesMap_entry(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__userType_attributesMap_entry * soap_new__ns1__userType_attributesMap_entry(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__userType_attributesMap_entry(soap, n, NULL, NULL, NULL);
}

inline _ns1__userType_attributesMap_entry * soap_new_req__ns1__userType_attributesMap_entry(
	struct soap *soap)
{
	_ns1__userType_attributesMap_entry *_p = ::soap_new__ns1__userType_attributesMap_entry(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__userType_attributesMap_entry * soap_new_set__ns1__userType_attributesMap_entry(
	struct soap *soap,
	wchar_t *key,
	ns1__variableDefinition *value)
{
	_ns1__userType_attributesMap_entry *_p = ::soap_new__ns1__userType_attributesMap_entry(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__userType_attributesMap_entry::key = key;
		_p->_ns1__userType_attributesMap_entry::value = value;
	}
	return _p;
}

inline int soap_write__ns1__userType_attributesMap_entry(struct soap *soap, _ns1__userType_attributesMap_entry const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:userType-attributesMap-entry", p->soap_type() == SOAP_TYPE__ns1__userType_attributesMap_entry ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__userType_attributesMap_entry(struct soap *soap, const char *URL, _ns1__userType_attributesMap_entry const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:userType-attributesMap-entry", p->soap_type() == SOAP_TYPE__ns1__userType_attributesMap_entry ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__userType_attributesMap_entry(struct soap *soap, const char *URL, _ns1__userType_attributesMap_entry const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:userType-attributesMap-entry", p->soap_type() == SOAP_TYPE__ns1__userType_attributesMap_entry ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__userType_attributesMap_entry * SOAP_FMAC4 soap_get__ns1__userType_attributesMap_entry(struct soap*, _ns1__userType_attributesMap_entry *, const char*, const char*);

inline int soap_read__ns1__userType_attributesMap_entry(struct soap *soap, _ns1__userType_attributesMap_entry *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__userType_attributesMap_entry(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__userType_attributesMap_entry(struct soap *soap, const char *URL, _ns1__userType_attributesMap_entry *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__userType_attributesMap_entry(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__userType_attributesMap_entry(struct soap *soap, _ns1__userType_attributesMap_entry *p)
{
	if (::soap_read__ns1__userType_attributesMap_entry(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__userType_attributesMap_DEFINED
#define SOAP_TYPE__ns1__userType_attributesMap_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__userType_attributesMap(struct soap*, const char*, int, const _ns1__userType_attributesMap *, const char*);
SOAP_FMAC3 _ns1__userType_attributesMap * SOAP_FMAC4 soap_in__ns1__userType_attributesMap(struct soap*, const char*, _ns1__userType_attributesMap *, const char*);
SOAP_FMAC1 _ns1__userType_attributesMap * SOAP_FMAC2 soap_instantiate__ns1__userType_attributesMap(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__userType_attributesMap * soap_new__ns1__userType_attributesMap(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__userType_attributesMap(soap, n, NULL, NULL, NULL);
}

inline _ns1__userType_attributesMap * soap_new_req__ns1__userType_attributesMap(
	struct soap *soap)
{
	_ns1__userType_attributesMap *_p = ::soap_new__ns1__userType_attributesMap(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__userType_attributesMap * soap_new_set__ns1__userType_attributesMap(
	struct soap *soap,
	const std::vector<_ns1__userType_attributesMap_entry> & entry)
{
	_ns1__userType_attributesMap *_p = ::soap_new__ns1__userType_attributesMap(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__userType_attributesMap::entry = entry;
	}
	return _p;
}

inline int soap_write__ns1__userType_attributesMap(struct soap *soap, _ns1__userType_attributesMap const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:userType-attributesMap", p->soap_type() == SOAP_TYPE__ns1__userType_attributesMap ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__userType_attributesMap(struct soap *soap, const char *URL, _ns1__userType_attributesMap const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:userType-attributesMap", p->soap_type() == SOAP_TYPE__ns1__userType_attributesMap ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__userType_attributesMap(struct soap *soap, const char *URL, _ns1__userType_attributesMap const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:userType-attributesMap", p->soap_type() == SOAP_TYPE__ns1__userType_attributesMap ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__userType_attributesMap * SOAP_FMAC4 soap_get__ns1__userType_attributesMap(struct soap*, _ns1__userType_attributesMap *, const char*, const char*);

inline int soap_read__ns1__userType_attributesMap(struct soap *soap, _ns1__userType_attributesMap *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__userType_attributesMap(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__userType_attributesMap(struct soap *soap, const char *URL, _ns1__userType_attributesMap *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__userType_attributesMap(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__userType_attributesMap(struct soap *soap, _ns1__userType_attributesMap *p)
{
	if (::soap_read__ns1__userType_attributesMap(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__variableStoreType__DEFINED
#define SOAP_TYPE_ns1__variableStoreType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__variableStoreType_(struct soap*, const char*, int, const ns1__variableStoreType_ *, const char*);
SOAP_FMAC3 ns1__variableStoreType_ * SOAP_FMAC4 soap_in_ns1__variableStoreType_(struct soap*, const char*, ns1__variableStoreType_ *, const char*);
SOAP_FMAC1 ns1__variableStoreType_ * SOAP_FMAC2 soap_instantiate_ns1__variableStoreType_(struct soap*, int, const char*, const char*, size_t*);

inline ns1__variableStoreType_ * soap_new_ns1__variableStoreType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__variableStoreType_(soap, n, NULL, NULL, NULL);
}

inline ns1__variableStoreType_ * soap_new_req_ns1__variableStoreType_(
	struct soap *soap,
	enum ns1__variableStoreType __item)
{
	ns1__variableStoreType_ *_p = ::soap_new_ns1__variableStoreType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__variableStoreType_::__item = __item;
	}
	return _p;
}

inline ns1__variableStoreType_ * soap_new_set_ns1__variableStoreType_(
	struct soap *soap,
	enum ns1__variableStoreType __item,
	char *__item__1)
{
	ns1__variableStoreType_ *_p = ::soap_new_ns1__variableStoreType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__variableStoreType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__variableStoreType_(struct soap *soap, ns1__variableStoreType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:variableStoreType", p->soap_type() == SOAP_TYPE_ns1__variableStoreType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__variableStoreType_(struct soap *soap, const char *URL, ns1__variableStoreType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:variableStoreType", p->soap_type() == SOAP_TYPE_ns1__variableStoreType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__variableStoreType_(struct soap *soap, const char *URL, ns1__variableStoreType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:variableStoreType", p->soap_type() == SOAP_TYPE_ns1__variableStoreType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__variableStoreType_ * SOAP_FMAC4 soap_get_ns1__variableStoreType_(struct soap*, ns1__variableStoreType_ *, const char*, const char*);

inline int soap_read_ns1__variableStoreType_(struct soap *soap, ns1__variableStoreType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__variableStoreType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__variableStoreType_(struct soap *soap, const char *URL, ns1__variableStoreType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__variableStoreType_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__variableStoreType_(struct soap *soap, ns1__variableStoreType_ *p)
{
	if (::soap_read_ns1__variableStoreType_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__classPresentationType__DEFINED
#define SOAP_TYPE_ns1__classPresentationType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__classPresentationType_(struct soap*, const char*, int, const ns1__classPresentationType_ *, const char*);
SOAP_FMAC3 ns1__classPresentationType_ * SOAP_FMAC4 soap_in_ns1__classPresentationType_(struct soap*, const char*, ns1__classPresentationType_ *, const char*);
SOAP_FMAC1 ns1__classPresentationType_ * SOAP_FMAC2 soap_instantiate_ns1__classPresentationType_(struct soap*, int, const char*, const char*, size_t*);

inline ns1__classPresentationType_ * soap_new_ns1__classPresentationType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__classPresentationType_(soap, n, NULL, NULL, NULL);
}

inline ns1__classPresentationType_ * soap_new_req_ns1__classPresentationType_(
	struct soap *soap,
	enum ns1__classPresentationType __item)
{
	ns1__classPresentationType_ *_p = ::soap_new_ns1__classPresentationType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__classPresentationType_::__item = __item;
	}
	return _p;
}

inline ns1__classPresentationType_ * soap_new_set_ns1__classPresentationType_(
	struct soap *soap,
	enum ns1__classPresentationType __item,
	char *__item__1)
{
	ns1__classPresentationType_ *_p = ::soap_new_ns1__classPresentationType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__classPresentationType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__classPresentationType_(struct soap *soap, ns1__classPresentationType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:classPresentationType", p->soap_type() == SOAP_TYPE_ns1__classPresentationType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__classPresentationType_(struct soap *soap, const char *URL, ns1__classPresentationType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:classPresentationType", p->soap_type() == SOAP_TYPE_ns1__classPresentationType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__classPresentationType_(struct soap *soap, const char *URL, ns1__classPresentationType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:classPresentationType", p->soap_type() == SOAP_TYPE_ns1__classPresentationType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__classPresentationType_ * SOAP_FMAC4 soap_get_ns1__classPresentationType_(struct soap*, ns1__classPresentationType_ *, const char*, const char*);

inline int soap_read_ns1__classPresentationType_(struct soap *soap, ns1__classPresentationType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__classPresentationType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__classPresentationType_(struct soap *soap, const char *URL, ns1__classPresentationType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__classPresentationType_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__classPresentationType_(struct soap *soap, ns1__classPresentationType_ *p)
{
	if (::soap_read_ns1__classPresentationType_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__reassignTasksResponse_DEFINED
#define SOAP_TYPE_ns1__reassignTasksResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reassignTasksResponse(struct soap*, const char*, int, const ns1__reassignTasksResponse *, const char*);
SOAP_FMAC3 ns1__reassignTasksResponse * SOAP_FMAC4 soap_in_ns1__reassignTasksResponse(struct soap*, const char*, ns1__reassignTasksResponse *, const char*);
SOAP_FMAC1 ns1__reassignTasksResponse * SOAP_FMAC2 soap_instantiate_ns1__reassignTasksResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__reassignTasksResponse * soap_new_ns1__reassignTasksResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__reassignTasksResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__reassignTasksResponse * soap_new_req_ns1__reassignTasksResponse(
	struct soap *soap,
	int result)
{
	ns1__reassignTasksResponse *_p = ::soap_new_ns1__reassignTasksResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__reassignTasksResponse::result = result;
	}
	return _p;
}

inline ns1__reassignTasksResponse * soap_new_set_ns1__reassignTasksResponse(
	struct soap *soap,
	int result,
	char *__item__1)
{
	ns1__reassignTasksResponse *_p = ::soap_new_ns1__reassignTasksResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__reassignTasksResponse::result = result;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__reassignTasksResponse(struct soap *soap, ns1__reassignTasksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:reassignTasksResponse", p->soap_type() == SOAP_TYPE_ns1__reassignTasksResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__reassignTasksResponse(struct soap *soap, const char *URL, ns1__reassignTasksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:reassignTasksResponse", p->soap_type() == SOAP_TYPE_ns1__reassignTasksResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__reassignTasksResponse(struct soap *soap, const char *URL, ns1__reassignTasksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:reassignTasksResponse", p->soap_type() == SOAP_TYPE_ns1__reassignTasksResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__reassignTasksResponse * SOAP_FMAC4 soap_get_ns1__reassignTasksResponse(struct soap*, ns1__reassignTasksResponse *, const char*, const char*);

inline int soap_read_ns1__reassignTasksResponse(struct soap *soap, ns1__reassignTasksResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__reassignTasksResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__reassignTasksResponse(struct soap *soap, const char *URL, ns1__reassignTasksResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__reassignTasksResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__reassignTasksResponse(struct soap *soap, ns1__reassignTasksResponse *p)
{
	if (::soap_read_ns1__reassignTasksResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__reassignTasks_DEFINED
#define SOAP_TYPE_ns1__reassignTasks_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reassignTasks(struct soap*, const char*, int, const ns1__reassignTasks *, const char*);
SOAP_FMAC3 ns1__reassignTasks * SOAP_FMAC4 soap_in_ns1__reassignTasks(struct soap*, const char*, ns1__reassignTasks *, const char*);
SOAP_FMAC1 ns1__reassignTasks * SOAP_FMAC2 soap_instantiate_ns1__reassignTasks(struct soap*, int, const char*, const char*, size_t*);

inline ns1__reassignTasks * soap_new_ns1__reassignTasks(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__reassignTasks(soap, n, NULL, NULL, NULL);
}

inline ns1__reassignTasks * soap_new_req_ns1__reassignTasks(
	struct soap *soap)
{
	ns1__reassignTasks *_p = ::soap_new_ns1__reassignTasks(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__reassignTasks * soap_new_set_ns1__reassignTasks(
	struct soap *soap,
	ns1__user *user,
	ns1__batchPresentation *batchPresentation,
	char *__item__1)
{
	ns1__reassignTasks *_p = ::soap_new_ns1__reassignTasks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__reassignTasks::user = user;
		_p->ns1__reassignTasks::batchPresentation = batchPresentation;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__reassignTasks(struct soap *soap, ns1__reassignTasks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:reassignTasks", p->soap_type() == SOAP_TYPE_ns1__reassignTasks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__reassignTasks(struct soap *soap, const char *URL, ns1__reassignTasks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:reassignTasks", p->soap_type() == SOAP_TYPE_ns1__reassignTasks ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__reassignTasks(struct soap *soap, const char *URL, ns1__reassignTasks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:reassignTasks", p->soap_type() == SOAP_TYPE_ns1__reassignTasks ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__reassignTasks * SOAP_FMAC4 soap_get_ns1__reassignTasks(struct soap*, ns1__reassignTasks *, const char*, const char*);

inline int soap_read_ns1__reassignTasks(struct soap *soap, ns1__reassignTasks *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__reassignTasks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__reassignTasks(struct soap *soap, const char *URL, ns1__reassignTasks *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__reassignTasks(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__reassignTasks(struct soap *soap, ns1__reassignTasks *p)
{
	if (::soap_read_ns1__reassignTasks(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getTaskResponse_DEFINED
#define SOAP_TYPE_ns1__getTaskResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTaskResponse(struct soap*, const char*, int, const ns1__getTaskResponse *, const char*);
SOAP_FMAC3 ns1__getTaskResponse * SOAP_FMAC4 soap_in_ns1__getTaskResponse(struct soap*, const char*, ns1__getTaskResponse *, const char*);
SOAP_FMAC1 ns1__getTaskResponse * SOAP_FMAC2 soap_instantiate_ns1__getTaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getTaskResponse * soap_new_ns1__getTaskResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getTaskResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getTaskResponse * soap_new_req_ns1__getTaskResponse(
	struct soap *soap)
{
	ns1__getTaskResponse *_p = ::soap_new_ns1__getTaskResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getTaskResponse * soap_new_set_ns1__getTaskResponse(
	struct soap *soap,
	ns1__wfTask *result,
	char *__item__1)
{
	ns1__getTaskResponse *_p = ::soap_new_ns1__getTaskResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getTaskResponse::result = result;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__getTaskResponse(struct soap *soap, ns1__getTaskResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getTaskResponse", p->soap_type() == SOAP_TYPE_ns1__getTaskResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getTaskResponse(struct soap *soap, const char *URL, ns1__getTaskResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getTaskResponse", p->soap_type() == SOAP_TYPE_ns1__getTaskResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getTaskResponse(struct soap *soap, const char *URL, ns1__getTaskResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getTaskResponse", p->soap_type() == SOAP_TYPE_ns1__getTaskResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getTaskResponse * SOAP_FMAC4 soap_get_ns1__getTaskResponse(struct soap*, ns1__getTaskResponse *, const char*, const char*);

inline int soap_read_ns1__getTaskResponse(struct soap *soap, ns1__getTaskResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getTaskResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getTaskResponse(struct soap *soap, const char *URL, ns1__getTaskResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getTaskResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getTaskResponse(struct soap *soap, ns1__getTaskResponse *p)
{
	if (::soap_read_ns1__getTaskResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getTask_DEFINED
#define SOAP_TYPE_ns1__getTask_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTask(struct soap*, const char*, int, const ns1__getTask *, const char*);
SOAP_FMAC3 ns1__getTask * SOAP_FMAC4 soap_in_ns1__getTask(struct soap*, const char*, ns1__getTask *, const char*);
SOAP_FMAC1 ns1__getTask * SOAP_FMAC2 soap_instantiate_ns1__getTask(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getTask * soap_new_ns1__getTask(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getTask(soap, n, NULL, NULL, NULL);
}

inline ns1__getTask * soap_new_req_ns1__getTask(
	struct soap *soap)
{
	ns1__getTask *_p = ::soap_new_ns1__getTask(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getTask * soap_new_set_ns1__getTask(
	struct soap *soap,
	ns1__user *user,
	LONG64 *taskId,
	char *__item__1)
{
	ns1__getTask *_p = ::soap_new_ns1__getTask(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getTask::user = user;
		_p->ns1__getTask::taskId = taskId;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__getTask(struct soap *soap, ns1__getTask const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getTask", p->soap_type() == SOAP_TYPE_ns1__getTask ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getTask(struct soap *soap, const char *URL, ns1__getTask const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getTask", p->soap_type() == SOAP_TYPE_ns1__getTask ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getTask(struct soap *soap, const char *URL, ns1__getTask const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getTask", p->soap_type() == SOAP_TYPE_ns1__getTask ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getTask * SOAP_FMAC4 soap_get_ns1__getTask(struct soap*, ns1__getTask *, const char*, const char*);

inline int soap_read_ns1__getTask(struct soap *soap, ns1__getTask *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getTask(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getTask(struct soap *soap, const char *URL, ns1__getTask *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getTask(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getTask(struct soap *soap, ns1__getTask *p)
{
	if (::soap_read_ns1__getTask(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getProcessTasksResponse_DEFINED
#define SOAP_TYPE_ns1__getProcessTasksResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getProcessTasksResponse(struct soap*, const char*, int, const ns1__getProcessTasksResponse *, const char*);
SOAP_FMAC3 ns1__getProcessTasksResponse * SOAP_FMAC4 soap_in_ns1__getProcessTasksResponse(struct soap*, const char*, ns1__getProcessTasksResponse *, const char*);
SOAP_FMAC1 ns1__getProcessTasksResponse * SOAP_FMAC2 soap_instantiate_ns1__getProcessTasksResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getProcessTasksResponse * soap_new_ns1__getProcessTasksResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getProcessTasksResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getProcessTasksResponse * soap_new_req_ns1__getProcessTasksResponse(
	struct soap *soap)
{
	ns1__getProcessTasksResponse *_p = ::soap_new_ns1__getProcessTasksResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getProcessTasksResponse * soap_new_set_ns1__getProcessTasksResponse(
	struct soap *soap,
	const std::vector<ns1__wfTask *> & result,
	char *__item__1)
{
	ns1__getProcessTasksResponse *_p = ::soap_new_ns1__getProcessTasksResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getProcessTasksResponse::result = result;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__getProcessTasksResponse(struct soap *soap, ns1__getProcessTasksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getProcessTasksResponse", p->soap_type() == SOAP_TYPE_ns1__getProcessTasksResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getProcessTasksResponse(struct soap *soap, const char *URL, ns1__getProcessTasksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getProcessTasksResponse", p->soap_type() == SOAP_TYPE_ns1__getProcessTasksResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getProcessTasksResponse(struct soap *soap, const char *URL, ns1__getProcessTasksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getProcessTasksResponse", p->soap_type() == SOAP_TYPE_ns1__getProcessTasksResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getProcessTasksResponse * SOAP_FMAC4 soap_get_ns1__getProcessTasksResponse(struct soap*, ns1__getProcessTasksResponse *, const char*, const char*);

inline int soap_read_ns1__getProcessTasksResponse(struct soap *soap, ns1__getProcessTasksResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getProcessTasksResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getProcessTasksResponse(struct soap *soap, const char *URL, ns1__getProcessTasksResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getProcessTasksResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getProcessTasksResponse(struct soap *soap, ns1__getProcessTasksResponse *p)
{
	if (::soap_read_ns1__getProcessTasksResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getProcessTasks_DEFINED
#define SOAP_TYPE_ns1__getProcessTasks_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getProcessTasks(struct soap*, const char*, int, const ns1__getProcessTasks *, const char*);
SOAP_FMAC3 ns1__getProcessTasks * SOAP_FMAC4 soap_in_ns1__getProcessTasks(struct soap*, const char*, ns1__getProcessTasks *, const char*);
SOAP_FMAC1 ns1__getProcessTasks * SOAP_FMAC2 soap_instantiate_ns1__getProcessTasks(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getProcessTasks * soap_new_ns1__getProcessTasks(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getProcessTasks(soap, n, NULL, NULL, NULL);
}

inline ns1__getProcessTasks * soap_new_req_ns1__getProcessTasks(
	struct soap *soap,
	bool includeSubprocesses)
{
	ns1__getProcessTasks *_p = ::soap_new_ns1__getProcessTasks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getProcessTasks::includeSubprocesses = includeSubprocesses;
	}
	return _p;
}

inline ns1__getProcessTasks * soap_new_set_ns1__getProcessTasks(
	struct soap *soap,
	ns1__user *user,
	LONG64 *processId,
	bool includeSubprocesses,
	char *__item__1)
{
	ns1__getProcessTasks *_p = ::soap_new_ns1__getProcessTasks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getProcessTasks::user = user;
		_p->ns1__getProcessTasks::processId = processId;
		_p->ns1__getProcessTasks::includeSubprocesses = includeSubprocesses;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__getProcessTasks(struct soap *soap, ns1__getProcessTasks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getProcessTasks", p->soap_type() == SOAP_TYPE_ns1__getProcessTasks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getProcessTasks(struct soap *soap, const char *URL, ns1__getProcessTasks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getProcessTasks", p->soap_type() == SOAP_TYPE_ns1__getProcessTasks ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getProcessTasks(struct soap *soap, const char *URL, ns1__getProcessTasks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getProcessTasks", p->soap_type() == SOAP_TYPE_ns1__getProcessTasks ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getProcessTasks * SOAP_FMAC4 soap_get_ns1__getProcessTasks(struct soap*, ns1__getProcessTasks *, const char*, const char*);

inline int soap_read_ns1__getProcessTasks(struct soap *soap, ns1__getProcessTasks *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getProcessTasks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getProcessTasks(struct soap *soap, const char *URL, ns1__getProcessTasks *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getProcessTasks(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getProcessTasks(struct soap *soap, ns1__getProcessTasks *p)
{
	if (::soap_read_ns1__getProcessTasks(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__completeTaskWSResponse_DEFINED
#define SOAP_TYPE_ns1__completeTaskWSResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__completeTaskWSResponse(struct soap*, const char*, int, const ns1__completeTaskWSResponse *, const char*);
SOAP_FMAC3 ns1__completeTaskWSResponse * SOAP_FMAC4 soap_in_ns1__completeTaskWSResponse(struct soap*, const char*, ns1__completeTaskWSResponse *, const char*);
SOAP_FMAC1 ns1__completeTaskWSResponse * SOAP_FMAC2 soap_instantiate_ns1__completeTaskWSResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__completeTaskWSResponse * soap_new_ns1__completeTaskWSResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__completeTaskWSResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__completeTaskWSResponse * soap_new_req_ns1__completeTaskWSResponse(
	struct soap *soap)
{
	ns1__completeTaskWSResponse *_p = ::soap_new_ns1__completeTaskWSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__completeTaskWSResponse * soap_new_set_ns1__completeTaskWSResponse(
	struct soap *soap,
	char *__item__1)
{
	ns1__completeTaskWSResponse *_p = ::soap_new_ns1__completeTaskWSResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__completeTaskWSResponse(struct soap *soap, ns1__completeTaskWSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:completeTaskWSResponse", p->soap_type() == SOAP_TYPE_ns1__completeTaskWSResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__completeTaskWSResponse(struct soap *soap, const char *URL, ns1__completeTaskWSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:completeTaskWSResponse", p->soap_type() == SOAP_TYPE_ns1__completeTaskWSResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__completeTaskWSResponse(struct soap *soap, const char *URL, ns1__completeTaskWSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:completeTaskWSResponse", p->soap_type() == SOAP_TYPE_ns1__completeTaskWSResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__completeTaskWSResponse * SOAP_FMAC4 soap_get_ns1__completeTaskWSResponse(struct soap*, ns1__completeTaskWSResponse *, const char*, const char*);

inline int soap_read_ns1__completeTaskWSResponse(struct soap *soap, ns1__completeTaskWSResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__completeTaskWSResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__completeTaskWSResponse(struct soap *soap, const char *URL, ns1__completeTaskWSResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__completeTaskWSResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__completeTaskWSResponse(struct soap *soap, ns1__completeTaskWSResponse *p)
{
	if (::soap_read_ns1__completeTaskWSResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__variable_DEFINED
#define SOAP_TYPE_ns1__variable_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__variable(struct soap*, const char*, int, const ns1__variable *, const char*);
SOAP_FMAC3 ns1__variable * SOAP_FMAC4 soap_in_ns1__variable(struct soap*, const char*, ns1__variable *, const char*);
SOAP_FMAC1 ns1__variable * SOAP_FMAC2 soap_instantiate_ns1__variable(struct soap*, int, const char*, const char*, size_t*);

inline ns1__variable * soap_new_ns1__variable(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__variable(soap, n, NULL, NULL, NULL);
}

inline ns1__variable * soap_new_req_ns1__variable(
	struct soap *soap)
{
	ns1__variable *_p = ::soap_new_ns1__variable(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__variable * soap_new_set_ns1__variable(
	struct soap *soap,
	wchar_t *name,
	wchar_t *scriptingName,
	wchar_t *format,
	wchar_t *value,
	char *__item__1)
{
	ns1__variable *_p = ::soap_new_ns1__variable(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__variable::name = name;
		_p->ns1__variable::scriptingName = scriptingName;
		_p->ns1__variable::format = format;
		_p->ns1__variable::value = value;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__variable(struct soap *soap, ns1__variable const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:variable", p->soap_type() == SOAP_TYPE_ns1__variable ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__variable(struct soap *soap, const char *URL, ns1__variable const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:variable", p->soap_type() == SOAP_TYPE_ns1__variable ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__variable(struct soap *soap, const char *URL, ns1__variable const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:variable", p->soap_type() == SOAP_TYPE_ns1__variable ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__variable * SOAP_FMAC4 soap_get_ns1__variable(struct soap*, ns1__variable *, const char*, const char*);

inline int soap_read_ns1__variable(struct soap *soap, ns1__variable *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__variable(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__variable(struct soap *soap, const char *URL, ns1__variable *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__variable(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__variable(struct soap *soap, ns1__variable *p)
{
	if (::soap_read_ns1__variable(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__completeTaskWS_DEFINED
#define SOAP_TYPE_ns1__completeTaskWS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__completeTaskWS(struct soap*, const char*, int, const ns1__completeTaskWS *, const char*);
SOAP_FMAC3 ns1__completeTaskWS * SOAP_FMAC4 soap_in_ns1__completeTaskWS(struct soap*, const char*, ns1__completeTaskWS *, const char*);
SOAP_FMAC1 ns1__completeTaskWS * SOAP_FMAC2 soap_instantiate_ns1__completeTaskWS(struct soap*, int, const char*, const char*, size_t*);

inline ns1__completeTaskWS * soap_new_ns1__completeTaskWS(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__completeTaskWS(soap, n, NULL, NULL, NULL);
}

inline ns1__completeTaskWS * soap_new_req_ns1__completeTaskWS(
	struct soap *soap)
{
	ns1__completeTaskWS *_p = ::soap_new_ns1__completeTaskWS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__completeTaskWS * soap_new_set_ns1__completeTaskWS(
	struct soap *soap,
	ns1__user *user,
	LONG64 *taskId,
	const std::vector<ns1__variable *> & variables,
	LONG64 *swimlaneActorId,
	char *__item__1)
{
	ns1__completeTaskWS *_p = ::soap_new_ns1__completeTaskWS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__completeTaskWS::user = user;
		_p->ns1__completeTaskWS::taskId = taskId;
		_p->ns1__completeTaskWS::variables = variables;
		_p->ns1__completeTaskWS::swimlaneActorId = swimlaneActorId;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__completeTaskWS(struct soap *soap, ns1__completeTaskWS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:completeTaskWS", p->soap_type() == SOAP_TYPE_ns1__completeTaskWS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__completeTaskWS(struct soap *soap, const char *URL, ns1__completeTaskWS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:completeTaskWS", p->soap_type() == SOAP_TYPE_ns1__completeTaskWS ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__completeTaskWS(struct soap *soap, const char *URL, ns1__completeTaskWS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:completeTaskWS", p->soap_type() == SOAP_TYPE_ns1__completeTaskWS ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__completeTaskWS * SOAP_FMAC4 soap_get_ns1__completeTaskWS(struct soap*, ns1__completeTaskWS *, const char*, const char*);

inline int soap_read_ns1__completeTaskWS(struct soap *soap, ns1__completeTaskWS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__completeTaskWS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__completeTaskWS(struct soap *soap, const char *URL, ns1__completeTaskWS *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__completeTaskWS(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__completeTaskWS(struct soap *soap, ns1__completeTaskWS *p)
{
	if (::soap_read_ns1__completeTaskWS(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getTasksResponse_DEFINED
#define SOAP_TYPE_ns1__getTasksResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTasksResponse(struct soap*, const char*, int, const ns1__getTasksResponse *, const char*);
SOAP_FMAC3 ns1__getTasksResponse * SOAP_FMAC4 soap_in_ns1__getTasksResponse(struct soap*, const char*, ns1__getTasksResponse *, const char*);
SOAP_FMAC1 ns1__getTasksResponse * SOAP_FMAC2 soap_instantiate_ns1__getTasksResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getTasksResponse * soap_new_ns1__getTasksResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getTasksResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getTasksResponse * soap_new_req_ns1__getTasksResponse(
	struct soap *soap)
{
	ns1__getTasksResponse *_p = ::soap_new_ns1__getTasksResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getTasksResponse * soap_new_set_ns1__getTasksResponse(
	struct soap *soap,
	const std::vector<ns1__wfTask *> & result,
	char *__item__1)
{
	ns1__getTasksResponse *_p = ::soap_new_ns1__getTasksResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getTasksResponse::result = result;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__getTasksResponse(struct soap *soap, ns1__getTasksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getTasksResponse", p->soap_type() == SOAP_TYPE_ns1__getTasksResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getTasksResponse(struct soap *soap, const char *URL, ns1__getTasksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getTasksResponse", p->soap_type() == SOAP_TYPE_ns1__getTasksResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getTasksResponse(struct soap *soap, const char *URL, ns1__getTasksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getTasksResponse", p->soap_type() == SOAP_TYPE_ns1__getTasksResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getTasksResponse * SOAP_FMAC4 soap_get_ns1__getTasksResponse(struct soap*, ns1__getTasksResponse *, const char*, const char*);

inline int soap_read_ns1__getTasksResponse(struct soap *soap, ns1__getTasksResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getTasksResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getTasksResponse(struct soap *soap, const char *URL, ns1__getTasksResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getTasksResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getTasksResponse(struct soap *soap, ns1__getTasksResponse *p)
{
	if (::soap_read_ns1__getTasksResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getTasks_DEFINED
#define SOAP_TYPE_ns1__getTasks_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTasks(struct soap*, const char*, int, const ns1__getTasks *, const char*);
SOAP_FMAC3 ns1__getTasks * SOAP_FMAC4 soap_in_ns1__getTasks(struct soap*, const char*, ns1__getTasks *, const char*);
SOAP_FMAC1 ns1__getTasks * SOAP_FMAC2 soap_instantiate_ns1__getTasks(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getTasks * soap_new_ns1__getTasks(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getTasks(soap, n, NULL, NULL, NULL);
}

inline ns1__getTasks * soap_new_req_ns1__getTasks(
	struct soap *soap)
{
	ns1__getTasks *_p = ::soap_new_ns1__getTasks(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getTasks * soap_new_set_ns1__getTasks(
	struct soap *soap,
	ns1__user *user,
	ns1__batchPresentation *batchPresentation,
	char *__item__1)
{
	ns1__getTasks *_p = ::soap_new_ns1__getTasks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getTasks::user = user;
		_p->ns1__getTasks::batchPresentation = batchPresentation;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__getTasks(struct soap *soap, ns1__getTasks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getTasks", p->soap_type() == SOAP_TYPE_ns1__getTasks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getTasks(struct soap *soap, const char *URL, ns1__getTasks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getTasks", p->soap_type() == SOAP_TYPE_ns1__getTasks ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getTasks(struct soap *soap, const char *URL, ns1__getTasks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getTasks", p->soap_type() == SOAP_TYPE_ns1__getTasks ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getTasks * SOAP_FMAC4 soap_get_ns1__getTasks(struct soap*, ns1__getTasks *, const char*, const char*);

inline int soap_read_ns1__getTasks(struct soap *soap, ns1__getTasks *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getTasks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getTasks(struct soap *soap, const char *URL, ns1__getTasks *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getTasks(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getTasks(struct soap *soap, ns1__getTasks *p)
{
	if (::soap_read_ns1__getTasks(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__assignTaskResponse_DEFINED
#define SOAP_TYPE_ns1__assignTaskResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__assignTaskResponse(struct soap*, const char*, int, const ns1__assignTaskResponse *, const char*);
SOAP_FMAC3 ns1__assignTaskResponse * SOAP_FMAC4 soap_in_ns1__assignTaskResponse(struct soap*, const char*, ns1__assignTaskResponse *, const char*);
SOAP_FMAC1 ns1__assignTaskResponse * SOAP_FMAC2 soap_instantiate_ns1__assignTaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__assignTaskResponse * soap_new_ns1__assignTaskResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__assignTaskResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__assignTaskResponse * soap_new_req_ns1__assignTaskResponse(
	struct soap *soap)
{
	ns1__assignTaskResponse *_p = ::soap_new_ns1__assignTaskResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__assignTaskResponse * soap_new_set_ns1__assignTaskResponse(
	struct soap *soap,
	char *__item__1)
{
	ns1__assignTaskResponse *_p = ::soap_new_ns1__assignTaskResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__assignTaskResponse(struct soap *soap, ns1__assignTaskResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:assignTaskResponse", p->soap_type() == SOAP_TYPE_ns1__assignTaskResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__assignTaskResponse(struct soap *soap, const char *URL, ns1__assignTaskResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:assignTaskResponse", p->soap_type() == SOAP_TYPE_ns1__assignTaskResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__assignTaskResponse(struct soap *soap, const char *URL, ns1__assignTaskResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:assignTaskResponse", p->soap_type() == SOAP_TYPE_ns1__assignTaskResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__assignTaskResponse * SOAP_FMAC4 soap_get_ns1__assignTaskResponse(struct soap*, ns1__assignTaskResponse *, const char*, const char*);

inline int soap_read_ns1__assignTaskResponse(struct soap *soap, ns1__assignTaskResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__assignTaskResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__assignTaskResponse(struct soap *soap, const char *URL, ns1__assignTaskResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__assignTaskResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__assignTaskResponse(struct soap *soap, ns1__assignTaskResponse *p)
{
	if (::soap_read_ns1__assignTaskResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__assignTask_DEFINED
#define SOAP_TYPE_ns1__assignTask_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__assignTask(struct soap*, const char*, int, const ns1__assignTask *, const char*);
SOAP_FMAC3 ns1__assignTask * SOAP_FMAC4 soap_in_ns1__assignTask(struct soap*, const char*, ns1__assignTask *, const char*);
SOAP_FMAC1 ns1__assignTask * SOAP_FMAC2 soap_instantiate_ns1__assignTask(struct soap*, int, const char*, const char*, size_t*);

inline ns1__assignTask * soap_new_ns1__assignTask(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__assignTask(soap, n, NULL, NULL, NULL);
}

inline ns1__assignTask * soap_new_req_ns1__assignTask(
	struct soap *soap)
{
	ns1__assignTask *_p = ::soap_new_ns1__assignTask(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__assignTask * soap_new_set_ns1__assignTask(
	struct soap *soap,
	ns1__user *user,
	LONG64 *taskId,
	ns1__wfExecutor *previousOwner,
	ns1__wfExecutor *newExecutor,
	char *__item__1)
{
	ns1__assignTask *_p = ::soap_new_ns1__assignTask(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__assignTask::user = user;
		_p->ns1__assignTask::taskId = taskId;
		_p->ns1__assignTask::previousOwner = previousOwner;
		_p->ns1__assignTask::newExecutor = newExecutor;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__assignTask(struct soap *soap, ns1__assignTask const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:assignTask", p->soap_type() == SOAP_TYPE_ns1__assignTask ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__assignTask(struct soap *soap, const char *URL, ns1__assignTask const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:assignTask", p->soap_type() == SOAP_TYPE_ns1__assignTask ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__assignTask(struct soap *soap, const char *URL, ns1__assignTask const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:assignTask", p->soap_type() == SOAP_TYPE_ns1__assignTask ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__assignTask * SOAP_FMAC4 soap_get_ns1__assignTask(struct soap*, ns1__assignTask *, const char*, const char*);

inline int soap_read_ns1__assignTask(struct soap *soap, ns1__assignTask *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__assignTask(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__assignTask(struct soap *soap, const char *URL, ns1__assignTask *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__assignTask(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__assignTask(struct soap *soap, ns1__assignTask *p)
{
	if (::soap_read_ns1__assignTask(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__markTaskOpenedResponse_DEFINED
#define SOAP_TYPE_ns1__markTaskOpenedResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__markTaskOpenedResponse(struct soap*, const char*, int, const ns1__markTaskOpenedResponse *, const char*);
SOAP_FMAC3 ns1__markTaskOpenedResponse * SOAP_FMAC4 soap_in_ns1__markTaskOpenedResponse(struct soap*, const char*, ns1__markTaskOpenedResponse *, const char*);
SOAP_FMAC1 ns1__markTaskOpenedResponse * SOAP_FMAC2 soap_instantiate_ns1__markTaskOpenedResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__markTaskOpenedResponse * soap_new_ns1__markTaskOpenedResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__markTaskOpenedResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__markTaskOpenedResponse * soap_new_req_ns1__markTaskOpenedResponse(
	struct soap *soap)
{
	ns1__markTaskOpenedResponse *_p = ::soap_new_ns1__markTaskOpenedResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__markTaskOpenedResponse * soap_new_set_ns1__markTaskOpenedResponse(
	struct soap *soap,
	char *__item__1)
{
	ns1__markTaskOpenedResponse *_p = ::soap_new_ns1__markTaskOpenedResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__markTaskOpenedResponse(struct soap *soap, ns1__markTaskOpenedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:markTaskOpenedResponse", p->soap_type() == SOAP_TYPE_ns1__markTaskOpenedResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__markTaskOpenedResponse(struct soap *soap, const char *URL, ns1__markTaskOpenedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:markTaskOpenedResponse", p->soap_type() == SOAP_TYPE_ns1__markTaskOpenedResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__markTaskOpenedResponse(struct soap *soap, const char *URL, ns1__markTaskOpenedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:markTaskOpenedResponse", p->soap_type() == SOAP_TYPE_ns1__markTaskOpenedResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__markTaskOpenedResponse * SOAP_FMAC4 soap_get_ns1__markTaskOpenedResponse(struct soap*, ns1__markTaskOpenedResponse *, const char*, const char*);

inline int soap_read_ns1__markTaskOpenedResponse(struct soap *soap, ns1__markTaskOpenedResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__markTaskOpenedResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__markTaskOpenedResponse(struct soap *soap, const char *URL, ns1__markTaskOpenedResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__markTaskOpenedResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__markTaskOpenedResponse(struct soap *soap, ns1__markTaskOpenedResponse *p)
{
	if (::soap_read_ns1__markTaskOpenedResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__markTaskOpened_DEFINED
#define SOAP_TYPE_ns1__markTaskOpened_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__markTaskOpened(struct soap*, const char*, int, const ns1__markTaskOpened *, const char*);
SOAP_FMAC3 ns1__markTaskOpened * SOAP_FMAC4 soap_in_ns1__markTaskOpened(struct soap*, const char*, ns1__markTaskOpened *, const char*);
SOAP_FMAC1 ns1__markTaskOpened * SOAP_FMAC2 soap_instantiate_ns1__markTaskOpened(struct soap*, int, const char*, const char*, size_t*);

inline ns1__markTaskOpened * soap_new_ns1__markTaskOpened(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__markTaskOpened(soap, n, NULL, NULL, NULL);
}

inline ns1__markTaskOpened * soap_new_req_ns1__markTaskOpened(
	struct soap *soap)
{
	ns1__markTaskOpened *_p = ::soap_new_ns1__markTaskOpened(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__markTaskOpened * soap_new_set_ns1__markTaskOpened(
	struct soap *soap,
	ns1__user *user,
	LONG64 *taskId,
	char *__item__1)
{
	ns1__markTaskOpened *_p = ::soap_new_ns1__markTaskOpened(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__markTaskOpened::user = user;
		_p->ns1__markTaskOpened::taskId = taskId;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__markTaskOpened(struct soap *soap, ns1__markTaskOpened const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:markTaskOpened", p->soap_type() == SOAP_TYPE_ns1__markTaskOpened ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__markTaskOpened(struct soap *soap, const char *URL, ns1__markTaskOpened const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:markTaskOpened", p->soap_type() == SOAP_TYPE_ns1__markTaskOpened ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__markTaskOpened(struct soap *soap, const char *URL, ns1__markTaskOpened const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:markTaskOpened", p->soap_type() == SOAP_TYPE_ns1__markTaskOpened ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__markTaskOpened * SOAP_FMAC4 soap_get_ns1__markTaskOpened(struct soap*, ns1__markTaskOpened *, const char*, const char*);

inline int soap_read_ns1__markTaskOpened(struct soap *soap, ns1__markTaskOpened *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__markTaskOpened(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__markTaskOpened(struct soap *soap, const char *URL, ns1__markTaskOpened *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__markTaskOpened(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__markTaskOpened(struct soap *soap, ns1__markTaskOpened *p)
{
	if (::soap_read_ns1__markTaskOpened(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__userType_DEFINED
#define SOAP_TYPE_ns1__userType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__userType(struct soap*, const char*, int, const ns1__userType *, const char*);
SOAP_FMAC3 ns1__userType * SOAP_FMAC4 soap_in_ns1__userType(struct soap*, const char*, ns1__userType *, const char*);
SOAP_FMAC1 ns1__userType * SOAP_FMAC2 soap_instantiate_ns1__userType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__userType * soap_new_ns1__userType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__userType(soap, n, NULL, NULL, NULL);
}

inline ns1__userType * soap_new_req_ns1__userType(
	struct soap *soap,
	const _ns1__userType_attributesMap& attributesMap)
{
	ns1__userType *_p = ::soap_new_ns1__userType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__userType::attributesMap = attributesMap;
	}
	return _p;
}

inline ns1__userType * soap_new_set_ns1__userType(
	struct soap *soap,
	wchar_t *name,
	const std::vector<ns1__variableDefinition *> & attributes,
	const _ns1__userType_attributesMap& attributesMap,
	char *__item__1)
{
	ns1__userType *_p = ::soap_new_ns1__userType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__userType::name = name;
		_p->ns1__userType::attributes = attributes;
		_p->ns1__userType::attributesMap = attributesMap;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__userType(struct soap *soap, ns1__userType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:userType", p->soap_type() == SOAP_TYPE_ns1__userType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__userType(struct soap *soap, const char *URL, ns1__userType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:userType", p->soap_type() == SOAP_TYPE_ns1__userType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__userType(struct soap *soap, const char *URL, ns1__userType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:userType", p->soap_type() == SOAP_TYPE_ns1__userType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__userType * SOAP_FMAC4 soap_get_ns1__userType(struct soap*, ns1__userType *, const char*, const char*);

inline int soap_read_ns1__userType(struct soap *soap, ns1__userType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__userType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__userType(struct soap *soap, const char *URL, ns1__userType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__userType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__userType(struct soap *soap, ns1__userType *p)
{
	if (::soap_read_ns1__userType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__variableDefinition_DEFINED
#define SOAP_TYPE_ns1__variableDefinition_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__variableDefinition(struct soap*, const char*, int, const ns1__variableDefinition *, const char*);
SOAP_FMAC3 ns1__variableDefinition * SOAP_FMAC4 soap_in_ns1__variableDefinition(struct soap*, const char*, ns1__variableDefinition *, const char*);
SOAP_FMAC1 ns1__variableDefinition * SOAP_FMAC2 soap_instantiate_ns1__variableDefinition(struct soap*, int, const char*, const char*, size_t*);

inline ns1__variableDefinition * soap_new_ns1__variableDefinition(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__variableDefinition(soap, n, NULL, NULL, NULL);
}

inline ns1__variableDefinition * soap_new_req_ns1__variableDefinition(
	struct soap *soap,
	bool synthetic,
	bool publicAccess)
{
	ns1__variableDefinition *_p = ::soap_new_ns1__variableDefinition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__variableDefinition::synthetic = synthetic;
		_p->ns1__variableDefinition::publicAccess = publicAccess;
	}
	return _p;
}

inline ns1__variableDefinition * soap_new_set_ns1__variableDefinition(
	struct soap *soap,
	bool synthetic,
	wchar_t *name,
	wchar_t *scriptingName,
	wchar_t *description,
	wchar_t *format,
	wchar_t *formatLabel,
	ns1__userType *userType,
	const std::vector<ns1__userType *> & formatComponentUserTypes,
	bool publicAccess,
	xsd__anyType *defaultValue,
	enum ns1__variableStoreType *storeType,
	char *__item__1)
{
	ns1__variableDefinition *_p = ::soap_new_ns1__variableDefinition(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__variableDefinition::synthetic = synthetic;
		_p->ns1__variableDefinition::name = name;
		_p->ns1__variableDefinition::scriptingName = scriptingName;
		_p->ns1__variableDefinition::description = description;
		_p->ns1__variableDefinition::format = format;
		_p->ns1__variableDefinition::formatLabel = formatLabel;
		_p->ns1__variableDefinition::userType = userType;
		_p->ns1__variableDefinition::formatComponentUserTypes = formatComponentUserTypes;
		_p->ns1__variableDefinition::publicAccess = publicAccess;
		_p->ns1__variableDefinition::defaultValue = defaultValue;
		_p->ns1__variableDefinition::storeType = storeType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__variableDefinition(struct soap *soap, ns1__variableDefinition const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:variableDefinition", p->soap_type() == SOAP_TYPE_ns1__variableDefinition ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__variableDefinition(struct soap *soap, const char *URL, ns1__variableDefinition const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:variableDefinition", p->soap_type() == SOAP_TYPE_ns1__variableDefinition ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__variableDefinition(struct soap *soap, const char *URL, ns1__variableDefinition const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:variableDefinition", p->soap_type() == SOAP_TYPE_ns1__variableDefinition ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__variableDefinition * SOAP_FMAC4 soap_get_ns1__variableDefinition(struct soap*, ns1__variableDefinition *, const char*, const char*);

inline int soap_read_ns1__variableDefinition(struct soap *soap, ns1__variableDefinition *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__variableDefinition(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__variableDefinition(struct soap *soap, const char *URL, ns1__variableDefinition *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__variableDefinition(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__variableDefinition(struct soap *soap, ns1__variableDefinition *p)
{
	if (::soap_read_ns1__variableDefinition(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__wfVariable_DEFINED
#define SOAP_TYPE_ns1__wfVariable_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__wfVariable(struct soap*, const char*, int, const ns1__wfVariable *, const char*);
SOAP_FMAC3 ns1__wfVariable * SOAP_FMAC4 soap_in_ns1__wfVariable(struct soap*, const char*, ns1__wfVariable *, const char*);
SOAP_FMAC1 ns1__wfVariable * SOAP_FMAC2 soap_instantiate_ns1__wfVariable(struct soap*, int, const char*, const char*, size_t*);

inline ns1__wfVariable * soap_new_ns1__wfVariable(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__wfVariable(soap, n, NULL, NULL, NULL);
}

inline ns1__wfVariable * soap_new_req_ns1__wfVariable(
	struct soap *soap)
{
	ns1__wfVariable *_p = ::soap_new_ns1__wfVariable(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__wfVariable * soap_new_set_ns1__wfVariable(
	struct soap *soap,
	ns1__variableDefinition *definition,
	xsd__anyType *value,
	char *__item__1)
{
	ns1__wfVariable *_p = ::soap_new_ns1__wfVariable(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__wfVariable::definition = definition;
		_p->ns1__wfVariable::value = value;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__wfVariable(struct soap *soap, ns1__wfVariable const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:wfVariable", p->soap_type() == SOAP_TYPE_ns1__wfVariable ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__wfVariable(struct soap *soap, const char *URL, ns1__wfVariable const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:wfVariable", p->soap_type() == SOAP_TYPE_ns1__wfVariable ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__wfVariable(struct soap *soap, const char *URL, ns1__wfVariable const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:wfVariable", p->soap_type() == SOAP_TYPE_ns1__wfVariable ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__wfVariable * SOAP_FMAC4 soap_get_ns1__wfVariable(struct soap*, ns1__wfVariable *, const char*, const char*);

inline int soap_read_ns1__wfVariable(struct soap *soap, ns1__wfVariable *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__wfVariable(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__wfVariable(struct soap *soap, const char *URL, ns1__wfVariable *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__wfVariable(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__wfVariable(struct soap *soap, ns1__wfVariable *p)
{
	if (::soap_read_ns1__wfVariable(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__wfTask_DEFINED
#define SOAP_TYPE_ns1__wfTask_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__wfTask(struct soap*, const char*, int, const ns1__wfTask *, const char*);
SOAP_FMAC3 ns1__wfTask * SOAP_FMAC4 soap_in_ns1__wfTask(struct soap*, const char*, ns1__wfTask *, const char*);
SOAP_FMAC1 ns1__wfTask * SOAP_FMAC2 soap_instantiate_ns1__wfTask(struct soap*, int, const char*, const char*, size_t*);

inline ns1__wfTask * soap_new_ns1__wfTask(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__wfTask(soap, n, NULL, NULL, NULL);
}

inline ns1__wfTask * soap_new_req_ns1__wfTask(
	struct soap *soap,
	bool escalated,
	bool firstOpen,
	bool acquiredBySubstitution,
	bool readOnly)
{
	ns1__wfTask *_p = ::soap_new_ns1__wfTask(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__wfTask::escalated = escalated;
		_p->ns1__wfTask::firstOpen = firstOpen;
		_p->ns1__wfTask::acquiredBySubstitution = acquiredBySubstitution;
		_p->ns1__wfTask::readOnly = readOnly;
	}
	return _p;
}

inline ns1__wfTask * soap_new_set_ns1__wfTask(
	struct soap *soap,
	LONG64 *id,
	wchar_t *name,
	wchar_t *nodeId,
	wchar_t *description,
	wchar_t *swimlaneName,
	ns1__wfExecutor *owner,
	ns1__actor *targetActor,
	LONG64 *definitionId,
	wchar_t *definitionName,
	LONG64 *processId,
	wchar_t *processHierarchyIds,
	LONG64 *tokenId,
	time_t *creationDate,
	time_t *deadlineDate,
	time_t *deadlineWarningDate,
	time_t *assignDate,
	bool escalated,
	bool firstOpen,
	bool acquiredBySubstitution,
	int *multitaskIndex,
	bool readOnly,
	const std::vector<ns1__wfVariable *> & variables,
	char *__item__1)
{
	ns1__wfTask *_p = ::soap_new_ns1__wfTask(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__wfTask::id = id;
		_p->ns1__wfTask::name = name;
		_p->ns1__wfTask::nodeId = nodeId;
		_p->ns1__wfTask::description = description;
		_p->ns1__wfTask::swimlaneName = swimlaneName;
		_p->ns1__wfTask::owner = owner;
		_p->ns1__wfTask::targetActor = targetActor;
		_p->ns1__wfTask::definitionId = definitionId;
		_p->ns1__wfTask::definitionName = definitionName;
		_p->ns1__wfTask::processId = processId;
		_p->ns1__wfTask::processHierarchyIds = processHierarchyIds;
		_p->ns1__wfTask::tokenId = tokenId;
		_p->ns1__wfTask::creationDate = creationDate;
		_p->ns1__wfTask::deadlineDate = deadlineDate;
		_p->ns1__wfTask::deadlineWarningDate = deadlineWarningDate;
		_p->ns1__wfTask::assignDate = assignDate;
		_p->ns1__wfTask::escalated = escalated;
		_p->ns1__wfTask::firstOpen = firstOpen;
		_p->ns1__wfTask::acquiredBySubstitution = acquiredBySubstitution;
		_p->ns1__wfTask::multitaskIndex = multitaskIndex;
		_p->ns1__wfTask::readOnly = readOnly;
		_p->ns1__wfTask::variables = variables;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__wfTask(struct soap *soap, ns1__wfTask const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:wfTask", p->soap_type() == SOAP_TYPE_ns1__wfTask ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__wfTask(struct soap *soap, const char *URL, ns1__wfTask const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:wfTask", p->soap_type() == SOAP_TYPE_ns1__wfTask ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__wfTask(struct soap *soap, const char *URL, ns1__wfTask const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:wfTask", p->soap_type() == SOAP_TYPE_ns1__wfTask ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__wfTask * SOAP_FMAC4 soap_get_ns1__wfTask(struct soap*, ns1__wfTask *, const char*, const char*);

inline int soap_read_ns1__wfTask(struct soap *soap, ns1__wfTask *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__wfTask(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__wfTask(struct soap *soap, const char *URL, ns1__wfTask *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__wfTask(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__wfTask(struct soap *soap, ns1__wfTask *p)
{
	if (::soap_read_ns1__wfTask(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getMyTasksResponse_DEFINED
#define SOAP_TYPE_ns1__getMyTasksResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getMyTasksResponse(struct soap*, const char*, int, const ns1__getMyTasksResponse *, const char*);
SOAP_FMAC3 ns1__getMyTasksResponse * SOAP_FMAC4 soap_in_ns1__getMyTasksResponse(struct soap*, const char*, ns1__getMyTasksResponse *, const char*);
SOAP_FMAC1 ns1__getMyTasksResponse * SOAP_FMAC2 soap_instantiate_ns1__getMyTasksResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getMyTasksResponse * soap_new_ns1__getMyTasksResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getMyTasksResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getMyTasksResponse * soap_new_req_ns1__getMyTasksResponse(
	struct soap *soap)
{
	ns1__getMyTasksResponse *_p = ::soap_new_ns1__getMyTasksResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getMyTasksResponse * soap_new_set_ns1__getMyTasksResponse(
	struct soap *soap,
	const std::vector<ns1__wfTask *> & result,
	char *__item__1)
{
	ns1__getMyTasksResponse *_p = ::soap_new_ns1__getMyTasksResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getMyTasksResponse::result = result;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__getMyTasksResponse(struct soap *soap, ns1__getMyTasksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMyTasksResponse", p->soap_type() == SOAP_TYPE_ns1__getMyTasksResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getMyTasksResponse(struct soap *soap, const char *URL, ns1__getMyTasksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMyTasksResponse", p->soap_type() == SOAP_TYPE_ns1__getMyTasksResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getMyTasksResponse(struct soap *soap, const char *URL, ns1__getMyTasksResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMyTasksResponse", p->soap_type() == SOAP_TYPE_ns1__getMyTasksResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getMyTasksResponse * SOAP_FMAC4 soap_get_ns1__getMyTasksResponse(struct soap*, ns1__getMyTasksResponse *, const char*, const char*);

inline int soap_read_ns1__getMyTasksResponse(struct soap *soap, ns1__getMyTasksResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getMyTasksResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getMyTasksResponse(struct soap *soap, const char *URL, ns1__getMyTasksResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getMyTasksResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getMyTasksResponse(struct soap *soap, ns1__getMyTasksResponse *p)
{
	if (::soap_read_ns1__getMyTasksResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__batchPresentation_DEFINED
#define SOAP_TYPE_ns1__batchPresentation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__batchPresentation(struct soap*, const char*, int, const ns1__batchPresentation *, const char*);
SOAP_FMAC3 ns1__batchPresentation * SOAP_FMAC4 soap_in_ns1__batchPresentation(struct soap*, const char*, ns1__batchPresentation *, const char*);
SOAP_FMAC1 ns1__batchPresentation * SOAP_FMAC2 soap_instantiate_ns1__batchPresentation(struct soap*, int, const char*, const char*, size_t*);

inline ns1__batchPresentation * soap_new_ns1__batchPresentation(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__batchPresentation(soap, n, NULL, NULL, NULL);
}

inline ns1__batchPresentation * soap_new_req_ns1__batchPresentation(
	struct soap *soap,
	bool active,
	int rangeSize,
	int pageNumber,
	bool shared)
{
	ns1__batchPresentation *_p = ::soap_new_ns1__batchPresentation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__batchPresentation::active = active;
		_p->ns1__batchPresentation::rangeSize = rangeSize;
		_p->ns1__batchPresentation::pageNumber = pageNumber;
		_p->ns1__batchPresentation::shared = shared;
	}
	return _p;
}

inline ns1__batchPresentation * soap_new_set_ns1__batchPresentation(
	struct soap *soap,
	LONG64 *id,
	LONG64 *version,
	enum ns1__classPresentationType *type,
	wchar_t *category,
	wchar_t *name,
	bool active,
	int rangeSize,
	int pageNumber,
	xsd__base64Binary *fieldsData,
	time_t *createDate,
	bool shared,
	char *__item__1)
{
	ns1__batchPresentation *_p = ::soap_new_ns1__batchPresentation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__batchPresentation::id = id;
		_p->ns1__batchPresentation::version = version;
		_p->ns1__batchPresentation::type = type;
		_p->ns1__batchPresentation::category = category;
		_p->ns1__batchPresentation::name = name;
		_p->ns1__batchPresentation::active = active;
		_p->ns1__batchPresentation::rangeSize = rangeSize;
		_p->ns1__batchPresentation::pageNumber = pageNumber;
		_p->ns1__batchPresentation::fieldsData = fieldsData;
		_p->ns1__batchPresentation::createDate = createDate;
		_p->ns1__batchPresentation::shared = shared;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__batchPresentation(struct soap *soap, ns1__batchPresentation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:batchPresentation", p->soap_type() == SOAP_TYPE_ns1__batchPresentation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__batchPresentation(struct soap *soap, const char *URL, ns1__batchPresentation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:batchPresentation", p->soap_type() == SOAP_TYPE_ns1__batchPresentation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__batchPresentation(struct soap *soap, const char *URL, ns1__batchPresentation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:batchPresentation", p->soap_type() == SOAP_TYPE_ns1__batchPresentation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__batchPresentation * SOAP_FMAC4 soap_get_ns1__batchPresentation(struct soap*, ns1__batchPresentation *, const char*, const char*);

inline int soap_read_ns1__batchPresentation(struct soap *soap, ns1__batchPresentation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__batchPresentation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__batchPresentation(struct soap *soap, const char *URL, ns1__batchPresentation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__batchPresentation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__batchPresentation(struct soap *soap, ns1__batchPresentation *p)
{
	if (::soap_read_ns1__batchPresentation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getMyTasks_DEFINED
#define SOAP_TYPE_ns1__getMyTasks_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getMyTasks(struct soap*, const char*, int, const ns1__getMyTasks *, const char*);
SOAP_FMAC3 ns1__getMyTasks * SOAP_FMAC4 soap_in_ns1__getMyTasks(struct soap*, const char*, ns1__getMyTasks *, const char*);
SOAP_FMAC1 ns1__getMyTasks * SOAP_FMAC2 soap_instantiate_ns1__getMyTasks(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getMyTasks * soap_new_ns1__getMyTasks(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getMyTasks(soap, n, NULL, NULL, NULL);
}

inline ns1__getMyTasks * soap_new_req_ns1__getMyTasks(
	struct soap *soap)
{
	ns1__getMyTasks *_p = ::soap_new_ns1__getMyTasks(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getMyTasks * soap_new_set_ns1__getMyTasks(
	struct soap *soap,
	ns1__user *user,
	ns1__batchPresentation *batchPresentation,
	char *__item__1)
{
	ns1__getMyTasks *_p = ::soap_new_ns1__getMyTasks(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getMyTasks::user = user;
		_p->ns1__getMyTasks::batchPresentation = batchPresentation;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__getMyTasks(struct soap *soap, ns1__getMyTasks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMyTasks", p->soap_type() == SOAP_TYPE_ns1__getMyTasks ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getMyTasks(struct soap *soap, const char *URL, ns1__getMyTasks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMyTasks", p->soap_type() == SOAP_TYPE_ns1__getMyTasks ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getMyTasks(struct soap *soap, const char *URL, ns1__getMyTasks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMyTasks", p->soap_type() == SOAP_TYPE_ns1__getMyTasks ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getMyTasks * SOAP_FMAC4 soap_get_ns1__getMyTasks(struct soap*, ns1__getMyTasks *, const char*, const char*);

inline int soap_read_ns1__getMyTasks(struct soap *soap, ns1__getMyTasks *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getMyTasks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getMyTasks(struct soap *soap, const char *URL, ns1__getMyTasks *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getMyTasks(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getMyTasks(struct soap *soap, ns1__getMyTasks *p)
{
	if (::soap_read_ns1__getMyTasks(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__reassignTaskResponse_DEFINED
#define SOAP_TYPE_ns1__reassignTaskResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reassignTaskResponse(struct soap*, const char*, int, const ns1__reassignTaskResponse *, const char*);
SOAP_FMAC3 ns1__reassignTaskResponse * SOAP_FMAC4 soap_in_ns1__reassignTaskResponse(struct soap*, const char*, ns1__reassignTaskResponse *, const char*);
SOAP_FMAC1 ns1__reassignTaskResponse * SOAP_FMAC2 soap_instantiate_ns1__reassignTaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__reassignTaskResponse * soap_new_ns1__reassignTaskResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__reassignTaskResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__reassignTaskResponse * soap_new_req_ns1__reassignTaskResponse(
	struct soap *soap,
	bool result)
{
	ns1__reassignTaskResponse *_p = ::soap_new_ns1__reassignTaskResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__reassignTaskResponse::result = result;
	}
	return _p;
}

inline ns1__reassignTaskResponse * soap_new_set_ns1__reassignTaskResponse(
	struct soap *soap,
	bool result,
	char *__item__1)
{
	ns1__reassignTaskResponse *_p = ::soap_new_ns1__reassignTaskResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__reassignTaskResponse::result = result;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__reassignTaskResponse(struct soap *soap, ns1__reassignTaskResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:reassignTaskResponse", p->soap_type() == SOAP_TYPE_ns1__reassignTaskResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__reassignTaskResponse(struct soap *soap, const char *URL, ns1__reassignTaskResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:reassignTaskResponse", p->soap_type() == SOAP_TYPE_ns1__reassignTaskResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__reassignTaskResponse(struct soap *soap, const char *URL, ns1__reassignTaskResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:reassignTaskResponse", p->soap_type() == SOAP_TYPE_ns1__reassignTaskResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__reassignTaskResponse * SOAP_FMAC4 soap_get_ns1__reassignTaskResponse(struct soap*, ns1__reassignTaskResponse *, const char*, const char*);

inline int soap_read_ns1__reassignTaskResponse(struct soap *soap, ns1__reassignTaskResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__reassignTaskResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__reassignTaskResponse(struct soap *soap, const char *URL, ns1__reassignTaskResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__reassignTaskResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__reassignTaskResponse(struct soap *soap, ns1__reassignTaskResponse *p)
{
	if (::soap_read_ns1__reassignTaskResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__reassignTask_DEFINED
#define SOAP_TYPE_ns1__reassignTask_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reassignTask(struct soap*, const char*, int, const ns1__reassignTask *, const char*);
SOAP_FMAC3 ns1__reassignTask * SOAP_FMAC4 soap_in_ns1__reassignTask(struct soap*, const char*, ns1__reassignTask *, const char*);
SOAP_FMAC1 ns1__reassignTask * SOAP_FMAC2 soap_instantiate_ns1__reassignTask(struct soap*, int, const char*, const char*, size_t*);

inline ns1__reassignTask * soap_new_ns1__reassignTask(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__reassignTask(soap, n, NULL, NULL, NULL);
}

inline ns1__reassignTask * soap_new_req_ns1__reassignTask(
	struct soap *soap)
{
	ns1__reassignTask *_p = ::soap_new_ns1__reassignTask(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__reassignTask * soap_new_set_ns1__reassignTask(
	struct soap *soap,
	ns1__user *user,
	LONG64 *batchPresentation,
	char *__item__1)
{
	ns1__reassignTask *_p = ::soap_new_ns1__reassignTask(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__reassignTask::user = user;
		_p->ns1__reassignTask::batchPresentation = batchPresentation;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__reassignTask(struct soap *soap, ns1__reassignTask const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:reassignTask", p->soap_type() == SOAP_TYPE_ns1__reassignTask ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__reassignTask(struct soap *soap, const char *URL, ns1__reassignTask const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:reassignTask", p->soap_type() == SOAP_TYPE_ns1__reassignTask ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__reassignTask(struct soap *soap, const char *URL, ns1__reassignTask const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:reassignTask", p->soap_type() == SOAP_TYPE_ns1__reassignTask ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__reassignTask * SOAP_FMAC4 soap_get_ns1__reassignTask(struct soap*, ns1__reassignTask *, const char*, const char*);

inline int soap_read_ns1__reassignTask(struct soap *soap, ns1__reassignTask *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__reassignTask(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__reassignTask(struct soap *soap, const char *URL, ns1__reassignTask *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__reassignTask(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__reassignTask(struct soap *soap, ns1__reassignTask *p)
{
	if (::soap_read_ns1__reassignTask(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__authenticateByKerberosResponse_DEFINED
#define SOAP_TYPE_ns1__authenticateByKerberosResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByKerberosResponse(struct soap*, const char*, int, const ns1__authenticateByKerberosResponse *, const char*);
SOAP_FMAC3 ns1__authenticateByKerberosResponse * SOAP_FMAC4 soap_in_ns1__authenticateByKerberosResponse(struct soap*, const char*, ns1__authenticateByKerberosResponse *, const char*);
SOAP_FMAC1 ns1__authenticateByKerberosResponse * SOAP_FMAC2 soap_instantiate_ns1__authenticateByKerberosResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__authenticateByKerberosResponse * soap_new_ns1__authenticateByKerberosResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__authenticateByKerberosResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__authenticateByKerberosResponse * soap_new_req_ns1__authenticateByKerberosResponse(
	struct soap *soap)
{
	ns1__authenticateByKerberosResponse *_p = ::soap_new_ns1__authenticateByKerberosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__authenticateByKerberosResponse * soap_new_set_ns1__authenticateByKerberosResponse(
	struct soap *soap,
	ns1__user *result,
	char *__item__1)
{
	ns1__authenticateByKerberosResponse *_p = ::soap_new_ns1__authenticateByKerberosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__authenticateByKerberosResponse::result = result;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__authenticateByKerberosResponse(struct soap *soap, ns1__authenticateByKerberosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByKerberosResponse", p->soap_type() == SOAP_TYPE_ns1__authenticateByKerberosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__authenticateByKerberosResponse(struct soap *soap, const char *URL, ns1__authenticateByKerberosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByKerberosResponse", p->soap_type() == SOAP_TYPE_ns1__authenticateByKerberosResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__authenticateByKerberosResponse(struct soap *soap, const char *URL, ns1__authenticateByKerberosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByKerberosResponse", p->soap_type() == SOAP_TYPE_ns1__authenticateByKerberosResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__authenticateByKerberosResponse * SOAP_FMAC4 soap_get_ns1__authenticateByKerberosResponse(struct soap*, ns1__authenticateByKerberosResponse *, const char*, const char*);

inline int soap_read_ns1__authenticateByKerberosResponse(struct soap *soap, ns1__authenticateByKerberosResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__authenticateByKerberosResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__authenticateByKerberosResponse(struct soap *soap, const char *URL, ns1__authenticateByKerberosResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__authenticateByKerberosResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__authenticateByKerberosResponse(struct soap *soap, ns1__authenticateByKerberosResponse *p)
{
	if (::soap_read_ns1__authenticateByKerberosResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__authenticateByKerberos_DEFINED
#define SOAP_TYPE_ns1__authenticateByKerberos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByKerberos(struct soap*, const char*, int, const ns1__authenticateByKerberos *, const char*);
SOAP_FMAC3 ns1__authenticateByKerberos * SOAP_FMAC4 soap_in_ns1__authenticateByKerberos(struct soap*, const char*, ns1__authenticateByKerberos *, const char*);
SOAP_FMAC1 ns1__authenticateByKerberos * SOAP_FMAC2 soap_instantiate_ns1__authenticateByKerberos(struct soap*, int, const char*, const char*, size_t*);

inline ns1__authenticateByKerberos * soap_new_ns1__authenticateByKerberos(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__authenticateByKerberos(soap, n, NULL, NULL, NULL);
}

inline ns1__authenticateByKerberos * soap_new_req_ns1__authenticateByKerberos(
	struct soap *soap)
{
	ns1__authenticateByKerberos *_p = ::soap_new_ns1__authenticateByKerberos(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__authenticateByKerberos * soap_new_set_ns1__authenticateByKerberos(
	struct soap *soap,
	xsd__base64Binary *token,
	char *__item__1)
{
	ns1__authenticateByKerberos *_p = ::soap_new_ns1__authenticateByKerberos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__authenticateByKerberos::token = token;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__authenticateByKerberos(struct soap *soap, ns1__authenticateByKerberos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByKerberos", p->soap_type() == SOAP_TYPE_ns1__authenticateByKerberos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__authenticateByKerberos(struct soap *soap, const char *URL, ns1__authenticateByKerberos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByKerberos", p->soap_type() == SOAP_TYPE_ns1__authenticateByKerberos ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__authenticateByKerberos(struct soap *soap, const char *URL, ns1__authenticateByKerberos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByKerberos", p->soap_type() == SOAP_TYPE_ns1__authenticateByKerberos ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__authenticateByKerberos * SOAP_FMAC4 soap_get_ns1__authenticateByKerberos(struct soap*, ns1__authenticateByKerberos *, const char*, const char*);

inline int soap_read_ns1__authenticateByKerberos(struct soap *soap, ns1__authenticateByKerberos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__authenticateByKerberos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__authenticateByKerberos(struct soap *soap, const char *URL, ns1__authenticateByKerberos *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__authenticateByKerberos(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__authenticateByKerberos(struct soap *soap, ns1__authenticateByKerberos *p)
{
	if (::soap_read_ns1__authenticateByKerberos(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse_DEFINED
#define SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByTrustedPrincipalResponse(struct soap*, const char*, int, const ns1__authenticateByTrustedPrincipalResponse *, const char*);
SOAP_FMAC3 ns1__authenticateByTrustedPrincipalResponse * SOAP_FMAC4 soap_in_ns1__authenticateByTrustedPrincipalResponse(struct soap*, const char*, ns1__authenticateByTrustedPrincipalResponse *, const char*);
SOAP_FMAC1 ns1__authenticateByTrustedPrincipalResponse * SOAP_FMAC2 soap_instantiate_ns1__authenticateByTrustedPrincipalResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__authenticateByTrustedPrincipalResponse * soap_new_ns1__authenticateByTrustedPrincipalResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__authenticateByTrustedPrincipalResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__authenticateByTrustedPrincipalResponse * soap_new_req_ns1__authenticateByTrustedPrincipalResponse(
	struct soap *soap)
{
	ns1__authenticateByTrustedPrincipalResponse *_p = ::soap_new_ns1__authenticateByTrustedPrincipalResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__authenticateByTrustedPrincipalResponse * soap_new_set_ns1__authenticateByTrustedPrincipalResponse(
	struct soap *soap,
	ns1__user *result,
	char *__item__1)
{
	ns1__authenticateByTrustedPrincipalResponse *_p = ::soap_new_ns1__authenticateByTrustedPrincipalResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__authenticateByTrustedPrincipalResponse::result = result;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__authenticateByTrustedPrincipalResponse(struct soap *soap, ns1__authenticateByTrustedPrincipalResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByTrustedPrincipalResponse", p->soap_type() == SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__authenticateByTrustedPrincipalResponse(struct soap *soap, const char *URL, ns1__authenticateByTrustedPrincipalResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByTrustedPrincipalResponse", p->soap_type() == SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__authenticateByTrustedPrincipalResponse(struct soap *soap, const char *URL, ns1__authenticateByTrustedPrincipalResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByTrustedPrincipalResponse", p->soap_type() == SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__authenticateByTrustedPrincipalResponse * SOAP_FMAC4 soap_get_ns1__authenticateByTrustedPrincipalResponse(struct soap*, ns1__authenticateByTrustedPrincipalResponse *, const char*, const char*);

inline int soap_read_ns1__authenticateByTrustedPrincipalResponse(struct soap *soap, ns1__authenticateByTrustedPrincipalResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__authenticateByTrustedPrincipalResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__authenticateByTrustedPrincipalResponse(struct soap *soap, const char *URL, ns1__authenticateByTrustedPrincipalResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__authenticateByTrustedPrincipalResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__authenticateByTrustedPrincipalResponse(struct soap *soap, ns1__authenticateByTrustedPrincipalResponse *p)
{
	if (::soap_read_ns1__authenticateByTrustedPrincipalResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__authenticateByTrustedPrincipal_DEFINED
#define SOAP_TYPE_ns1__authenticateByTrustedPrincipal_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByTrustedPrincipal(struct soap*, const char*, int, const ns1__authenticateByTrustedPrincipal *, const char*);
SOAP_FMAC3 ns1__authenticateByTrustedPrincipal * SOAP_FMAC4 soap_in_ns1__authenticateByTrustedPrincipal(struct soap*, const char*, ns1__authenticateByTrustedPrincipal *, const char*);
SOAP_FMAC1 ns1__authenticateByTrustedPrincipal * SOAP_FMAC2 soap_instantiate_ns1__authenticateByTrustedPrincipal(struct soap*, int, const char*, const char*, size_t*);

inline ns1__authenticateByTrustedPrincipal * soap_new_ns1__authenticateByTrustedPrincipal(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__authenticateByTrustedPrincipal(soap, n, NULL, NULL, NULL);
}

inline ns1__authenticateByTrustedPrincipal * soap_new_req_ns1__authenticateByTrustedPrincipal(
	struct soap *soap)
{
	ns1__authenticateByTrustedPrincipal *_p = ::soap_new_ns1__authenticateByTrustedPrincipal(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__authenticateByTrustedPrincipal * soap_new_set_ns1__authenticateByTrustedPrincipal(
	struct soap *soap,
	ns1__user *serviceUser,
	wchar_t *login,
	char *__item__1)
{
	ns1__authenticateByTrustedPrincipal *_p = ::soap_new_ns1__authenticateByTrustedPrincipal(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__authenticateByTrustedPrincipal::serviceUser = serviceUser;
		_p->ns1__authenticateByTrustedPrincipal::login = login;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__authenticateByTrustedPrincipal(struct soap *soap, ns1__authenticateByTrustedPrincipal const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByTrustedPrincipal", p->soap_type() == SOAP_TYPE_ns1__authenticateByTrustedPrincipal ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__authenticateByTrustedPrincipal(struct soap *soap, const char *URL, ns1__authenticateByTrustedPrincipal const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByTrustedPrincipal", p->soap_type() == SOAP_TYPE_ns1__authenticateByTrustedPrincipal ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__authenticateByTrustedPrincipal(struct soap *soap, const char *URL, ns1__authenticateByTrustedPrincipal const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByTrustedPrincipal", p->soap_type() == SOAP_TYPE_ns1__authenticateByTrustedPrincipal ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__authenticateByTrustedPrincipal * SOAP_FMAC4 soap_get_ns1__authenticateByTrustedPrincipal(struct soap*, ns1__authenticateByTrustedPrincipal *, const char*, const char*);

inline int soap_read_ns1__authenticateByTrustedPrincipal(struct soap *soap, ns1__authenticateByTrustedPrincipal *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__authenticateByTrustedPrincipal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__authenticateByTrustedPrincipal(struct soap *soap, const char *URL, ns1__authenticateByTrustedPrincipal *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__authenticateByTrustedPrincipal(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__authenticateByTrustedPrincipal(struct soap *soap, ns1__authenticateByTrustedPrincipal *p)
{
	if (::soap_read_ns1__authenticateByTrustedPrincipal(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__authenticateByLoginPasswordResponse_DEFINED
#define SOAP_TYPE_ns1__authenticateByLoginPasswordResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByLoginPasswordResponse(struct soap*, const char*, int, const ns1__authenticateByLoginPasswordResponse *, const char*);
SOAP_FMAC3 ns1__authenticateByLoginPasswordResponse * SOAP_FMAC4 soap_in_ns1__authenticateByLoginPasswordResponse(struct soap*, const char*, ns1__authenticateByLoginPasswordResponse *, const char*);
SOAP_FMAC1 ns1__authenticateByLoginPasswordResponse * SOAP_FMAC2 soap_instantiate_ns1__authenticateByLoginPasswordResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__authenticateByLoginPasswordResponse * soap_new_ns1__authenticateByLoginPasswordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__authenticateByLoginPasswordResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__authenticateByLoginPasswordResponse * soap_new_req_ns1__authenticateByLoginPasswordResponse(
	struct soap *soap)
{
	ns1__authenticateByLoginPasswordResponse *_p = ::soap_new_ns1__authenticateByLoginPasswordResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__authenticateByLoginPasswordResponse * soap_new_set_ns1__authenticateByLoginPasswordResponse(
	struct soap *soap,
	ns1__user *result,
	char *__item__1)
{
	ns1__authenticateByLoginPasswordResponse *_p = ::soap_new_ns1__authenticateByLoginPasswordResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__authenticateByLoginPasswordResponse::result = result;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__authenticateByLoginPasswordResponse(struct soap *soap, ns1__authenticateByLoginPasswordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByLoginPasswordResponse", p->soap_type() == SOAP_TYPE_ns1__authenticateByLoginPasswordResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__authenticateByLoginPasswordResponse(struct soap *soap, const char *URL, ns1__authenticateByLoginPasswordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByLoginPasswordResponse", p->soap_type() == SOAP_TYPE_ns1__authenticateByLoginPasswordResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__authenticateByLoginPasswordResponse(struct soap *soap, const char *URL, ns1__authenticateByLoginPasswordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByLoginPasswordResponse", p->soap_type() == SOAP_TYPE_ns1__authenticateByLoginPasswordResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__authenticateByLoginPasswordResponse * SOAP_FMAC4 soap_get_ns1__authenticateByLoginPasswordResponse(struct soap*, ns1__authenticateByLoginPasswordResponse *, const char*, const char*);

inline int soap_read_ns1__authenticateByLoginPasswordResponse(struct soap *soap, ns1__authenticateByLoginPasswordResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__authenticateByLoginPasswordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__authenticateByLoginPasswordResponse(struct soap *soap, const char *URL, ns1__authenticateByLoginPasswordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__authenticateByLoginPasswordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__authenticateByLoginPasswordResponse(struct soap *soap, ns1__authenticateByLoginPasswordResponse *p)
{
	if (::soap_read_ns1__authenticateByLoginPasswordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__authenticateByLoginPassword_DEFINED
#define SOAP_TYPE_ns1__authenticateByLoginPassword_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByLoginPassword(struct soap*, const char*, int, const ns1__authenticateByLoginPassword *, const char*);
SOAP_FMAC3 ns1__authenticateByLoginPassword * SOAP_FMAC4 soap_in_ns1__authenticateByLoginPassword(struct soap*, const char*, ns1__authenticateByLoginPassword *, const char*);
SOAP_FMAC1 ns1__authenticateByLoginPassword * SOAP_FMAC2 soap_instantiate_ns1__authenticateByLoginPassword(struct soap*, int, const char*, const char*, size_t*);

inline ns1__authenticateByLoginPassword * soap_new_ns1__authenticateByLoginPassword(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__authenticateByLoginPassword(soap, n, NULL, NULL, NULL);
}

inline ns1__authenticateByLoginPassword * soap_new_req_ns1__authenticateByLoginPassword(
	struct soap *soap)
{
	ns1__authenticateByLoginPassword *_p = ::soap_new_ns1__authenticateByLoginPassword(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__authenticateByLoginPassword * soap_new_set_ns1__authenticateByLoginPassword(
	struct soap *soap,
	wchar_t *name,
	wchar_t *password,
	char *__item__1)
{
	ns1__authenticateByLoginPassword *_p = ::soap_new_ns1__authenticateByLoginPassword(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__authenticateByLoginPassword::name = name;
		_p->ns1__authenticateByLoginPassword::password = password;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__authenticateByLoginPassword(struct soap *soap, ns1__authenticateByLoginPassword const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByLoginPassword", p->soap_type() == SOAP_TYPE_ns1__authenticateByLoginPassword ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__authenticateByLoginPassword(struct soap *soap, const char *URL, ns1__authenticateByLoginPassword const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByLoginPassword", p->soap_type() == SOAP_TYPE_ns1__authenticateByLoginPassword ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__authenticateByLoginPassword(struct soap *soap, const char *URL, ns1__authenticateByLoginPassword const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByLoginPassword", p->soap_type() == SOAP_TYPE_ns1__authenticateByLoginPassword ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__authenticateByLoginPassword * SOAP_FMAC4 soap_get_ns1__authenticateByLoginPassword(struct soap*, ns1__authenticateByLoginPassword *, const char*, const char*);

inline int soap_read_ns1__authenticateByLoginPassword(struct soap *soap, ns1__authenticateByLoginPassword *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__authenticateByLoginPassword(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__authenticateByLoginPassword(struct soap *soap, const char *URL, ns1__authenticateByLoginPassword *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__authenticateByLoginPassword(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__authenticateByLoginPassword(struct soap *soap, ns1__authenticateByLoginPassword *p)
{
	if (::soap_read_ns1__authenticateByLoginPassword(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__wfExecutor_DEFINED
#define SOAP_TYPE_ns1__wfExecutor_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__wfExecutor(struct soap*, const char*, int, const ns1__wfExecutor *, const char*);
SOAP_FMAC3 ns1__wfExecutor * SOAP_FMAC4 soap_in_ns1__wfExecutor(struct soap*, const char*, ns1__wfExecutor *, const char*);
SOAP_FMAC1 ns1__wfExecutor * SOAP_FMAC2 soap_instantiate_ns1__wfExecutor(struct soap*, int, const char*, const char*, size_t*);

inline ns1__wfExecutor * soap_new_ns1__wfExecutor(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__wfExecutor(soap, n, NULL, NULL, NULL);
}

inline ns1__wfExecutor * soap_new_req_ns1__wfExecutor(
	struct soap *soap)
{
	ns1__wfExecutor *_p = ::soap_new_ns1__wfExecutor(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__wfExecutor * soap_new_set_ns1__wfExecutor(
	struct soap *soap,
	wchar_t *executorClassName,
	LONG64 *id__1,
	LONG64 *version__1,
	wchar_t *name__1,
	wchar_t *description__1,
	wchar_t *fullName__1,
	time_t *createDate__1,
	char *__item__4)
{
	ns1__wfExecutor *_p = ::soap_new_ns1__wfExecutor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__wfExecutor::executorClassName = executorClassName;
		_p->ns1__executor::id = id__1;
		_p->ns1__executor::version = version__1;
		_p->ns1__executor::name = name__1;
		_p->ns1__executor::description = description__1;
		_p->ns1__executor::fullName = fullName__1;
		_p->ns1__executor::createDate = createDate__1;
		_p->xsd__anyType::__item = __item__4;
	}
	return _p;
}

inline int soap_write_ns1__wfExecutor(struct soap *soap, ns1__wfExecutor const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:wfExecutor", p->soap_type() == SOAP_TYPE_ns1__wfExecutor ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__wfExecutor(struct soap *soap, const char *URL, ns1__wfExecutor const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:wfExecutor", p->soap_type() == SOAP_TYPE_ns1__wfExecutor ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__wfExecutor(struct soap *soap, const char *URL, ns1__wfExecutor const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:wfExecutor", p->soap_type() == SOAP_TYPE_ns1__wfExecutor ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__wfExecutor * SOAP_FMAC4 soap_get_ns1__wfExecutor(struct soap*, ns1__wfExecutor *, const char*, const char*);

inline int soap_read_ns1__wfExecutor(struct soap *soap, ns1__wfExecutor *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__wfExecutor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__wfExecutor(struct soap *soap, const char *URL, ns1__wfExecutor *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__wfExecutor(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__wfExecutor(struct soap *soap, ns1__wfExecutor *p)
{
	if (::soap_read_ns1__wfExecutor(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__identifiable_DEFINED
#define SOAP_TYPE_ns1__identifiable_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__identifiable(struct soap*, const char*, int, const ns1__identifiable *, const char*);
SOAP_FMAC3 ns1__identifiable * SOAP_FMAC4 soap_in_ns1__identifiable(struct soap*, const char*, ns1__identifiable *, const char*);
SOAP_FMAC1 ns1__identifiable * SOAP_FMAC2 soap_instantiate_ns1__identifiable(struct soap*, int, const char*, const char*, size_t*);

inline ns1__identifiable * soap_new_ns1__identifiable(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__identifiable(soap, n, NULL, NULL, NULL);
}

inline ns1__identifiable * soap_new_req_ns1__identifiable(
	struct soap *soap)
{
	ns1__identifiable *_p = ::soap_new_ns1__identifiable(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__identifiable * soap_new_set_ns1__identifiable(
	struct soap *soap,
	char *__item__1)
{
	ns1__identifiable *_p = ::soap_new_ns1__identifiable(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__identifiable(struct soap *soap, ns1__identifiable const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:identifiable", p->soap_type() == SOAP_TYPE_ns1__identifiable ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__identifiable(struct soap *soap, const char *URL, ns1__identifiable const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:identifiable", p->soap_type() == SOAP_TYPE_ns1__identifiable ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__identifiable(struct soap *soap, const char *URL, ns1__identifiable const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:identifiable", p->soap_type() == SOAP_TYPE_ns1__identifiable ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__identifiable * SOAP_FMAC4 soap_get_ns1__identifiable(struct soap*, ns1__identifiable *, const char*, const char*);

inline int soap_read_ns1__identifiable(struct soap *soap, ns1__identifiable *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__identifiable(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__identifiable(struct soap *soap, const char *URL, ns1__identifiable *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__identifiable(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__identifiable(struct soap *soap, ns1__identifiable *p)
{
	if (::soap_read_ns1__identifiable(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__identifiableBase_DEFINED
#define SOAP_TYPE_ns1__identifiableBase_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__identifiableBase(struct soap*, const char*, int, const ns1__identifiableBase *, const char*);
SOAP_FMAC3 ns1__identifiableBase * SOAP_FMAC4 soap_in_ns1__identifiableBase(struct soap*, const char*, ns1__identifiableBase *, const char*);
SOAP_FMAC1 ns1__identifiableBase * SOAP_FMAC2 soap_instantiate_ns1__identifiableBase(struct soap*, int, const char*, const char*, size_t*);

inline ns1__identifiableBase * soap_new_ns1__identifiableBase(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__identifiableBase(soap, n, NULL, NULL, NULL);
}

inline ns1__identifiableBase * soap_new_req_ns1__identifiableBase(
	struct soap *soap)
{
	ns1__identifiableBase *_p = ::soap_new_ns1__identifiableBase(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__identifiableBase * soap_new_set_ns1__identifiableBase(
	struct soap *soap,
	char *__item__2)
{
	ns1__identifiableBase *_p = ::soap_new_ns1__identifiableBase(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__identifiableBase(struct soap *soap, ns1__identifiableBase const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:identifiableBase", p->soap_type() == SOAP_TYPE_ns1__identifiableBase ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__identifiableBase(struct soap *soap, const char *URL, ns1__identifiableBase const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:identifiableBase", p->soap_type() == SOAP_TYPE_ns1__identifiableBase ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__identifiableBase(struct soap *soap, const char *URL, ns1__identifiableBase const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:identifiableBase", p->soap_type() == SOAP_TYPE_ns1__identifiableBase ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__identifiableBase * SOAP_FMAC4 soap_get_ns1__identifiableBase(struct soap*, ns1__identifiableBase *, const char*, const char*);

inline int soap_read_ns1__identifiableBase(struct soap *soap, ns1__identifiableBase *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__identifiableBase(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__identifiableBase(struct soap *soap, const char *URL, ns1__identifiableBase *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__identifiableBase(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__identifiableBase(struct soap *soap, ns1__identifiableBase *p)
{
	if (::soap_read_ns1__identifiableBase(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__executor_DEFINED
#define SOAP_TYPE_ns1__executor_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executor(struct soap*, const char*, int, const ns1__executor *, const char*);
SOAP_FMAC3 ns1__executor * SOAP_FMAC4 soap_in_ns1__executor(struct soap*, const char*, ns1__executor *, const char*);
SOAP_FMAC1 ns1__executor * SOAP_FMAC2 soap_instantiate_ns1__executor(struct soap*, int, const char*, const char*, size_t*);

inline ns1__executor * soap_new_ns1__executor(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__executor(soap, n, NULL, NULL, NULL);
}

inline ns1__executor * soap_new_req_ns1__executor(
	struct soap *soap)
{
	ns1__executor *_p = ::soap_new_ns1__executor(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__executor * soap_new_set_ns1__executor(
	struct soap *soap,
	LONG64 *id,
	LONG64 *version,
	wchar_t *name,
	wchar_t *description,
	wchar_t *fullName,
	time_t *createDate,
	char *__item__3)
{
	ns1__executor *_p = ::soap_new_ns1__executor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__executor::id = id;
		_p->ns1__executor::version = version;
		_p->ns1__executor::name = name;
		_p->ns1__executor::description = description;
		_p->ns1__executor::fullName = fullName;
		_p->ns1__executor::createDate = createDate;
		_p->xsd__anyType::__item = __item__3;
	}
	return _p;
}

inline int soap_write_ns1__executor(struct soap *soap, ns1__executor const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:executor", p->soap_type() == SOAP_TYPE_ns1__executor ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__executor(struct soap *soap, const char *URL, ns1__executor const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:executor", p->soap_type() == SOAP_TYPE_ns1__executor ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__executor(struct soap *soap, const char *URL, ns1__executor const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:executor", p->soap_type() == SOAP_TYPE_ns1__executor ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__executor * SOAP_FMAC4 soap_get_ns1__executor(struct soap*, ns1__executor *, const char*, const char*);

inline int soap_read_ns1__executor(struct soap *soap, ns1__executor *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__executor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__executor(struct soap *soap, const char *URL, ns1__executor *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__executor(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__executor(struct soap *soap, ns1__executor *p)
{
	if (::soap_read_ns1__executor(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__actor_DEFINED
#define SOAP_TYPE_ns1__actor_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__actor(struct soap*, const char*, int, const ns1__actor *, const char*);
SOAP_FMAC3 ns1__actor * SOAP_FMAC4 soap_in_ns1__actor(struct soap*, const char*, ns1__actor *, const char*);
SOAP_FMAC1 ns1__actor * SOAP_FMAC2 soap_instantiate_ns1__actor(struct soap*, int, const char*, const char*, size_t*);

inline ns1__actor * soap_new_ns1__actor(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__actor(soap, n, NULL, NULL, NULL);
}

inline ns1__actor * soap_new_req_ns1__actor(
	struct soap *soap,
	bool active)
{
	ns1__actor *_p = ::soap_new_ns1__actor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__actor::active = active;
	}
	return _p;
}

inline ns1__actor * soap_new_set_ns1__actor(
	struct soap *soap,
	LONG64 *code,
	bool active,
	wchar_t *email,
	wchar_t *phone,
	wchar_t *title,
	wchar_t *department,
	LONG64 *id__1,
	LONG64 *version__1,
	wchar_t *name__1,
	wchar_t *description__1,
	wchar_t *fullName__1,
	time_t *createDate__1,
	char *__item__4)
{
	ns1__actor *_p = ::soap_new_ns1__actor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__actor::code = code;
		_p->ns1__actor::active = active;
		_p->ns1__actor::email = email;
		_p->ns1__actor::phone = phone;
		_p->ns1__actor::title = title;
		_p->ns1__actor::department = department;
		_p->ns1__executor::id = id__1;
		_p->ns1__executor::version = version__1;
		_p->ns1__executor::name = name__1;
		_p->ns1__executor::description = description__1;
		_p->ns1__executor::fullName = fullName__1;
		_p->ns1__executor::createDate = createDate__1;
		_p->xsd__anyType::__item = __item__4;
	}
	return _p;
}

inline int soap_write_ns1__actor(struct soap *soap, ns1__actor const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:actor", p->soap_type() == SOAP_TYPE_ns1__actor ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__actor(struct soap *soap, const char *URL, ns1__actor const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:actor", p->soap_type() == SOAP_TYPE_ns1__actor ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__actor(struct soap *soap, const char *URL, ns1__actor const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:actor", p->soap_type() == SOAP_TYPE_ns1__actor ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__actor * SOAP_FMAC4 soap_get_ns1__actor(struct soap*, ns1__actor *, const char*, const char*);

inline int soap_read_ns1__actor(struct soap *soap, ns1__actor *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__actor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__actor(struct soap *soap, const char *URL, ns1__actor *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__actor(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__actor(struct soap *soap, ns1__actor *p)
{
	if (::soap_read_ns1__actor(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__user_DEFINED
#define SOAP_TYPE_ns1__user_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__user(struct soap*, const char*, int, const ns1__user *, const char*);
SOAP_FMAC3 ns1__user * SOAP_FMAC4 soap_in_ns1__user(struct soap*, const char*, ns1__user *, const char*);
SOAP_FMAC1 ns1__user * SOAP_FMAC2 soap_instantiate_ns1__user(struct soap*, int, const char*, const char*, size_t*);

inline ns1__user * soap_new_ns1__user(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__user(soap, n, NULL, NULL, NULL);
}

inline ns1__user * soap_new_req_ns1__user(
	struct soap *soap)
{
	ns1__user *_p = ::soap_new_ns1__user(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__user * soap_new_set_ns1__user(
	struct soap *soap,
	ns1__actor *actor,
	xsd__base64Binary *securedKey,
	char *__item__1)
{
	ns1__user *_p = ::soap_new_ns1__user(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__user::actor = actor;
		_p->ns1__user::securedKey = securedKey;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__user(struct soap *soap, ns1__user const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:user", p->soap_type() == SOAP_TYPE_ns1__user ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__user(struct soap *soap, const char *URL, ns1__user const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:user", p->soap_type() == SOAP_TYPE_ns1__user ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__user(struct soap *soap, const char *URL, ns1__user const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:user", p->soap_type() == SOAP_TYPE_ns1__user ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__user * SOAP_FMAC4 soap_get_ns1__user(struct soap*, ns1__user *, const char*, const char*);

inline int soap_read_ns1__user(struct soap *soap, ns1__user *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__user(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__user(struct soap *soap, const char *URL, ns1__user *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__user(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__user(struct soap *soap, ns1__user *p)
{
	if (::soap_read_ns1__user(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse_DEFINED
#define SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByCallerPrincipalResponse(struct soap*, const char*, int, const ns1__authenticateByCallerPrincipalResponse *, const char*);
SOAP_FMAC3 ns1__authenticateByCallerPrincipalResponse * SOAP_FMAC4 soap_in_ns1__authenticateByCallerPrincipalResponse(struct soap*, const char*, ns1__authenticateByCallerPrincipalResponse *, const char*);
SOAP_FMAC1 ns1__authenticateByCallerPrincipalResponse * SOAP_FMAC2 soap_instantiate_ns1__authenticateByCallerPrincipalResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__authenticateByCallerPrincipalResponse * soap_new_ns1__authenticateByCallerPrincipalResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__authenticateByCallerPrincipalResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__authenticateByCallerPrincipalResponse * soap_new_req_ns1__authenticateByCallerPrincipalResponse(
	struct soap *soap)
{
	ns1__authenticateByCallerPrincipalResponse *_p = ::soap_new_ns1__authenticateByCallerPrincipalResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__authenticateByCallerPrincipalResponse * soap_new_set_ns1__authenticateByCallerPrincipalResponse(
	struct soap *soap,
	ns1__user *result,
	char *__item__1)
{
	ns1__authenticateByCallerPrincipalResponse *_p = ::soap_new_ns1__authenticateByCallerPrincipalResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__authenticateByCallerPrincipalResponse::result = result;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__authenticateByCallerPrincipalResponse(struct soap *soap, ns1__authenticateByCallerPrincipalResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByCallerPrincipalResponse", p->soap_type() == SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__authenticateByCallerPrincipalResponse(struct soap *soap, const char *URL, ns1__authenticateByCallerPrincipalResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByCallerPrincipalResponse", p->soap_type() == SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__authenticateByCallerPrincipalResponse(struct soap *soap, const char *URL, ns1__authenticateByCallerPrincipalResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByCallerPrincipalResponse", p->soap_type() == SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__authenticateByCallerPrincipalResponse * SOAP_FMAC4 soap_get_ns1__authenticateByCallerPrincipalResponse(struct soap*, ns1__authenticateByCallerPrincipalResponse *, const char*, const char*);

inline int soap_read_ns1__authenticateByCallerPrincipalResponse(struct soap *soap, ns1__authenticateByCallerPrincipalResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__authenticateByCallerPrincipalResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__authenticateByCallerPrincipalResponse(struct soap *soap, const char *URL, ns1__authenticateByCallerPrincipalResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__authenticateByCallerPrincipalResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__authenticateByCallerPrincipalResponse(struct soap *soap, ns1__authenticateByCallerPrincipalResponse *p)
{
	if (::soap_read_ns1__authenticateByCallerPrincipalResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__authenticateByCallerPrincipal_DEFINED
#define SOAP_TYPE_ns1__authenticateByCallerPrincipal_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByCallerPrincipal(struct soap*, const char*, int, const ns1__authenticateByCallerPrincipal *, const char*);
SOAP_FMAC3 ns1__authenticateByCallerPrincipal * SOAP_FMAC4 soap_in_ns1__authenticateByCallerPrincipal(struct soap*, const char*, ns1__authenticateByCallerPrincipal *, const char*);
SOAP_FMAC1 ns1__authenticateByCallerPrincipal * SOAP_FMAC2 soap_instantiate_ns1__authenticateByCallerPrincipal(struct soap*, int, const char*, const char*, size_t*);

inline ns1__authenticateByCallerPrincipal * soap_new_ns1__authenticateByCallerPrincipal(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__authenticateByCallerPrincipal(soap, n, NULL, NULL, NULL);
}

inline ns1__authenticateByCallerPrincipal * soap_new_req_ns1__authenticateByCallerPrincipal(
	struct soap *soap)
{
	ns1__authenticateByCallerPrincipal *_p = ::soap_new_ns1__authenticateByCallerPrincipal(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__authenticateByCallerPrincipal * soap_new_set_ns1__authenticateByCallerPrincipal(
	struct soap *soap,
	char *__item__1)
{
	ns1__authenticateByCallerPrincipal *_p = ::soap_new_ns1__authenticateByCallerPrincipal(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__authenticateByCallerPrincipal(struct soap *soap, ns1__authenticateByCallerPrincipal const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByCallerPrincipal", p->soap_type() == SOAP_TYPE_ns1__authenticateByCallerPrincipal ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__authenticateByCallerPrincipal(struct soap *soap, const char *URL, ns1__authenticateByCallerPrincipal const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByCallerPrincipal", p->soap_type() == SOAP_TYPE_ns1__authenticateByCallerPrincipal ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__authenticateByCallerPrincipal(struct soap *soap, const char *URL, ns1__authenticateByCallerPrincipal const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:authenticateByCallerPrincipal", p->soap_type() == SOAP_TYPE_ns1__authenticateByCallerPrincipal ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__authenticateByCallerPrincipal * SOAP_FMAC4 soap_get_ns1__authenticateByCallerPrincipal(struct soap*, ns1__authenticateByCallerPrincipal *, const char*, const char*);

inline int soap_read_ns1__authenticateByCallerPrincipal(struct soap *soap, ns1__authenticateByCallerPrincipal *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__authenticateByCallerPrincipal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__authenticateByCallerPrincipal(struct soap *soap, const char *URL, ns1__authenticateByCallerPrincipal *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__authenticateByCallerPrincipal(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__authenticateByCallerPrincipal(struct soap *soap, ns1__authenticateByCallerPrincipal *p)
{
	if (::soap_read_ns1__authenticateByCallerPrincipal(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__string_DEFINED
#define SOAP_TYPE_xsd__string_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const xsd__string *, const char*);
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, xsd__string *, const char*);
SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);

inline xsd__string * soap_new_xsd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL);
}

inline xsd__string * soap_new_req_xsd__string(
	struct soap *soap)
{
	xsd__string *_p = ::soap_new_xsd__string(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__string * soap_new_set_xsd__string(
	struct soap *soap,
	wchar_t *__item,
	char *__item__1)
{
	xsd__string *_p = ::soap_new_xsd__string(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__string::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__string(struct soap *soap, xsd__string const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:string", p->soap_type() == SOAP_TYPE_xsd__string ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__string(struct soap *soap, const char *URL, xsd__string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:string", p->soap_type() == SOAP_TYPE_xsd__string ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__string(struct soap *soap, const char *URL, xsd__string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:string", p->soap_type() == SOAP_TYPE_xsd__string ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, xsd__string *, const char*, const char*);

inline int soap_read_xsd__string(struct soap *soap, xsd__string *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__string(struct soap *soap, const char *URL, xsd__string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__string(struct soap *soap, xsd__string *p)
{
	if (::soap_read_xsd__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__long_DEFINED
#define SOAP_TYPE_xsd__long_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap*, const char*, int, const xsd__long *, const char*);
SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap*, const char*, xsd__long *, const char*);
SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap*, int, const char*, const char*, size_t*);

inline xsd__long * soap_new_xsd__long(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__long(soap, n, NULL, NULL, NULL);
}

inline xsd__long * soap_new_req_xsd__long(
	struct soap *soap,
	LONG64 __item)
{
	xsd__long *_p = ::soap_new_xsd__long(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__long::__item = __item;
	}
	return _p;
}

inline xsd__long * soap_new_set_xsd__long(
	struct soap *soap,
	LONG64 __item,
	char *__item__1)
{
	xsd__long *_p = ::soap_new_xsd__long(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__long::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__long(struct soap *soap, xsd__long const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:long", p->soap_type() == SOAP_TYPE_xsd__long ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__long(struct soap *soap, const char *URL, xsd__long const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:long", p->soap_type() == SOAP_TYPE_xsd__long ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__long(struct soap *soap, const char *URL, xsd__long const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:long", p->soap_type() == SOAP_TYPE_xsd__long ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap*, xsd__long *, const char*, const char*);

inline int soap_read_xsd__long(struct soap *soap, xsd__long *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__long(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__long(struct soap *soap, const char *URL, xsd__long *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__long(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__long(struct soap *soap, xsd__long *p)
{
	if (::soap_read_xsd__long(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__int_DEFINED
#define SOAP_TYPE_xsd__int_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const xsd__int *, const char*);
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, xsd__int *, const char*);
SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap*, int, const char*, const char*, size_t*);

inline xsd__int * soap_new_xsd__int(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL);
}

inline xsd__int * soap_new_req_xsd__int(
	struct soap *soap,
	int __item)
{
	xsd__int *_p = ::soap_new_xsd__int(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__int::__item = __item;
	}
	return _p;
}

inline xsd__int * soap_new_set_xsd__int(
	struct soap *soap,
	int __item,
	char *__item__1)
{
	xsd__int *_p = ::soap_new_xsd__int(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__int::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__int(struct soap *soap, xsd__int const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:int", p->soap_type() == SOAP_TYPE_xsd__int ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__int(struct soap *soap, const char *URL, xsd__int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:int", p->soap_type() == SOAP_TYPE_xsd__int ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__int(struct soap *soap, const char *URL, xsd__int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:int", p->soap_type() == SOAP_TYPE_xsd__int ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, xsd__int *, const char*, const char*);

inline int soap_read_xsd__int(struct soap *soap, xsd__int *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__int(struct soap *soap, const char *URL, xsd__int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__int(struct soap *soap, xsd__int *p)
{
	if (::soap_read_xsd__int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__dateTime_DEFINED
#define SOAP_TYPE_xsd__dateTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, const xsd__dateTime *, const char*);
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, xsd__dateTime *, const char*);
SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline xsd__dateTime * soap_new_xsd__dateTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL);
}

inline xsd__dateTime * soap_new_req_xsd__dateTime(
	struct soap *soap,
	time_t __item)
{
	xsd__dateTime *_p = ::soap_new_xsd__dateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__dateTime::__item = __item;
	}
	return _p;
}

inline xsd__dateTime * soap_new_set_xsd__dateTime(
	struct soap *soap,
	time_t __item,
	char *__item__1)
{
	xsd__dateTime *_p = ::soap_new_xsd__dateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__dateTime::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__dateTime(struct soap *soap, xsd__dateTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:dateTime", p->soap_type() == SOAP_TYPE_xsd__dateTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__dateTime(struct soap *soap, const char *URL, xsd__dateTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:dateTime", p->soap_type() == SOAP_TYPE_xsd__dateTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__dateTime(struct soap *soap, const char *URL, xsd__dateTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:dateTime", p->soap_type() == SOAP_TYPE_xsd__dateTime ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, xsd__dateTime *, const char*, const char*);

inline int soap_read_xsd__dateTime(struct soap *soap, xsd__dateTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__dateTime(struct soap *soap, const char *URL, xsd__dateTime *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__dateTime(struct soap *soap, xsd__dateTime *p)
{
	if (::soap_read_xsd__dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__boolean_DEFINED
#define SOAP_TYPE_xsd__boolean_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const xsd__boolean *, const char*);
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, xsd__boolean *, const char*);
SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap*, int, const char*, const char*, size_t*);

inline xsd__boolean * soap_new_xsd__boolean(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, NULL);
}

inline xsd__boolean * soap_new_req_xsd__boolean(
	struct soap *soap,
	bool __item)
{
	xsd__boolean *_p = ::soap_new_xsd__boolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__boolean::__item = __item;
	}
	return _p;
}

inline xsd__boolean * soap_new_set_xsd__boolean(
	struct soap *soap,
	bool __item,
	char *__item__1)
{
	xsd__boolean *_p = ::soap_new_xsd__boolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__boolean::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__boolean(struct soap *soap, xsd__boolean const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:boolean", p->soap_type() == SOAP_TYPE_xsd__boolean ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__boolean(struct soap *soap, const char *URL, xsd__boolean const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:boolean", p->soap_type() == SOAP_TYPE_xsd__boolean ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__boolean(struct soap *soap, const char *URL, xsd__boolean const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:boolean", p->soap_type() == SOAP_TYPE_xsd__boolean ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, xsd__boolean *, const char*, const char*);

inline int soap_read_xsd__boolean(struct soap *soap, xsd__boolean *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__boolean(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__boolean(struct soap *soap, const char *URL, xsd__boolean *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__boolean(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__boolean(struct soap *soap, xsd__boolean *p)
{
	if (::soap_read_xsd__boolean(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary__DEFINED
#define SOAP_TYPE_xsd__base64Binary__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap*, const char*, int, const xsd__base64Binary_ *, const char*);
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap*, const char*, xsd__base64Binary_ *, const char*);
SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary_ * soap_new_xsd__base64Binary_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary_(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary_ * soap_new_req_xsd__base64Binary_(
	struct soap *soap,
	const xsd__base64Binary& __item)
{
	xsd__base64Binary_ *_p = ::soap_new_xsd__base64Binary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary_::__item = __item;
	}
	return _p;
}

inline xsd__base64Binary_ * soap_new_set_xsd__base64Binary_(
	struct soap *soap,
	const xsd__base64Binary& __item,
	char *__item__1)
{
	xsd__base64Binary_ *_p = ::soap_new_xsd__base64Binary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary_(struct soap *soap, const char *URL, xsd__base64Binary_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary_(struct soap *soap, const char *URL, xsd__base64Binary_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap*, xsd__base64Binary_ *, const char*, const char*);

inline int soap_read_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__base64Binary_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary_(struct soap *soap, const char *URL, xsd__base64Binary_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__base64Binary_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p)
{
	if (::soap_read_xsd__base64Binary_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__base64Binary(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (::soap_read_xsd__base64Binary(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyType_DEFINED
#define SOAP_TYPE_xsd__anyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);
SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

inline xsd__anyType * soap_new_req_xsd__anyType(
	struct soap *soap)
{
	xsd__anyType *_p = ::soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__anyType * soap_new_set_xsd__anyType(
	struct soap *soap,
	char *__item)
{
	xsd__anyType *_p = ::soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__anyType(struct soap *soap, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

inline int soap_read_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (::soap_read_xsd__anyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__reassignTasks_DEFINED
#define SOAP_TYPE___ns1__reassignTasks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__reassignTasks(struct soap*, struct __ns1__reassignTasks *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__reassignTasks(struct soap*, const struct __ns1__reassignTasks *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__reassignTasks(struct soap*, const char*, int, const struct __ns1__reassignTasks *, const char*);
SOAP_FMAC3 struct __ns1__reassignTasks * SOAP_FMAC4 soap_in___ns1__reassignTasks(struct soap*, const char*, struct __ns1__reassignTasks *, const char*);
SOAP_FMAC1 struct __ns1__reassignTasks * SOAP_FMAC2 soap_instantiate___ns1__reassignTasks(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__reassignTasks * soap_new___ns1__reassignTasks(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__reassignTasks(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__reassignTasks * soap_new_req___ns1__reassignTasks(
	struct soap *soap)
{
	struct __ns1__reassignTasks *_p = ::soap_new___ns1__reassignTasks(soap);
	if (_p)
	{	::soap_default___ns1__reassignTasks(soap, _p);
	}
	return _p;
}

inline struct __ns1__reassignTasks * soap_new_set___ns1__reassignTasks(
	struct soap *soap,
	ns1__reassignTasks *ns1__reassignTasks_)
{
	struct __ns1__reassignTasks *_p = ::soap_new___ns1__reassignTasks(soap);
	if (_p)
	{	::soap_default___ns1__reassignTasks(soap, _p);
		_p->ns1__reassignTasks_ = ns1__reassignTasks_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__reassignTasks(struct soap*, const struct __ns1__reassignTasks *, const char*, const char*);

inline int soap_write___ns1__reassignTasks(struct soap *soap, struct __ns1__reassignTasks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__reassignTasks(soap, p), 0) || ::soap_put___ns1__reassignTasks(soap, p, "-ns1:reassignTasks", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__reassignTasks(struct soap *soap, const char *URL, struct __ns1__reassignTasks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__reassignTasks(soap, p), 0) || ::soap_put___ns1__reassignTasks(soap, p, "-ns1:reassignTasks", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__reassignTasks(struct soap *soap, const char *URL, struct __ns1__reassignTasks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__reassignTasks(soap, p), 0) || ::soap_put___ns1__reassignTasks(soap, p, "-ns1:reassignTasks", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__reassignTasks * SOAP_FMAC4 soap_get___ns1__reassignTasks(struct soap*, struct __ns1__reassignTasks *, const char*, const char*);

inline int soap_read___ns1__reassignTasks(struct soap *soap, struct __ns1__reassignTasks *p)
{
	if (p)
	{	::soap_default___ns1__reassignTasks(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__reassignTasks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__reassignTasks(struct soap *soap, const char *URL, struct __ns1__reassignTasks *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__reassignTasks(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__reassignTasks(struct soap *soap, struct __ns1__reassignTasks *p)
{
	if (::soap_read___ns1__reassignTasks(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getTask_DEFINED
#define SOAP_TYPE___ns1__getTask_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getTask(struct soap*, struct __ns1__getTask *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getTask(struct soap*, const struct __ns1__getTask *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getTask(struct soap*, const char*, int, const struct __ns1__getTask *, const char*);
SOAP_FMAC3 struct __ns1__getTask * SOAP_FMAC4 soap_in___ns1__getTask(struct soap*, const char*, struct __ns1__getTask *, const char*);
SOAP_FMAC1 struct __ns1__getTask * SOAP_FMAC2 soap_instantiate___ns1__getTask(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getTask * soap_new___ns1__getTask(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getTask(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getTask * soap_new_req___ns1__getTask(
	struct soap *soap)
{
	struct __ns1__getTask *_p = ::soap_new___ns1__getTask(soap);
	if (_p)
	{	::soap_default___ns1__getTask(soap, _p);
	}
	return _p;
}

inline struct __ns1__getTask * soap_new_set___ns1__getTask(
	struct soap *soap,
	ns1__getTask *ns1__getTask_)
{
	struct __ns1__getTask *_p = ::soap_new___ns1__getTask(soap);
	if (_p)
	{	::soap_default___ns1__getTask(soap, _p);
		_p->ns1__getTask_ = ns1__getTask_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getTask(struct soap*, const struct __ns1__getTask *, const char*, const char*);

inline int soap_write___ns1__getTask(struct soap *soap, struct __ns1__getTask const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getTask(soap, p), 0) || ::soap_put___ns1__getTask(soap, p, "-ns1:getTask", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getTask(struct soap *soap, const char *URL, struct __ns1__getTask const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getTask(soap, p), 0) || ::soap_put___ns1__getTask(soap, p, "-ns1:getTask", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getTask(struct soap *soap, const char *URL, struct __ns1__getTask const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getTask(soap, p), 0) || ::soap_put___ns1__getTask(soap, p, "-ns1:getTask", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getTask * SOAP_FMAC4 soap_get___ns1__getTask(struct soap*, struct __ns1__getTask *, const char*, const char*);

inline int soap_read___ns1__getTask(struct soap *soap, struct __ns1__getTask *p)
{
	if (p)
	{	::soap_default___ns1__getTask(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getTask(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getTask(struct soap *soap, const char *URL, struct __ns1__getTask *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getTask(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getTask(struct soap *soap, struct __ns1__getTask *p)
{
	if (::soap_read___ns1__getTask(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getProcessTasks_DEFINED
#define SOAP_TYPE___ns1__getProcessTasks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getProcessTasks(struct soap*, struct __ns1__getProcessTasks *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getProcessTasks(struct soap*, const struct __ns1__getProcessTasks *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getProcessTasks(struct soap*, const char*, int, const struct __ns1__getProcessTasks *, const char*);
SOAP_FMAC3 struct __ns1__getProcessTasks * SOAP_FMAC4 soap_in___ns1__getProcessTasks(struct soap*, const char*, struct __ns1__getProcessTasks *, const char*);
SOAP_FMAC1 struct __ns1__getProcessTasks * SOAP_FMAC2 soap_instantiate___ns1__getProcessTasks(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getProcessTasks * soap_new___ns1__getProcessTasks(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getProcessTasks(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getProcessTasks * soap_new_req___ns1__getProcessTasks(
	struct soap *soap)
{
	struct __ns1__getProcessTasks *_p = ::soap_new___ns1__getProcessTasks(soap);
	if (_p)
	{	::soap_default___ns1__getProcessTasks(soap, _p);
	}
	return _p;
}

inline struct __ns1__getProcessTasks * soap_new_set___ns1__getProcessTasks(
	struct soap *soap,
	ns1__getProcessTasks *ns1__getProcessTasks_)
{
	struct __ns1__getProcessTasks *_p = ::soap_new___ns1__getProcessTasks(soap);
	if (_p)
	{	::soap_default___ns1__getProcessTasks(soap, _p);
		_p->ns1__getProcessTasks_ = ns1__getProcessTasks_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getProcessTasks(struct soap*, const struct __ns1__getProcessTasks *, const char*, const char*);

inline int soap_write___ns1__getProcessTasks(struct soap *soap, struct __ns1__getProcessTasks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getProcessTasks(soap, p), 0) || ::soap_put___ns1__getProcessTasks(soap, p, "-ns1:getProcessTasks", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getProcessTasks(struct soap *soap, const char *URL, struct __ns1__getProcessTasks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getProcessTasks(soap, p), 0) || ::soap_put___ns1__getProcessTasks(soap, p, "-ns1:getProcessTasks", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getProcessTasks(struct soap *soap, const char *URL, struct __ns1__getProcessTasks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getProcessTasks(soap, p), 0) || ::soap_put___ns1__getProcessTasks(soap, p, "-ns1:getProcessTasks", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getProcessTasks * SOAP_FMAC4 soap_get___ns1__getProcessTasks(struct soap*, struct __ns1__getProcessTasks *, const char*, const char*);

inline int soap_read___ns1__getProcessTasks(struct soap *soap, struct __ns1__getProcessTasks *p)
{
	if (p)
	{	::soap_default___ns1__getProcessTasks(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getProcessTasks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getProcessTasks(struct soap *soap, const char *URL, struct __ns1__getProcessTasks *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getProcessTasks(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getProcessTasks(struct soap *soap, struct __ns1__getProcessTasks *p)
{
	if (::soap_read___ns1__getProcessTasks(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__completeTaskWS_DEFINED
#define SOAP_TYPE___ns1__completeTaskWS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__completeTaskWS(struct soap*, struct __ns1__completeTaskWS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__completeTaskWS(struct soap*, const struct __ns1__completeTaskWS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__completeTaskWS(struct soap*, const char*, int, const struct __ns1__completeTaskWS *, const char*);
SOAP_FMAC3 struct __ns1__completeTaskWS * SOAP_FMAC4 soap_in___ns1__completeTaskWS(struct soap*, const char*, struct __ns1__completeTaskWS *, const char*);
SOAP_FMAC1 struct __ns1__completeTaskWS * SOAP_FMAC2 soap_instantiate___ns1__completeTaskWS(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__completeTaskWS * soap_new___ns1__completeTaskWS(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__completeTaskWS(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__completeTaskWS * soap_new_req___ns1__completeTaskWS(
	struct soap *soap)
{
	struct __ns1__completeTaskWS *_p = ::soap_new___ns1__completeTaskWS(soap);
	if (_p)
	{	::soap_default___ns1__completeTaskWS(soap, _p);
	}
	return _p;
}

inline struct __ns1__completeTaskWS * soap_new_set___ns1__completeTaskWS(
	struct soap *soap,
	ns1__completeTaskWS *ns1__completeTaskWS_)
{
	struct __ns1__completeTaskWS *_p = ::soap_new___ns1__completeTaskWS(soap);
	if (_p)
	{	::soap_default___ns1__completeTaskWS(soap, _p);
		_p->ns1__completeTaskWS_ = ns1__completeTaskWS_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__completeTaskWS(struct soap*, const struct __ns1__completeTaskWS *, const char*, const char*);

inline int soap_write___ns1__completeTaskWS(struct soap *soap, struct __ns1__completeTaskWS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__completeTaskWS(soap, p), 0) || ::soap_put___ns1__completeTaskWS(soap, p, "-ns1:completeTaskWS", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__completeTaskWS(struct soap *soap, const char *URL, struct __ns1__completeTaskWS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__completeTaskWS(soap, p), 0) || ::soap_put___ns1__completeTaskWS(soap, p, "-ns1:completeTaskWS", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__completeTaskWS(struct soap *soap, const char *URL, struct __ns1__completeTaskWS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__completeTaskWS(soap, p), 0) || ::soap_put___ns1__completeTaskWS(soap, p, "-ns1:completeTaskWS", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__completeTaskWS * SOAP_FMAC4 soap_get___ns1__completeTaskWS(struct soap*, struct __ns1__completeTaskWS *, const char*, const char*);

inline int soap_read___ns1__completeTaskWS(struct soap *soap, struct __ns1__completeTaskWS *p)
{
	if (p)
	{	::soap_default___ns1__completeTaskWS(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__completeTaskWS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__completeTaskWS(struct soap *soap, const char *URL, struct __ns1__completeTaskWS *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__completeTaskWS(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__completeTaskWS(struct soap *soap, struct __ns1__completeTaskWS *p)
{
	if (::soap_read___ns1__completeTaskWS(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__completeTaskWSResponse_DEFINED
#define SOAP_TYPE___ns1__completeTaskWSResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__completeTaskWSResponse(struct soap*, struct __ns1__completeTaskWSResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__completeTaskWSResponse(struct soap*, const struct __ns1__completeTaskWSResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__completeTaskWSResponse(struct soap*, const char*, int, const struct __ns1__completeTaskWSResponse *, const char*);
SOAP_FMAC3 struct __ns1__completeTaskWSResponse * SOAP_FMAC4 soap_in___ns1__completeTaskWSResponse(struct soap*, const char*, struct __ns1__completeTaskWSResponse *, const char*);
SOAP_FMAC1 struct __ns1__completeTaskWSResponse * SOAP_FMAC2 soap_instantiate___ns1__completeTaskWSResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__completeTaskWSResponse * soap_new___ns1__completeTaskWSResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__completeTaskWSResponse(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__completeTaskWSResponse * soap_new_req___ns1__completeTaskWSResponse(
	struct soap *soap,
	const ns1__completeTaskWSResponse& ns1__completeTaskWSResponse_)
{
	struct __ns1__completeTaskWSResponse *_p = ::soap_new___ns1__completeTaskWSResponse(soap);
	if (_p)
	{	::soap_default___ns1__completeTaskWSResponse(soap, _p);
		_p->ns1__completeTaskWSResponse_ = ns1__completeTaskWSResponse_;
	}
	return _p;
}

inline struct __ns1__completeTaskWSResponse * soap_new_set___ns1__completeTaskWSResponse(
	struct soap *soap,
	const ns1__completeTaskWSResponse& ns1__completeTaskWSResponse_)
{
	struct __ns1__completeTaskWSResponse *_p = ::soap_new___ns1__completeTaskWSResponse(soap);
	if (_p)
	{	::soap_default___ns1__completeTaskWSResponse(soap, _p);
		_p->ns1__completeTaskWSResponse_ = ns1__completeTaskWSResponse_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__completeTaskWSResponse(struct soap*, const struct __ns1__completeTaskWSResponse *, const char*, const char*);

inline int soap_write___ns1__completeTaskWSResponse(struct soap *soap, struct __ns1__completeTaskWSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__completeTaskWSResponse(soap, p), 0) || ::soap_put___ns1__completeTaskWSResponse(soap, p, "-ns1:completeTaskWSResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__completeTaskWSResponse(struct soap *soap, const char *URL, struct __ns1__completeTaskWSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__completeTaskWSResponse(soap, p), 0) || ::soap_put___ns1__completeTaskWSResponse(soap, p, "-ns1:completeTaskWSResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__completeTaskWSResponse(struct soap *soap, const char *URL, struct __ns1__completeTaskWSResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__completeTaskWSResponse(soap, p), 0) || ::soap_put___ns1__completeTaskWSResponse(soap, p, "-ns1:completeTaskWSResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__completeTaskWSResponse * SOAP_FMAC4 soap_get___ns1__completeTaskWSResponse(struct soap*, struct __ns1__completeTaskWSResponse *, const char*, const char*);

inline int soap_read___ns1__completeTaskWSResponse(struct soap *soap, struct __ns1__completeTaskWSResponse *p)
{
	if (p)
	{	::soap_default___ns1__completeTaskWSResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__completeTaskWSResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__completeTaskWSResponse(struct soap *soap, const char *URL, struct __ns1__completeTaskWSResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__completeTaskWSResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__completeTaskWSResponse(struct soap *soap, struct __ns1__completeTaskWSResponse *p)
{
	if (::soap_read___ns1__completeTaskWSResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getTasks_DEFINED
#define SOAP_TYPE___ns1__getTasks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getTasks(struct soap*, struct __ns1__getTasks *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getTasks(struct soap*, const struct __ns1__getTasks *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getTasks(struct soap*, const char*, int, const struct __ns1__getTasks *, const char*);
SOAP_FMAC3 struct __ns1__getTasks * SOAP_FMAC4 soap_in___ns1__getTasks(struct soap*, const char*, struct __ns1__getTasks *, const char*);
SOAP_FMAC1 struct __ns1__getTasks * SOAP_FMAC2 soap_instantiate___ns1__getTasks(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getTasks * soap_new___ns1__getTasks(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getTasks(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getTasks * soap_new_req___ns1__getTasks(
	struct soap *soap)
{
	struct __ns1__getTasks *_p = ::soap_new___ns1__getTasks(soap);
	if (_p)
	{	::soap_default___ns1__getTasks(soap, _p);
	}
	return _p;
}

inline struct __ns1__getTasks * soap_new_set___ns1__getTasks(
	struct soap *soap,
	ns1__getTasks *ns1__getTasks_)
{
	struct __ns1__getTasks *_p = ::soap_new___ns1__getTasks(soap);
	if (_p)
	{	::soap_default___ns1__getTasks(soap, _p);
		_p->ns1__getTasks_ = ns1__getTasks_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getTasks(struct soap*, const struct __ns1__getTasks *, const char*, const char*);

inline int soap_write___ns1__getTasks(struct soap *soap, struct __ns1__getTasks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getTasks(soap, p), 0) || ::soap_put___ns1__getTasks(soap, p, "-ns1:getTasks", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getTasks(struct soap *soap, const char *URL, struct __ns1__getTasks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getTasks(soap, p), 0) || ::soap_put___ns1__getTasks(soap, p, "-ns1:getTasks", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getTasks(struct soap *soap, const char *URL, struct __ns1__getTasks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getTasks(soap, p), 0) || ::soap_put___ns1__getTasks(soap, p, "-ns1:getTasks", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getTasks * SOAP_FMAC4 soap_get___ns1__getTasks(struct soap*, struct __ns1__getTasks *, const char*, const char*);

inline int soap_read___ns1__getTasks(struct soap *soap, struct __ns1__getTasks *p)
{
	if (p)
	{	::soap_default___ns1__getTasks(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getTasks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getTasks(struct soap *soap, const char *URL, struct __ns1__getTasks *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getTasks(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getTasks(struct soap *soap, struct __ns1__getTasks *p)
{
	if (::soap_read___ns1__getTasks(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__assignTask_DEFINED
#define SOAP_TYPE___ns1__assignTask_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__assignTask(struct soap*, struct __ns1__assignTask *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__assignTask(struct soap*, const struct __ns1__assignTask *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__assignTask(struct soap*, const char*, int, const struct __ns1__assignTask *, const char*);
SOAP_FMAC3 struct __ns1__assignTask * SOAP_FMAC4 soap_in___ns1__assignTask(struct soap*, const char*, struct __ns1__assignTask *, const char*);
SOAP_FMAC1 struct __ns1__assignTask * SOAP_FMAC2 soap_instantiate___ns1__assignTask(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__assignTask * soap_new___ns1__assignTask(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__assignTask(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__assignTask * soap_new_req___ns1__assignTask(
	struct soap *soap)
{
	struct __ns1__assignTask *_p = ::soap_new___ns1__assignTask(soap);
	if (_p)
	{	::soap_default___ns1__assignTask(soap, _p);
	}
	return _p;
}

inline struct __ns1__assignTask * soap_new_set___ns1__assignTask(
	struct soap *soap,
	ns1__assignTask *ns1__assignTask_)
{
	struct __ns1__assignTask *_p = ::soap_new___ns1__assignTask(soap);
	if (_p)
	{	::soap_default___ns1__assignTask(soap, _p);
		_p->ns1__assignTask_ = ns1__assignTask_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__assignTask(struct soap*, const struct __ns1__assignTask *, const char*, const char*);

inline int soap_write___ns1__assignTask(struct soap *soap, struct __ns1__assignTask const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__assignTask(soap, p), 0) || ::soap_put___ns1__assignTask(soap, p, "-ns1:assignTask", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__assignTask(struct soap *soap, const char *URL, struct __ns1__assignTask const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__assignTask(soap, p), 0) || ::soap_put___ns1__assignTask(soap, p, "-ns1:assignTask", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__assignTask(struct soap *soap, const char *URL, struct __ns1__assignTask const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__assignTask(soap, p), 0) || ::soap_put___ns1__assignTask(soap, p, "-ns1:assignTask", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__assignTask * SOAP_FMAC4 soap_get___ns1__assignTask(struct soap*, struct __ns1__assignTask *, const char*, const char*);

inline int soap_read___ns1__assignTask(struct soap *soap, struct __ns1__assignTask *p)
{
	if (p)
	{	::soap_default___ns1__assignTask(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__assignTask(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__assignTask(struct soap *soap, const char *URL, struct __ns1__assignTask *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__assignTask(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__assignTask(struct soap *soap, struct __ns1__assignTask *p)
{
	if (::soap_read___ns1__assignTask(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__assignTaskResponse_DEFINED
#define SOAP_TYPE___ns1__assignTaskResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__assignTaskResponse(struct soap*, struct __ns1__assignTaskResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__assignTaskResponse(struct soap*, const struct __ns1__assignTaskResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__assignTaskResponse(struct soap*, const char*, int, const struct __ns1__assignTaskResponse *, const char*);
SOAP_FMAC3 struct __ns1__assignTaskResponse * SOAP_FMAC4 soap_in___ns1__assignTaskResponse(struct soap*, const char*, struct __ns1__assignTaskResponse *, const char*);
SOAP_FMAC1 struct __ns1__assignTaskResponse * SOAP_FMAC2 soap_instantiate___ns1__assignTaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__assignTaskResponse * soap_new___ns1__assignTaskResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__assignTaskResponse(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__assignTaskResponse * soap_new_req___ns1__assignTaskResponse(
	struct soap *soap,
	const ns1__assignTaskResponse& ns1__assignTaskResponse_)
{
	struct __ns1__assignTaskResponse *_p = ::soap_new___ns1__assignTaskResponse(soap);
	if (_p)
	{	::soap_default___ns1__assignTaskResponse(soap, _p);
		_p->ns1__assignTaskResponse_ = ns1__assignTaskResponse_;
	}
	return _p;
}

inline struct __ns1__assignTaskResponse * soap_new_set___ns1__assignTaskResponse(
	struct soap *soap,
	const ns1__assignTaskResponse& ns1__assignTaskResponse_)
{
	struct __ns1__assignTaskResponse *_p = ::soap_new___ns1__assignTaskResponse(soap);
	if (_p)
	{	::soap_default___ns1__assignTaskResponse(soap, _p);
		_p->ns1__assignTaskResponse_ = ns1__assignTaskResponse_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__assignTaskResponse(struct soap*, const struct __ns1__assignTaskResponse *, const char*, const char*);

inline int soap_write___ns1__assignTaskResponse(struct soap *soap, struct __ns1__assignTaskResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__assignTaskResponse(soap, p), 0) || ::soap_put___ns1__assignTaskResponse(soap, p, "-ns1:assignTaskResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__assignTaskResponse(struct soap *soap, const char *URL, struct __ns1__assignTaskResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__assignTaskResponse(soap, p), 0) || ::soap_put___ns1__assignTaskResponse(soap, p, "-ns1:assignTaskResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__assignTaskResponse(struct soap *soap, const char *URL, struct __ns1__assignTaskResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__assignTaskResponse(soap, p), 0) || ::soap_put___ns1__assignTaskResponse(soap, p, "-ns1:assignTaskResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__assignTaskResponse * SOAP_FMAC4 soap_get___ns1__assignTaskResponse(struct soap*, struct __ns1__assignTaskResponse *, const char*, const char*);

inline int soap_read___ns1__assignTaskResponse(struct soap *soap, struct __ns1__assignTaskResponse *p)
{
	if (p)
	{	::soap_default___ns1__assignTaskResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__assignTaskResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__assignTaskResponse(struct soap *soap, const char *URL, struct __ns1__assignTaskResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__assignTaskResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__assignTaskResponse(struct soap *soap, struct __ns1__assignTaskResponse *p)
{
	if (::soap_read___ns1__assignTaskResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__markTaskOpened_DEFINED
#define SOAP_TYPE___ns1__markTaskOpened_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__markTaskOpened(struct soap*, struct __ns1__markTaskOpened *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__markTaskOpened(struct soap*, const struct __ns1__markTaskOpened *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__markTaskOpened(struct soap*, const char*, int, const struct __ns1__markTaskOpened *, const char*);
SOAP_FMAC3 struct __ns1__markTaskOpened * SOAP_FMAC4 soap_in___ns1__markTaskOpened(struct soap*, const char*, struct __ns1__markTaskOpened *, const char*);
SOAP_FMAC1 struct __ns1__markTaskOpened * SOAP_FMAC2 soap_instantiate___ns1__markTaskOpened(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__markTaskOpened * soap_new___ns1__markTaskOpened(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__markTaskOpened(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__markTaskOpened * soap_new_req___ns1__markTaskOpened(
	struct soap *soap)
{
	struct __ns1__markTaskOpened *_p = ::soap_new___ns1__markTaskOpened(soap);
	if (_p)
	{	::soap_default___ns1__markTaskOpened(soap, _p);
	}
	return _p;
}

inline struct __ns1__markTaskOpened * soap_new_set___ns1__markTaskOpened(
	struct soap *soap,
	ns1__markTaskOpened *ns1__markTaskOpened_)
{
	struct __ns1__markTaskOpened *_p = ::soap_new___ns1__markTaskOpened(soap);
	if (_p)
	{	::soap_default___ns1__markTaskOpened(soap, _p);
		_p->ns1__markTaskOpened_ = ns1__markTaskOpened_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__markTaskOpened(struct soap*, const struct __ns1__markTaskOpened *, const char*, const char*);

inline int soap_write___ns1__markTaskOpened(struct soap *soap, struct __ns1__markTaskOpened const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__markTaskOpened(soap, p), 0) || ::soap_put___ns1__markTaskOpened(soap, p, "-ns1:markTaskOpened", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__markTaskOpened(struct soap *soap, const char *URL, struct __ns1__markTaskOpened const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__markTaskOpened(soap, p), 0) || ::soap_put___ns1__markTaskOpened(soap, p, "-ns1:markTaskOpened", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__markTaskOpened(struct soap *soap, const char *URL, struct __ns1__markTaskOpened const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__markTaskOpened(soap, p), 0) || ::soap_put___ns1__markTaskOpened(soap, p, "-ns1:markTaskOpened", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__markTaskOpened * SOAP_FMAC4 soap_get___ns1__markTaskOpened(struct soap*, struct __ns1__markTaskOpened *, const char*, const char*);

inline int soap_read___ns1__markTaskOpened(struct soap *soap, struct __ns1__markTaskOpened *p)
{
	if (p)
	{	::soap_default___ns1__markTaskOpened(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__markTaskOpened(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__markTaskOpened(struct soap *soap, const char *URL, struct __ns1__markTaskOpened *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__markTaskOpened(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__markTaskOpened(struct soap *soap, struct __ns1__markTaskOpened *p)
{
	if (::soap_read___ns1__markTaskOpened(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__markTaskOpenedResponse_DEFINED
#define SOAP_TYPE___ns1__markTaskOpenedResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__markTaskOpenedResponse(struct soap*, struct __ns1__markTaskOpenedResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__markTaskOpenedResponse(struct soap*, const struct __ns1__markTaskOpenedResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__markTaskOpenedResponse(struct soap*, const char*, int, const struct __ns1__markTaskOpenedResponse *, const char*);
SOAP_FMAC3 struct __ns1__markTaskOpenedResponse * SOAP_FMAC4 soap_in___ns1__markTaskOpenedResponse(struct soap*, const char*, struct __ns1__markTaskOpenedResponse *, const char*);
SOAP_FMAC1 struct __ns1__markTaskOpenedResponse * SOAP_FMAC2 soap_instantiate___ns1__markTaskOpenedResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__markTaskOpenedResponse * soap_new___ns1__markTaskOpenedResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__markTaskOpenedResponse(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__markTaskOpenedResponse * soap_new_req___ns1__markTaskOpenedResponse(
	struct soap *soap,
	const ns1__markTaskOpenedResponse& ns1__markTaskOpenedResponse_)
{
	struct __ns1__markTaskOpenedResponse *_p = ::soap_new___ns1__markTaskOpenedResponse(soap);
	if (_p)
	{	::soap_default___ns1__markTaskOpenedResponse(soap, _p);
		_p->ns1__markTaskOpenedResponse_ = ns1__markTaskOpenedResponse_;
	}
	return _p;
}

inline struct __ns1__markTaskOpenedResponse * soap_new_set___ns1__markTaskOpenedResponse(
	struct soap *soap,
	const ns1__markTaskOpenedResponse& ns1__markTaskOpenedResponse_)
{
	struct __ns1__markTaskOpenedResponse *_p = ::soap_new___ns1__markTaskOpenedResponse(soap);
	if (_p)
	{	::soap_default___ns1__markTaskOpenedResponse(soap, _p);
		_p->ns1__markTaskOpenedResponse_ = ns1__markTaskOpenedResponse_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__markTaskOpenedResponse(struct soap*, const struct __ns1__markTaskOpenedResponse *, const char*, const char*);

inline int soap_write___ns1__markTaskOpenedResponse(struct soap *soap, struct __ns1__markTaskOpenedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__markTaskOpenedResponse(soap, p), 0) || ::soap_put___ns1__markTaskOpenedResponse(soap, p, "-ns1:markTaskOpenedResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__markTaskOpenedResponse(struct soap *soap, const char *URL, struct __ns1__markTaskOpenedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__markTaskOpenedResponse(soap, p), 0) || ::soap_put___ns1__markTaskOpenedResponse(soap, p, "-ns1:markTaskOpenedResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__markTaskOpenedResponse(struct soap *soap, const char *URL, struct __ns1__markTaskOpenedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__markTaskOpenedResponse(soap, p), 0) || ::soap_put___ns1__markTaskOpenedResponse(soap, p, "-ns1:markTaskOpenedResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__markTaskOpenedResponse * SOAP_FMAC4 soap_get___ns1__markTaskOpenedResponse(struct soap*, struct __ns1__markTaskOpenedResponse *, const char*, const char*);

inline int soap_read___ns1__markTaskOpenedResponse(struct soap *soap, struct __ns1__markTaskOpenedResponse *p)
{
	if (p)
	{	::soap_default___ns1__markTaskOpenedResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__markTaskOpenedResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__markTaskOpenedResponse(struct soap *soap, const char *URL, struct __ns1__markTaskOpenedResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__markTaskOpenedResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__markTaskOpenedResponse(struct soap *soap, struct __ns1__markTaskOpenedResponse *p)
{
	if (::soap_read___ns1__markTaskOpenedResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getMyTasks_DEFINED
#define SOAP_TYPE___ns1__getMyTasks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMyTasks(struct soap*, struct __ns1__getMyTasks *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMyTasks(struct soap*, const struct __ns1__getMyTasks *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMyTasks(struct soap*, const char*, int, const struct __ns1__getMyTasks *, const char*);
SOAP_FMAC3 struct __ns1__getMyTasks * SOAP_FMAC4 soap_in___ns1__getMyTasks(struct soap*, const char*, struct __ns1__getMyTasks *, const char*);
SOAP_FMAC1 struct __ns1__getMyTasks * SOAP_FMAC2 soap_instantiate___ns1__getMyTasks(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getMyTasks * soap_new___ns1__getMyTasks(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getMyTasks(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getMyTasks * soap_new_req___ns1__getMyTasks(
	struct soap *soap)
{
	struct __ns1__getMyTasks *_p = ::soap_new___ns1__getMyTasks(soap);
	if (_p)
	{	::soap_default___ns1__getMyTasks(soap, _p);
	}
	return _p;
}

inline struct __ns1__getMyTasks * soap_new_set___ns1__getMyTasks(
	struct soap *soap,
	ns1__getMyTasks *ns1__getMyTasks_)
{
	struct __ns1__getMyTasks *_p = ::soap_new___ns1__getMyTasks(soap);
	if (_p)
	{	::soap_default___ns1__getMyTasks(soap, _p);
		_p->ns1__getMyTasks_ = ns1__getMyTasks_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMyTasks(struct soap*, const struct __ns1__getMyTasks *, const char*, const char*);

inline int soap_write___ns1__getMyTasks(struct soap *soap, struct __ns1__getMyTasks const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getMyTasks(soap, p), 0) || ::soap_put___ns1__getMyTasks(soap, p, "-ns1:getMyTasks", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getMyTasks(struct soap *soap, const char *URL, struct __ns1__getMyTasks const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getMyTasks(soap, p), 0) || ::soap_put___ns1__getMyTasks(soap, p, "-ns1:getMyTasks", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getMyTasks(struct soap *soap, const char *URL, struct __ns1__getMyTasks const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getMyTasks(soap, p), 0) || ::soap_put___ns1__getMyTasks(soap, p, "-ns1:getMyTasks", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getMyTasks * SOAP_FMAC4 soap_get___ns1__getMyTasks(struct soap*, struct __ns1__getMyTasks *, const char*, const char*);

inline int soap_read___ns1__getMyTasks(struct soap *soap, struct __ns1__getMyTasks *p)
{
	if (p)
	{	::soap_default___ns1__getMyTasks(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getMyTasks(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getMyTasks(struct soap *soap, const char *URL, struct __ns1__getMyTasks *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getMyTasks(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getMyTasks(struct soap *soap, struct __ns1__getMyTasks *p)
{
	if (::soap_read___ns1__getMyTasks(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__reassignTask_DEFINED
#define SOAP_TYPE___ns1__reassignTask_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__reassignTask(struct soap*, struct __ns1__reassignTask *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__reassignTask(struct soap*, const struct __ns1__reassignTask *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__reassignTask(struct soap*, const char*, int, const struct __ns1__reassignTask *, const char*);
SOAP_FMAC3 struct __ns1__reassignTask * SOAP_FMAC4 soap_in___ns1__reassignTask(struct soap*, const char*, struct __ns1__reassignTask *, const char*);
SOAP_FMAC1 struct __ns1__reassignTask * SOAP_FMAC2 soap_instantiate___ns1__reassignTask(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__reassignTask * soap_new___ns1__reassignTask(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__reassignTask(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__reassignTask * soap_new_req___ns1__reassignTask(
	struct soap *soap)
{
	struct __ns1__reassignTask *_p = ::soap_new___ns1__reassignTask(soap);
	if (_p)
	{	::soap_default___ns1__reassignTask(soap, _p);
	}
	return _p;
}

inline struct __ns1__reassignTask * soap_new_set___ns1__reassignTask(
	struct soap *soap,
	ns1__reassignTask *ns1__reassignTask_)
{
	struct __ns1__reassignTask *_p = ::soap_new___ns1__reassignTask(soap);
	if (_p)
	{	::soap_default___ns1__reassignTask(soap, _p);
		_p->ns1__reassignTask_ = ns1__reassignTask_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__reassignTask(struct soap*, const struct __ns1__reassignTask *, const char*, const char*);

inline int soap_write___ns1__reassignTask(struct soap *soap, struct __ns1__reassignTask const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__reassignTask(soap, p), 0) || ::soap_put___ns1__reassignTask(soap, p, "-ns1:reassignTask", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__reassignTask(struct soap *soap, const char *URL, struct __ns1__reassignTask const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__reassignTask(soap, p), 0) || ::soap_put___ns1__reassignTask(soap, p, "-ns1:reassignTask", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__reassignTask(struct soap *soap, const char *URL, struct __ns1__reassignTask const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__reassignTask(soap, p), 0) || ::soap_put___ns1__reassignTask(soap, p, "-ns1:reassignTask", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__reassignTask * SOAP_FMAC4 soap_get___ns1__reassignTask(struct soap*, struct __ns1__reassignTask *, const char*, const char*);

inline int soap_read___ns1__reassignTask(struct soap *soap, struct __ns1__reassignTask *p)
{
	if (p)
	{	::soap_default___ns1__reassignTask(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__reassignTask(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__reassignTask(struct soap *soap, const char *URL, struct __ns1__reassignTask *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__reassignTask(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__reassignTask(struct soap *soap, struct __ns1__reassignTask *p)
{
	if (::soap_read___ns1__reassignTask(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__authenticateByKerberos_DEFINED
#define SOAP_TYPE___ns1__authenticateByKerberos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__authenticateByKerberos(struct soap*, struct __ns1__authenticateByKerberos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__authenticateByKerberos(struct soap*, const struct __ns1__authenticateByKerberos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__authenticateByKerberos(struct soap*, const char*, int, const struct __ns1__authenticateByKerberos *, const char*);
SOAP_FMAC3 struct __ns1__authenticateByKerberos * SOAP_FMAC4 soap_in___ns1__authenticateByKerberos(struct soap*, const char*, struct __ns1__authenticateByKerberos *, const char*);
SOAP_FMAC1 struct __ns1__authenticateByKerberos * SOAP_FMAC2 soap_instantiate___ns1__authenticateByKerberos(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__authenticateByKerberos * soap_new___ns1__authenticateByKerberos(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__authenticateByKerberos(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__authenticateByKerberos * soap_new_req___ns1__authenticateByKerberos(
	struct soap *soap)
{
	struct __ns1__authenticateByKerberos *_p = ::soap_new___ns1__authenticateByKerberos(soap);
	if (_p)
	{	::soap_default___ns1__authenticateByKerberos(soap, _p);
	}
	return _p;
}

inline struct __ns1__authenticateByKerberos * soap_new_set___ns1__authenticateByKerberos(
	struct soap *soap,
	ns1__authenticateByKerberos *ns1__authenticateByKerberos_)
{
	struct __ns1__authenticateByKerberos *_p = ::soap_new___ns1__authenticateByKerberos(soap);
	if (_p)
	{	::soap_default___ns1__authenticateByKerberos(soap, _p);
		_p->ns1__authenticateByKerberos_ = ns1__authenticateByKerberos_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__authenticateByKerberos(struct soap*, const struct __ns1__authenticateByKerberos *, const char*, const char*);

inline int soap_write___ns1__authenticateByKerberos(struct soap *soap, struct __ns1__authenticateByKerberos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__authenticateByKerberos(soap, p), 0) || ::soap_put___ns1__authenticateByKerberos(soap, p, "-ns1:authenticateByKerberos", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__authenticateByKerberos(struct soap *soap, const char *URL, struct __ns1__authenticateByKerberos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__authenticateByKerberos(soap, p), 0) || ::soap_put___ns1__authenticateByKerberos(soap, p, "-ns1:authenticateByKerberos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__authenticateByKerberos(struct soap *soap, const char *URL, struct __ns1__authenticateByKerberos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__authenticateByKerberos(soap, p), 0) || ::soap_put___ns1__authenticateByKerberos(soap, p, "-ns1:authenticateByKerberos", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__authenticateByKerberos * SOAP_FMAC4 soap_get___ns1__authenticateByKerberos(struct soap*, struct __ns1__authenticateByKerberos *, const char*, const char*);

inline int soap_read___ns1__authenticateByKerberos(struct soap *soap, struct __ns1__authenticateByKerberos *p)
{
	if (p)
	{	::soap_default___ns1__authenticateByKerberos(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__authenticateByKerberos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__authenticateByKerberos(struct soap *soap, const char *URL, struct __ns1__authenticateByKerberos *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__authenticateByKerberos(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__authenticateByKerberos(struct soap *soap, struct __ns1__authenticateByKerberos *p)
{
	if (::soap_read___ns1__authenticateByKerberos(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__authenticateByTrustedPrincipal_DEFINED
#define SOAP_TYPE___ns1__authenticateByTrustedPrincipal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__authenticateByTrustedPrincipal(struct soap*, struct __ns1__authenticateByTrustedPrincipal *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__authenticateByTrustedPrincipal(struct soap*, const struct __ns1__authenticateByTrustedPrincipal *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__authenticateByTrustedPrincipal(struct soap*, const char*, int, const struct __ns1__authenticateByTrustedPrincipal *, const char*);
SOAP_FMAC3 struct __ns1__authenticateByTrustedPrincipal * SOAP_FMAC4 soap_in___ns1__authenticateByTrustedPrincipal(struct soap*, const char*, struct __ns1__authenticateByTrustedPrincipal *, const char*);
SOAP_FMAC1 struct __ns1__authenticateByTrustedPrincipal * SOAP_FMAC2 soap_instantiate___ns1__authenticateByTrustedPrincipal(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__authenticateByTrustedPrincipal * soap_new___ns1__authenticateByTrustedPrincipal(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__authenticateByTrustedPrincipal(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__authenticateByTrustedPrincipal * soap_new_req___ns1__authenticateByTrustedPrincipal(
	struct soap *soap)
{
	struct __ns1__authenticateByTrustedPrincipal *_p = ::soap_new___ns1__authenticateByTrustedPrincipal(soap);
	if (_p)
	{	::soap_default___ns1__authenticateByTrustedPrincipal(soap, _p);
	}
	return _p;
}

inline struct __ns1__authenticateByTrustedPrincipal * soap_new_set___ns1__authenticateByTrustedPrincipal(
	struct soap *soap,
	ns1__authenticateByTrustedPrincipal *ns1__authenticateByTrustedPrincipal_)
{
	struct __ns1__authenticateByTrustedPrincipal *_p = ::soap_new___ns1__authenticateByTrustedPrincipal(soap);
	if (_p)
	{	::soap_default___ns1__authenticateByTrustedPrincipal(soap, _p);
		_p->ns1__authenticateByTrustedPrincipal_ = ns1__authenticateByTrustedPrincipal_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__authenticateByTrustedPrincipal(struct soap*, const struct __ns1__authenticateByTrustedPrincipal *, const char*, const char*);

inline int soap_write___ns1__authenticateByTrustedPrincipal(struct soap *soap, struct __ns1__authenticateByTrustedPrincipal const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__authenticateByTrustedPrincipal(soap, p), 0) || ::soap_put___ns1__authenticateByTrustedPrincipal(soap, p, "-ns1:authenticateByTrustedPrincipal", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__authenticateByTrustedPrincipal(struct soap *soap, const char *URL, struct __ns1__authenticateByTrustedPrincipal const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__authenticateByTrustedPrincipal(soap, p), 0) || ::soap_put___ns1__authenticateByTrustedPrincipal(soap, p, "-ns1:authenticateByTrustedPrincipal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__authenticateByTrustedPrincipal(struct soap *soap, const char *URL, struct __ns1__authenticateByTrustedPrincipal const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__authenticateByTrustedPrincipal(soap, p), 0) || ::soap_put___ns1__authenticateByTrustedPrincipal(soap, p, "-ns1:authenticateByTrustedPrincipal", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__authenticateByTrustedPrincipal * SOAP_FMAC4 soap_get___ns1__authenticateByTrustedPrincipal(struct soap*, struct __ns1__authenticateByTrustedPrincipal *, const char*, const char*);

inline int soap_read___ns1__authenticateByTrustedPrincipal(struct soap *soap, struct __ns1__authenticateByTrustedPrincipal *p)
{
	if (p)
	{	::soap_default___ns1__authenticateByTrustedPrincipal(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__authenticateByTrustedPrincipal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__authenticateByTrustedPrincipal(struct soap *soap, const char *URL, struct __ns1__authenticateByTrustedPrincipal *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__authenticateByTrustedPrincipal(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__authenticateByTrustedPrincipal(struct soap *soap, struct __ns1__authenticateByTrustedPrincipal *p)
{
	if (::soap_read___ns1__authenticateByTrustedPrincipal(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__authenticateByLoginPassword_DEFINED
#define SOAP_TYPE___ns1__authenticateByLoginPassword_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__authenticateByLoginPassword(struct soap*, struct __ns1__authenticateByLoginPassword *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__authenticateByLoginPassword(struct soap*, const struct __ns1__authenticateByLoginPassword *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__authenticateByLoginPassword(struct soap*, const char*, int, const struct __ns1__authenticateByLoginPassword *, const char*);
SOAP_FMAC3 struct __ns1__authenticateByLoginPassword * SOAP_FMAC4 soap_in___ns1__authenticateByLoginPassword(struct soap*, const char*, struct __ns1__authenticateByLoginPassword *, const char*);
SOAP_FMAC1 struct __ns1__authenticateByLoginPassword * SOAP_FMAC2 soap_instantiate___ns1__authenticateByLoginPassword(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__authenticateByLoginPassword * soap_new___ns1__authenticateByLoginPassword(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__authenticateByLoginPassword(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__authenticateByLoginPassword * soap_new_req___ns1__authenticateByLoginPassword(
	struct soap *soap)
{
	struct __ns1__authenticateByLoginPassword *_p = ::soap_new___ns1__authenticateByLoginPassword(soap);
	if (_p)
	{	::soap_default___ns1__authenticateByLoginPassword(soap, _p);
	}
	return _p;
}

inline struct __ns1__authenticateByLoginPassword * soap_new_set___ns1__authenticateByLoginPassword(
	struct soap *soap,
	ns1__authenticateByLoginPassword *ns1__authenticateByLoginPassword_)
{
	struct __ns1__authenticateByLoginPassword *_p = ::soap_new___ns1__authenticateByLoginPassword(soap);
	if (_p)
	{	::soap_default___ns1__authenticateByLoginPassword(soap, _p);
		_p->ns1__authenticateByLoginPassword_ = ns1__authenticateByLoginPassword_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__authenticateByLoginPassword(struct soap*, const struct __ns1__authenticateByLoginPassword *, const char*, const char*);

inline int soap_write___ns1__authenticateByLoginPassword(struct soap *soap, struct __ns1__authenticateByLoginPassword const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__authenticateByLoginPassword(soap, p), 0) || ::soap_put___ns1__authenticateByLoginPassword(soap, p, "-ns1:authenticateByLoginPassword", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__authenticateByLoginPassword(struct soap *soap, const char *URL, struct __ns1__authenticateByLoginPassword const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__authenticateByLoginPassword(soap, p), 0) || ::soap_put___ns1__authenticateByLoginPassword(soap, p, "-ns1:authenticateByLoginPassword", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__authenticateByLoginPassword(struct soap *soap, const char *URL, struct __ns1__authenticateByLoginPassword const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__authenticateByLoginPassword(soap, p), 0) || ::soap_put___ns1__authenticateByLoginPassword(soap, p, "-ns1:authenticateByLoginPassword", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__authenticateByLoginPassword * SOAP_FMAC4 soap_get___ns1__authenticateByLoginPassword(struct soap*, struct __ns1__authenticateByLoginPassword *, const char*, const char*);

inline int soap_read___ns1__authenticateByLoginPassword(struct soap *soap, struct __ns1__authenticateByLoginPassword *p)
{
	if (p)
	{	::soap_default___ns1__authenticateByLoginPassword(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__authenticateByLoginPassword(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__authenticateByLoginPassword(struct soap *soap, const char *URL, struct __ns1__authenticateByLoginPassword *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__authenticateByLoginPassword(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__authenticateByLoginPassword(struct soap *soap, struct __ns1__authenticateByLoginPassword *p)
{
	if (::soap_read___ns1__authenticateByLoginPassword(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__authenticateByCallerPrincipal_DEFINED
#define SOAP_TYPE___ns1__authenticateByCallerPrincipal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__authenticateByCallerPrincipal(struct soap*, struct __ns1__authenticateByCallerPrincipal *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__authenticateByCallerPrincipal(struct soap*, const struct __ns1__authenticateByCallerPrincipal *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__authenticateByCallerPrincipal(struct soap*, const char*, int, const struct __ns1__authenticateByCallerPrincipal *, const char*);
SOAP_FMAC3 struct __ns1__authenticateByCallerPrincipal * SOAP_FMAC4 soap_in___ns1__authenticateByCallerPrincipal(struct soap*, const char*, struct __ns1__authenticateByCallerPrincipal *, const char*);
SOAP_FMAC1 struct __ns1__authenticateByCallerPrincipal * SOAP_FMAC2 soap_instantiate___ns1__authenticateByCallerPrincipal(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__authenticateByCallerPrincipal * soap_new___ns1__authenticateByCallerPrincipal(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__authenticateByCallerPrincipal(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__authenticateByCallerPrincipal * soap_new_req___ns1__authenticateByCallerPrincipal(
	struct soap *soap)
{
	struct __ns1__authenticateByCallerPrincipal *_p = ::soap_new___ns1__authenticateByCallerPrincipal(soap);
	if (_p)
	{	::soap_default___ns1__authenticateByCallerPrincipal(soap, _p);
	}
	return _p;
}

inline struct __ns1__authenticateByCallerPrincipal * soap_new_set___ns1__authenticateByCallerPrincipal(
	struct soap *soap,
	ns1__authenticateByCallerPrincipal *ns1__authenticateByCallerPrincipal_)
{
	struct __ns1__authenticateByCallerPrincipal *_p = ::soap_new___ns1__authenticateByCallerPrincipal(soap);
	if (_p)
	{	::soap_default___ns1__authenticateByCallerPrincipal(soap, _p);
		_p->ns1__authenticateByCallerPrincipal_ = ns1__authenticateByCallerPrincipal_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__authenticateByCallerPrincipal(struct soap*, const struct __ns1__authenticateByCallerPrincipal *, const char*, const char*);

inline int soap_write___ns1__authenticateByCallerPrincipal(struct soap *soap, struct __ns1__authenticateByCallerPrincipal const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__authenticateByCallerPrincipal(soap, p), 0) || ::soap_put___ns1__authenticateByCallerPrincipal(soap, p, "-ns1:authenticateByCallerPrincipal", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__authenticateByCallerPrincipal(struct soap *soap, const char *URL, struct __ns1__authenticateByCallerPrincipal const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__authenticateByCallerPrincipal(soap, p), 0) || ::soap_put___ns1__authenticateByCallerPrincipal(soap, p, "-ns1:authenticateByCallerPrincipal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__authenticateByCallerPrincipal(struct soap *soap, const char *URL, struct __ns1__authenticateByCallerPrincipal const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__authenticateByCallerPrincipal(soap, p), 0) || ::soap_put___ns1__authenticateByCallerPrincipal(soap, p, "-ns1:authenticateByCallerPrincipal", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__authenticateByCallerPrincipal * SOAP_FMAC4 soap_get___ns1__authenticateByCallerPrincipal(struct soap*, struct __ns1__authenticateByCallerPrincipal *, const char*, const char*);

inline int soap_read___ns1__authenticateByCallerPrincipal(struct soap *soap, struct __ns1__authenticateByCallerPrincipal *p)
{
	if (p)
	{	::soap_default___ns1__authenticateByCallerPrincipal(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__authenticateByCallerPrincipal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__authenticateByCallerPrincipal(struct soap *soap, const char *URL, struct __ns1__authenticateByCallerPrincipal *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__authenticateByCallerPrincipal(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__authenticateByCallerPrincipal(struct soap *soap, struct __ns1__authenticateByCallerPrincipal *p)
{
	if (::soap_read___ns1__authenticateByCallerPrincipal(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons1__reassignTasks_DEFINED
#define SOAP_TYPE_PointerTons1__reassignTasks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__reassignTasks(struct soap*, ns1__reassignTasks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__reassignTasks(struct soap*, const char *, int, ns1__reassignTasks *const*, const char *);
SOAP_FMAC3 ns1__reassignTasks ** SOAP_FMAC4 soap_in_PointerTons1__reassignTasks(struct soap*, const char*, ns1__reassignTasks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__reassignTasks(struct soap*, ns1__reassignTasks *const*, const char*, const char*);
SOAP_FMAC3 ns1__reassignTasks ** SOAP_FMAC4 soap_get_PointerTons1__reassignTasks(struct soap*, ns1__reassignTasks **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getTask_DEFINED
#define SOAP_TYPE_PointerTons1__getTask_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getTask(struct soap*, ns1__getTask *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getTask(struct soap*, const char *, int, ns1__getTask *const*, const char *);
SOAP_FMAC3 ns1__getTask ** SOAP_FMAC4 soap_in_PointerTons1__getTask(struct soap*, const char*, ns1__getTask **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getTask(struct soap*, ns1__getTask *const*, const char*, const char*);
SOAP_FMAC3 ns1__getTask ** SOAP_FMAC4 soap_get_PointerTons1__getTask(struct soap*, ns1__getTask **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getProcessTasks_DEFINED
#define SOAP_TYPE_PointerTons1__getProcessTasks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getProcessTasks(struct soap*, ns1__getProcessTasks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getProcessTasks(struct soap*, const char *, int, ns1__getProcessTasks *const*, const char *);
SOAP_FMAC3 ns1__getProcessTasks ** SOAP_FMAC4 soap_in_PointerTons1__getProcessTasks(struct soap*, const char*, ns1__getProcessTasks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getProcessTasks(struct soap*, ns1__getProcessTasks *const*, const char*, const char*);
SOAP_FMAC3 ns1__getProcessTasks ** SOAP_FMAC4 soap_get_PointerTons1__getProcessTasks(struct soap*, ns1__getProcessTasks **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__completeTaskWS_DEFINED
#define SOAP_TYPE_PointerTons1__completeTaskWS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__completeTaskWS(struct soap*, ns1__completeTaskWS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__completeTaskWS(struct soap*, const char *, int, ns1__completeTaskWS *const*, const char *);
SOAP_FMAC3 ns1__completeTaskWS ** SOAP_FMAC4 soap_in_PointerTons1__completeTaskWS(struct soap*, const char*, ns1__completeTaskWS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__completeTaskWS(struct soap*, ns1__completeTaskWS *const*, const char*, const char*);
SOAP_FMAC3 ns1__completeTaskWS ** SOAP_FMAC4 soap_get_PointerTons1__completeTaskWS(struct soap*, ns1__completeTaskWS **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getTasks_DEFINED
#define SOAP_TYPE_PointerTons1__getTasks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getTasks(struct soap*, ns1__getTasks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getTasks(struct soap*, const char *, int, ns1__getTasks *const*, const char *);
SOAP_FMAC3 ns1__getTasks ** SOAP_FMAC4 soap_in_PointerTons1__getTasks(struct soap*, const char*, ns1__getTasks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getTasks(struct soap*, ns1__getTasks *const*, const char*, const char*);
SOAP_FMAC3 ns1__getTasks ** SOAP_FMAC4 soap_get_PointerTons1__getTasks(struct soap*, ns1__getTasks **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__assignTask_DEFINED
#define SOAP_TYPE_PointerTons1__assignTask_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__assignTask(struct soap*, ns1__assignTask *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__assignTask(struct soap*, const char *, int, ns1__assignTask *const*, const char *);
SOAP_FMAC3 ns1__assignTask ** SOAP_FMAC4 soap_in_PointerTons1__assignTask(struct soap*, const char*, ns1__assignTask **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__assignTask(struct soap*, ns1__assignTask *const*, const char*, const char*);
SOAP_FMAC3 ns1__assignTask ** SOAP_FMAC4 soap_get_PointerTons1__assignTask(struct soap*, ns1__assignTask **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__markTaskOpened_DEFINED
#define SOAP_TYPE_PointerTons1__markTaskOpened_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__markTaskOpened(struct soap*, ns1__markTaskOpened *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__markTaskOpened(struct soap*, const char *, int, ns1__markTaskOpened *const*, const char *);
SOAP_FMAC3 ns1__markTaskOpened ** SOAP_FMAC4 soap_in_PointerTons1__markTaskOpened(struct soap*, const char*, ns1__markTaskOpened **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__markTaskOpened(struct soap*, ns1__markTaskOpened *const*, const char*, const char*);
SOAP_FMAC3 ns1__markTaskOpened ** SOAP_FMAC4 soap_get_PointerTons1__markTaskOpened(struct soap*, ns1__markTaskOpened **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getMyTasks_DEFINED
#define SOAP_TYPE_PointerTons1__getMyTasks_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getMyTasks(struct soap*, ns1__getMyTasks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getMyTasks(struct soap*, const char *, int, ns1__getMyTasks *const*, const char *);
SOAP_FMAC3 ns1__getMyTasks ** SOAP_FMAC4 soap_in_PointerTons1__getMyTasks(struct soap*, const char*, ns1__getMyTasks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getMyTasks(struct soap*, ns1__getMyTasks *const*, const char*, const char*);
SOAP_FMAC3 ns1__getMyTasks ** SOAP_FMAC4 soap_get_PointerTons1__getMyTasks(struct soap*, ns1__getMyTasks **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__reassignTask_DEFINED
#define SOAP_TYPE_PointerTons1__reassignTask_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__reassignTask(struct soap*, ns1__reassignTask *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__reassignTask(struct soap*, const char *, int, ns1__reassignTask *const*, const char *);
SOAP_FMAC3 ns1__reassignTask ** SOAP_FMAC4 soap_in_PointerTons1__reassignTask(struct soap*, const char*, ns1__reassignTask **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__reassignTask(struct soap*, ns1__reassignTask *const*, const char*, const char*);
SOAP_FMAC3 ns1__reassignTask ** SOAP_FMAC4 soap_get_PointerTons1__reassignTask(struct soap*, ns1__reassignTask **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__authenticateByKerberos_DEFINED
#define SOAP_TYPE_PointerTons1__authenticateByKerberos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authenticateByKerberos(struct soap*, ns1__authenticateByKerberos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authenticateByKerberos(struct soap*, const char *, int, ns1__authenticateByKerberos *const*, const char *);
SOAP_FMAC3 ns1__authenticateByKerberos ** SOAP_FMAC4 soap_in_PointerTons1__authenticateByKerberos(struct soap*, const char*, ns1__authenticateByKerberos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authenticateByKerberos(struct soap*, ns1__authenticateByKerberos *const*, const char*, const char*);
SOAP_FMAC3 ns1__authenticateByKerberos ** SOAP_FMAC4 soap_get_PointerTons1__authenticateByKerberos(struct soap*, ns1__authenticateByKerberos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__authenticateByTrustedPrincipal_DEFINED
#define SOAP_TYPE_PointerTons1__authenticateByTrustedPrincipal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authenticateByTrustedPrincipal(struct soap*, ns1__authenticateByTrustedPrincipal *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authenticateByTrustedPrincipal(struct soap*, const char *, int, ns1__authenticateByTrustedPrincipal *const*, const char *);
SOAP_FMAC3 ns1__authenticateByTrustedPrincipal ** SOAP_FMAC4 soap_in_PointerTons1__authenticateByTrustedPrincipal(struct soap*, const char*, ns1__authenticateByTrustedPrincipal **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authenticateByTrustedPrincipal(struct soap*, ns1__authenticateByTrustedPrincipal *const*, const char*, const char*);
SOAP_FMAC3 ns1__authenticateByTrustedPrincipal ** SOAP_FMAC4 soap_get_PointerTons1__authenticateByTrustedPrincipal(struct soap*, ns1__authenticateByTrustedPrincipal **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__authenticateByLoginPassword_DEFINED
#define SOAP_TYPE_PointerTons1__authenticateByLoginPassword_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authenticateByLoginPassword(struct soap*, ns1__authenticateByLoginPassword *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authenticateByLoginPassword(struct soap*, const char *, int, ns1__authenticateByLoginPassword *const*, const char *);
SOAP_FMAC3 ns1__authenticateByLoginPassword ** SOAP_FMAC4 soap_in_PointerTons1__authenticateByLoginPassword(struct soap*, const char*, ns1__authenticateByLoginPassword **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authenticateByLoginPassword(struct soap*, ns1__authenticateByLoginPassword *const*, const char*, const char*);
SOAP_FMAC3 ns1__authenticateByLoginPassword ** SOAP_FMAC4 soap_get_PointerTons1__authenticateByLoginPassword(struct soap*, ns1__authenticateByLoginPassword **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__authenticateByCallerPrincipal_DEFINED
#define SOAP_TYPE_PointerTons1__authenticateByCallerPrincipal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authenticateByCallerPrincipal(struct soap*, ns1__authenticateByCallerPrincipal *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authenticateByCallerPrincipal(struct soap*, const char *, int, ns1__authenticateByCallerPrincipal *const*, const char *);
SOAP_FMAC3 ns1__authenticateByCallerPrincipal ** SOAP_FMAC4 soap_in_PointerTons1__authenticateByCallerPrincipal(struct soap*, const char*, ns1__authenticateByCallerPrincipal **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authenticateByCallerPrincipal(struct soap*, ns1__authenticateByCallerPrincipal *const*, const char*, const char*);
SOAP_FMAC3 ns1__authenticateByCallerPrincipal ** SOAP_FMAC4 soap_get_PointerTons1__authenticateByCallerPrincipal(struct soap*, ns1__authenticateByCallerPrincipal **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__variable_DEFINED
#define SOAP_TYPE_PointerTons1__variable_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__variable(struct soap*, ns1__variable *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__variable(struct soap*, const char *, int, ns1__variable *const*, const char *);
SOAP_FMAC3 ns1__variable ** SOAP_FMAC4 soap_in_PointerTons1__variable(struct soap*, const char*, ns1__variable **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__variable(struct soap*, ns1__variable *const*, const char*, const char*);
SOAP_FMAC3 ns1__variable ** SOAP_FMAC4 soap_get_PointerTons1__variable(struct soap*, ns1__variable **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__variableStoreType_DEFINED
#define SOAP_TYPE_PointerTons1__variableStoreType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__variableStoreType(struct soap*, enum ns1__variableStoreType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__variableStoreType(struct soap*, const char *, int, enum ns1__variableStoreType *const*, const char *);
SOAP_FMAC3 enum ns1__variableStoreType ** SOAP_FMAC4 soap_in_PointerTons1__variableStoreType(struct soap*, const char*, enum ns1__variableStoreType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__variableStoreType(struct soap*, enum ns1__variableStoreType *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__variableStoreType ** SOAP_FMAC4 soap_get_PointerTons1__variableStoreType(struct soap*, enum ns1__variableStoreType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__userType_DEFINED
#define SOAP_TYPE_PointerTons1__userType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__userType(struct soap*, ns1__userType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__userType(struct soap*, const char *, int, ns1__userType *const*, const char *);
SOAP_FMAC3 ns1__userType ** SOAP_FMAC4 soap_in_PointerTons1__userType(struct soap*, const char*, ns1__userType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__userType(struct soap*, ns1__userType *const*, const char*, const char*);
SOAP_FMAC3 ns1__userType ** SOAP_FMAC4 soap_get_PointerTons1__userType(struct soap*, ns1__userType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__anyType_DEFINED
#define SOAP_TYPE_PointerToxsd__anyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyType(struct soap*, xsd__anyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyType(struct soap*, const char *, int, xsd__anyType *const*, const char *);
SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_in_PointerToxsd__anyType(struct soap*, const char*, xsd__anyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyType(struct soap*, xsd__anyType *const*, const char*, const char*);
SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_get_PointerToxsd__anyType(struct soap*, xsd__anyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__variableDefinition_DEFINED
#define SOAP_TYPE_PointerTons1__variableDefinition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__variableDefinition(struct soap*, ns1__variableDefinition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__variableDefinition(struct soap*, const char *, int, ns1__variableDefinition *const*, const char *);
SOAP_FMAC3 ns1__variableDefinition ** SOAP_FMAC4 soap_in_PointerTons1__variableDefinition(struct soap*, const char*, ns1__variableDefinition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__variableDefinition(struct soap*, ns1__variableDefinition *const*, const char*, const char*);
SOAP_FMAC3 ns1__variableDefinition ** SOAP_FMAC4 soap_get_PointerTons1__variableDefinition(struct soap*, ns1__variableDefinition **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__wfVariable_DEFINED
#define SOAP_TYPE_PointerTons1__wfVariable_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__wfVariable(struct soap*, ns1__wfVariable *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__wfVariable(struct soap*, const char *, int, ns1__wfVariable *const*, const char *);
SOAP_FMAC3 ns1__wfVariable ** SOAP_FMAC4 soap_in_PointerTons1__wfVariable(struct soap*, const char*, ns1__wfVariable **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__wfVariable(struct soap*, ns1__wfVariable *const*, const char*, const char*);
SOAP_FMAC3 ns1__wfVariable ** SOAP_FMAC4 soap_get_PointerTons1__wfVariable(struct soap*, ns1__wfVariable **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__wfExecutor_DEFINED
#define SOAP_TYPE_PointerTons1__wfExecutor_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__wfExecutor(struct soap*, ns1__wfExecutor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__wfExecutor(struct soap*, const char *, int, ns1__wfExecutor *const*, const char *);
SOAP_FMAC3 ns1__wfExecutor ** SOAP_FMAC4 soap_in_PointerTons1__wfExecutor(struct soap*, const char*, ns1__wfExecutor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__wfExecutor(struct soap*, ns1__wfExecutor *const*, const char*, const char*);
SOAP_FMAC3 ns1__wfExecutor ** SOAP_FMAC4 soap_get_PointerTons1__wfExecutor(struct soap*, ns1__wfExecutor **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__wfTask_DEFINED
#define SOAP_TYPE_PointerTons1__wfTask_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__wfTask(struct soap*, ns1__wfTask *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__wfTask(struct soap*, const char *, int, ns1__wfTask *const*, const char *);
SOAP_FMAC3 ns1__wfTask ** SOAP_FMAC4 soap_in_PointerTons1__wfTask(struct soap*, const char*, ns1__wfTask **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__wfTask(struct soap*, ns1__wfTask *const*, const char*, const char*);
SOAP_FMAC3 ns1__wfTask ** SOAP_FMAC4 soap_get_PointerTons1__wfTask(struct soap*, ns1__wfTask **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__classPresentationType_DEFINED
#define SOAP_TYPE_PointerTons1__classPresentationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__classPresentationType(struct soap*, enum ns1__classPresentationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__classPresentationType(struct soap*, const char *, int, enum ns1__classPresentationType *const*, const char *);
SOAP_FMAC3 enum ns1__classPresentationType ** SOAP_FMAC4 soap_in_PointerTons1__classPresentationType(struct soap*, const char*, enum ns1__classPresentationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__classPresentationType(struct soap*, enum ns1__classPresentationType *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__classPresentationType ** SOAP_FMAC4 soap_get_PointerTons1__classPresentationType(struct soap*, enum ns1__classPresentationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__batchPresentation_DEFINED
#define SOAP_TYPE_PointerTons1__batchPresentation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__batchPresentation(struct soap*, ns1__batchPresentation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__batchPresentation(struct soap*, const char *, int, ns1__batchPresentation *const*, const char *);
SOAP_FMAC3 ns1__batchPresentation ** SOAP_FMAC4 soap_in_PointerTons1__batchPresentation(struct soap*, const char*, ns1__batchPresentation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__batchPresentation(struct soap*, ns1__batchPresentation *const*, const char*, const char*);
SOAP_FMAC3 ns1__batchPresentation ** SOAP_FMAC4 soap_get_PointerTons1__batchPresentation(struct soap*, ns1__batchPresentation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToLONG64_DEFINED
#define SOAP_TYPE_PointerToLONG64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToLONG64(struct soap*, LONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToLONG64(struct soap*, const char *, int, LONG64 *const*, const char *);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToLONG64(struct soap*, const char*, LONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToLONG64(struct soap*, LONG64 *const*, const char*, const char*);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToLONG64(struct soap*, LONG64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
#define SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap*, const char*, xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*, const char*, const char*);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__actor_DEFINED
#define SOAP_TYPE_PointerTons1__actor_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__actor(struct soap*, ns1__actor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__actor(struct soap*, const char *, int, ns1__actor *const*, const char *);
SOAP_FMAC3 ns1__actor ** SOAP_FMAC4 soap_in_PointerTons1__actor(struct soap*, const char*, ns1__actor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__actor(struct soap*, ns1__actor *const*, const char*, const char*);
SOAP_FMAC3 ns1__actor ** SOAP_FMAC4 soap_get_PointerTons1__actor(struct soap*, ns1__actor **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__user_DEFINED
#define SOAP_TYPE_PointerTons1__user_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__user(struct soap*, ns1__user *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__user(struct soap*, const char *, int, ns1__user *const*, const char *);
SOAP_FMAC3 ns1__user ** SOAP_FMAC4 soap_in_PointerTons1__user(struct soap*, const char*, ns1__user **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__user(struct soap*, ns1__user *const*, const char*, const char*);
SOAP_FMAC3 ns1__user ** SOAP_FMAC4 soap_get_PointerTons1__user(struct soap*, ns1__user **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wstring_DEFINED
#define SOAP_TYPE_wstring_DEFINED

inline void soap_default_wstring(struct soap *soap, wchar_t **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wstring
	*a = SOAP_DEFAULT_wstring;
#else
	*a = (wchar_t *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstring(struct soap*, wchar_t *const*);

#define soap_wstring2s(soap, a) soap_wchar2s((soap), (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstring(struct soap*, const char*, int, wchar_t*const*, const char*);

#define soap_s2wstring(soap, s, a) soap_s2wchar((soap), (s), (wchar_t**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_in_wstring(struct soap*, const char*, wchar_t **, const char*);

SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_new_wstring(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstring(struct soap*, wchar_t *const*, const char*, const char*);

inline int soap_write_wstring(struct soap *soap, wchar_t *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wstring(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wstring(struct soap *soap, const char *URL, wchar_t *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wstring(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wstring(struct soap *soap, const char *URL, wchar_t *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wstring(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wchar_t ** SOAP_FMAC4 soap_get_wstring(struct soap*, wchar_t **, const char*, const char*);

inline int soap_read_wstring(struct soap *soap, wchar_t **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wstring(struct soap *soap, const char *URL, wchar_t **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wstring(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_wstring(struct soap *soap, wchar_t **p)
{
	if (::soap_read_wstring(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__variable_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__variable_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__variable(struct soap*, std::vector<ns1__variable *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__variable(struct soap*, const std::vector<ns1__variable *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__variable(struct soap*, const char*, int, const std::vector<ns1__variable *> *, const char*);
SOAP_FMAC3 std::vector<ns1__variable *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__variable(struct soap*, const char*, std::vector<ns1__variable *> *, const char*);
SOAP_FMAC1 std::vector<ns1__variable *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__variable(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__variable *>  * soap_new_std__vectorTemplateOfPointerTons1__variable(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__variable(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns1__userType_attributesMap_entry_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_ns1__userType_attributesMap_entry_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns1__userType_attributesMap_entry(struct soap*, std::vector<_ns1__userType_attributesMap_entry> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns1__userType_attributesMap_entry(struct soap*, const std::vector<_ns1__userType_attributesMap_entry> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns1__userType_attributesMap_entry(struct soap*, const char*, int, const std::vector<_ns1__userType_attributesMap_entry> *, const char*);
SOAP_FMAC3 std::vector<_ns1__userType_attributesMap_entry> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns1__userType_attributesMap_entry(struct soap*, const char*, std::vector<_ns1__userType_attributesMap_entry> *, const char*);
SOAP_FMAC1 std::vector<_ns1__userType_attributesMap_entry>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns1__userType_attributesMap_entry(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns1__userType_attributesMap_entry>  * soap_new_std__vectorTemplateOf_ns1__userType_attributesMap_entry(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_ns1__userType_attributesMap_entry(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__variableDefinition_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__variableDefinition_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__variableDefinition(struct soap*, std::vector<ns1__variableDefinition *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__variableDefinition(struct soap*, const std::vector<ns1__variableDefinition *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__variableDefinition(struct soap*, const char*, int, const std::vector<ns1__variableDefinition *> *, const char*);
SOAP_FMAC3 std::vector<ns1__variableDefinition *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__variableDefinition(struct soap*, const char*, std::vector<ns1__variableDefinition *> *, const char*);
SOAP_FMAC1 std::vector<ns1__variableDefinition *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__variableDefinition(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__variableDefinition *>  * soap_new_std__vectorTemplateOfPointerTons1__variableDefinition(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__variableDefinition(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__userType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__userType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__userType(struct soap*, std::vector<ns1__userType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__userType(struct soap*, const std::vector<ns1__userType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__userType(struct soap*, const char*, int, const std::vector<ns1__userType *> *, const char*);
SOAP_FMAC3 std::vector<ns1__userType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__userType(struct soap*, const char*, std::vector<ns1__userType *> *, const char*);
SOAP_FMAC1 std::vector<ns1__userType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__userType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__userType *>  * soap_new_std__vectorTemplateOfPointerTons1__userType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__userType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__wfVariable_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__wfVariable_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__wfVariable(struct soap*, std::vector<ns1__wfVariable *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__wfVariable(struct soap*, const std::vector<ns1__wfVariable *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__wfVariable(struct soap*, const char*, int, const std::vector<ns1__wfVariable *> *, const char*);
SOAP_FMAC3 std::vector<ns1__wfVariable *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__wfVariable(struct soap*, const char*, std::vector<ns1__wfVariable *> *, const char*);
SOAP_FMAC1 std::vector<ns1__wfVariable *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__wfVariable(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__wfVariable *>  * soap_new_std__vectorTemplateOfPointerTons1__wfVariable(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__wfVariable(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__wfTask_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__wfTask_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__wfTask(struct soap*, std::vector<ns1__wfTask *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__wfTask(struct soap*, const std::vector<ns1__wfTask *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__wfTask(struct soap*, const char*, int, const std::vector<ns1__wfTask *> *, const char*);
SOAP_FMAC3 std::vector<ns1__wfTask *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__wfTask(struct soap*, const char*, std::vector<ns1__wfTask *> *, const char*);
SOAP_FMAC1 std::vector<ns1__wfTask *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__wfTask(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__wfTask *>  * soap_new_std__vectorTemplateOfPointerTons1__wfTask(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__wfTask(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
