/* soapC.cpp
   Generated by gSOAP 2.8.62 for ServerAPI.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "stdafx.h"
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.62 2018-02-18 14:03:36 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_dateTime:
		return soap_in_dateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_ns1__variableStoreType:
		return soap_in_ns1__variableStoreType(soap, NULL, NULL, "ns1:variableStoreType");
	case SOAP_TYPE_ns1__classPresentationType:
		return soap_in_ns1__classPresentationType(soap, NULL, NULL, "ns1:classPresentationType");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns1__variableStoreType_:
		return soap_in_ns1__variableStoreType_(soap, NULL, NULL, "ns1:variableStoreType");
	case SOAP_TYPE_ns1__classPresentationType_:
		return soap_in_ns1__classPresentationType_(soap, NULL, NULL, "ns1:classPresentationType");
	case SOAP_TYPE_ns1__reassignTasksResponse:
		return soap_in_ns1__reassignTasksResponse(soap, NULL, NULL, "ns1:reassignTasksResponse");
	case SOAP_TYPE_ns1__reassignTasks:
		return soap_in_ns1__reassignTasks(soap, NULL, NULL, "ns1:reassignTasks");
	case SOAP_TYPE_ns1__getTaskResponse:
		return soap_in_ns1__getTaskResponse(soap, NULL, NULL, "ns1:getTaskResponse");
	case SOAP_TYPE_ns1__getTask:
		return soap_in_ns1__getTask(soap, NULL, NULL, "ns1:getTask");
	case SOAP_TYPE_ns1__getProcessTasksResponse:
		return soap_in_ns1__getProcessTasksResponse(soap, NULL, NULL, "ns1:getProcessTasksResponse");
	case SOAP_TYPE_ns1__getProcessTasks:
		return soap_in_ns1__getProcessTasks(soap, NULL, NULL, "ns1:getProcessTasks");
	case SOAP_TYPE_ns1__completeTaskWSResponse:
		return soap_in_ns1__completeTaskWSResponse(soap, NULL, NULL, "ns1:completeTaskWSResponse");
	case SOAP_TYPE_ns1__variable:
		return soap_in_ns1__variable(soap, NULL, NULL, "ns1:variable");
	case SOAP_TYPE_ns1__completeTaskWS:
		return soap_in_ns1__completeTaskWS(soap, NULL, NULL, "ns1:completeTaskWS");
	case SOAP_TYPE_ns1__getTasksResponse:
		return soap_in_ns1__getTasksResponse(soap, NULL, NULL, "ns1:getTasksResponse");
	case SOAP_TYPE_ns1__getTasks:
		return soap_in_ns1__getTasks(soap, NULL, NULL, "ns1:getTasks");
	case SOAP_TYPE_ns1__assignTaskResponse:
		return soap_in_ns1__assignTaskResponse(soap, NULL, NULL, "ns1:assignTaskResponse");
	case SOAP_TYPE_ns1__assignTask:
		return soap_in_ns1__assignTask(soap, NULL, NULL, "ns1:assignTask");
	case SOAP_TYPE_ns1__markTaskOpenedResponse:
		return soap_in_ns1__markTaskOpenedResponse(soap, NULL, NULL, "ns1:markTaskOpenedResponse");
	case SOAP_TYPE_ns1__markTaskOpened:
		return soap_in_ns1__markTaskOpened(soap, NULL, NULL, "ns1:markTaskOpened");
	case SOAP_TYPE_ns1__userType:
		return soap_in_ns1__userType(soap, NULL, NULL, "ns1:userType");
	case SOAP_TYPE_ns1__variableDefinition:
		return soap_in_ns1__variableDefinition(soap, NULL, NULL, "ns1:variableDefinition");
	case SOAP_TYPE_ns1__wfVariable:
		return soap_in_ns1__wfVariable(soap, NULL, NULL, "ns1:wfVariable");
	case SOAP_TYPE_ns1__wfTask:
		return soap_in_ns1__wfTask(soap, NULL, NULL, "ns1:wfTask");
	case SOAP_TYPE_ns1__getMyTasksResponse:
		return soap_in_ns1__getMyTasksResponse(soap, NULL, NULL, "ns1:getMyTasksResponse");
	case SOAP_TYPE_ns1__batchPresentation:
		return soap_in_ns1__batchPresentation(soap, NULL, NULL, "ns1:batchPresentation");
	case SOAP_TYPE_ns1__getMyTasks:
		return soap_in_ns1__getMyTasks(soap, NULL, NULL, "ns1:getMyTasks");
	case SOAP_TYPE_ns1__reassignTaskResponse:
		return soap_in_ns1__reassignTaskResponse(soap, NULL, NULL, "ns1:reassignTaskResponse");
	case SOAP_TYPE_ns1__reassignTask:
		return soap_in_ns1__reassignTask(soap, NULL, NULL, "ns1:reassignTask");
	case SOAP_TYPE_ns1__authenticateByKerberosResponse:
		return soap_in_ns1__authenticateByKerberosResponse(soap, NULL, NULL, "ns1:authenticateByKerberosResponse");
	case SOAP_TYPE_ns1__authenticateByKerberos:
		return soap_in_ns1__authenticateByKerberos(soap, NULL, NULL, "ns1:authenticateByKerberos");
	case SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse:
		return soap_in_ns1__authenticateByTrustedPrincipalResponse(soap, NULL, NULL, "ns1:authenticateByTrustedPrincipalResponse");
	case SOAP_TYPE_ns1__authenticateByTrustedPrincipal:
		return soap_in_ns1__authenticateByTrustedPrincipal(soap, NULL, NULL, "ns1:authenticateByTrustedPrincipal");
	case SOAP_TYPE_ns1__authenticateByLoginPasswordResponse:
		return soap_in_ns1__authenticateByLoginPasswordResponse(soap, NULL, NULL, "ns1:authenticateByLoginPasswordResponse");
	case SOAP_TYPE_ns1__authenticateByLoginPassword:
		return soap_in_ns1__authenticateByLoginPassword(soap, NULL, NULL, "ns1:authenticateByLoginPassword");
	case SOAP_TYPE_ns1__wfExecutor:
		return soap_in_ns1__wfExecutor(soap, NULL, NULL, "ns1:wfExecutor");
	case SOAP_TYPE_ns1__identifiable:
		return soap_in_ns1__identifiable(soap, NULL, NULL, "ns1:identifiable");
	case SOAP_TYPE_ns1__identifiableBase:
		return soap_in_ns1__identifiableBase(soap, NULL, NULL, "ns1:identifiableBase");
	case SOAP_TYPE_ns1__executor:
		return soap_in_ns1__executor(soap, NULL, NULL, "ns1:executor");
	case SOAP_TYPE_ns1__actor:
		return soap_in_ns1__actor(soap, NULL, NULL, "ns1:actor");
	case SOAP_TYPE_ns1__user:
		return soap_in_ns1__user(soap, NULL, NULL, "ns1:user");
	case SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse:
		return soap_in_ns1__authenticateByCallerPrincipalResponse(soap, NULL, NULL, "ns1:authenticateByCallerPrincipalResponse");
	case SOAP_TYPE_ns1__authenticateByCallerPrincipal:
		return soap_in_ns1__authenticateByCallerPrincipal(soap, NULL, NULL, "ns1:authenticateByCallerPrincipal");
	case SOAP_TYPE_xsd__string:
		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__long:
		return soap_in_xsd__long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__dateTime:
		return soap_in_xsd__dateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_xsd__base64Binary_:
		return soap_in_xsd__base64Binary_(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyType:
		return soap_in_xsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_PointerTons1__reassignTasks:
		return soap_in_PointerTons1__reassignTasks(soap, NULL, NULL, "ns1:reassignTasks");
	case SOAP_TYPE_PointerTons1__getTask:
		return soap_in_PointerTons1__getTask(soap, NULL, NULL, "ns1:getTask");
	case SOAP_TYPE_PointerTons1__getProcessTasks:
		return soap_in_PointerTons1__getProcessTasks(soap, NULL, NULL, "ns1:getProcessTasks");
	case SOAP_TYPE_PointerTons1__completeTaskWS:
		return soap_in_PointerTons1__completeTaskWS(soap, NULL, NULL, "ns1:completeTaskWS");
	case SOAP_TYPE_PointerTons1__getTasks:
		return soap_in_PointerTons1__getTasks(soap, NULL, NULL, "ns1:getTasks");
	case SOAP_TYPE_PointerTons1__assignTask:
		return soap_in_PointerTons1__assignTask(soap, NULL, NULL, "ns1:assignTask");
	case SOAP_TYPE_PointerTons1__markTaskOpened:
		return soap_in_PointerTons1__markTaskOpened(soap, NULL, NULL, "ns1:markTaskOpened");
	case SOAP_TYPE_PointerTons1__getMyTasks:
		return soap_in_PointerTons1__getMyTasks(soap, NULL, NULL, "ns1:getMyTasks");
	case SOAP_TYPE_PointerTons1__reassignTask:
		return soap_in_PointerTons1__reassignTask(soap, NULL, NULL, "ns1:reassignTask");
	case SOAP_TYPE_PointerTons1__authenticateByKerberos:
		return soap_in_PointerTons1__authenticateByKerberos(soap, NULL, NULL, "ns1:authenticateByKerberos");
	case SOAP_TYPE_PointerTons1__authenticateByTrustedPrincipal:
		return soap_in_PointerTons1__authenticateByTrustedPrincipal(soap, NULL, NULL, "ns1:authenticateByTrustedPrincipal");
	case SOAP_TYPE_PointerTons1__authenticateByLoginPassword:
		return soap_in_PointerTons1__authenticateByLoginPassword(soap, NULL, NULL, "ns1:authenticateByLoginPassword");
	case SOAP_TYPE_PointerTons1__authenticateByCallerPrincipal:
		return soap_in_PointerTons1__authenticateByCallerPrincipal(soap, NULL, NULL, "ns1:authenticateByCallerPrincipal");
	case SOAP_TYPE_PointerTons1__variable:
		return soap_in_PointerTons1__variable(soap, NULL, NULL, "ns1:variable");
	case SOAP_TYPE_PointerTons1__variableStoreType:
		return soap_in_PointerTons1__variableStoreType(soap, NULL, NULL, "ns1:variableStoreType");
	case SOAP_TYPE_PointerTons1__userType:
		return soap_in_PointerTons1__userType(soap, NULL, NULL, "ns1:userType");
	case SOAP_TYPE_PointerToxsd__anyType:
		return soap_in_PointerToxsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_PointerTons1__variableDefinition:
		return soap_in_PointerTons1__variableDefinition(soap, NULL, NULL, "ns1:variableDefinition");
	case SOAP_TYPE_PointerTons1__wfVariable:
		return soap_in_PointerTons1__wfVariable(soap, NULL, NULL, "ns1:wfVariable");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTons1__wfExecutor:
		return soap_in_PointerTons1__wfExecutor(soap, NULL, NULL, "ns1:wfExecutor");
	case SOAP_TYPE_PointerTons1__wfTask:
		return soap_in_PointerTons1__wfTask(soap, NULL, NULL, "ns1:wfTask");
	case SOAP_TYPE_PointerTodateTime:
		return soap_in_PointerTodateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_PointerTons1__classPresentationType:
		return soap_in_PointerTons1__classPresentationType(soap, NULL, NULL, "ns1:classPresentationType");
	case SOAP_TYPE_PointerTons1__batchPresentation:
		return soap_in_PointerTons1__batchPresentation(soap, NULL, NULL, "ns1:batchPresentation");
	case SOAP_TYPE_PointerToLONG64:
		return soap_in_PointerToLONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__actor:
		return soap_in_PointerTons1__actor(soap, NULL, NULL, "ns1:actor");
	case SOAP_TYPE_PointerTons1__user:
		return soap_in_PointerTons1__user(soap, NULL, NULL, "ns1:user");
	case SOAP_TYPE_wstring:
	{	wchar_t **s;
		s = soap_in_wstring(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:variableStoreType"))
		{	*type = SOAP_TYPE_ns1__variableStoreType_;
			return soap_in_ns1__variableStoreType_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:classPresentationType"))
		{	*type = SOAP_TYPE_ns1__classPresentationType_;
			return soap_in_ns1__classPresentationType_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:reassignTasksResponse"))
		{	*type = SOAP_TYPE_ns1__reassignTasksResponse;
			return soap_in_ns1__reassignTasksResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:reassignTasks"))
		{	*type = SOAP_TYPE_ns1__reassignTasks;
			return soap_in_ns1__reassignTasks(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getTaskResponse"))
		{	*type = SOAP_TYPE_ns1__getTaskResponse;
			return soap_in_ns1__getTaskResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getTask"))
		{	*type = SOAP_TYPE_ns1__getTask;
			return soap_in_ns1__getTask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getProcessTasksResponse"))
		{	*type = SOAP_TYPE_ns1__getProcessTasksResponse;
			return soap_in_ns1__getProcessTasksResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getProcessTasks"))
		{	*type = SOAP_TYPE_ns1__getProcessTasks;
			return soap_in_ns1__getProcessTasks(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:completeTaskWSResponse"))
		{	*type = SOAP_TYPE_ns1__completeTaskWSResponse;
			return soap_in_ns1__completeTaskWSResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:variable"))
		{	*type = SOAP_TYPE_ns1__variable;
			return soap_in_ns1__variable(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:completeTaskWS"))
		{	*type = SOAP_TYPE_ns1__completeTaskWS;
			return soap_in_ns1__completeTaskWS(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getTasksResponse"))
		{	*type = SOAP_TYPE_ns1__getTasksResponse;
			return soap_in_ns1__getTasksResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getTasks"))
		{	*type = SOAP_TYPE_ns1__getTasks;
			return soap_in_ns1__getTasks(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:assignTaskResponse"))
		{	*type = SOAP_TYPE_ns1__assignTaskResponse;
			return soap_in_ns1__assignTaskResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:assignTask"))
		{	*type = SOAP_TYPE_ns1__assignTask;
			return soap_in_ns1__assignTask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:markTaskOpenedResponse"))
		{	*type = SOAP_TYPE_ns1__markTaskOpenedResponse;
			return soap_in_ns1__markTaskOpenedResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:markTaskOpened"))
		{	*type = SOAP_TYPE_ns1__markTaskOpened;
			return soap_in_ns1__markTaskOpened(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:userType"))
		{	*type = SOAP_TYPE_ns1__userType;
			return soap_in_ns1__userType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:variableDefinition"))
		{	*type = SOAP_TYPE_ns1__variableDefinition;
			return soap_in_ns1__variableDefinition(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:wfVariable"))
		{	*type = SOAP_TYPE_ns1__wfVariable;
			return soap_in_ns1__wfVariable(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:wfTask"))
		{	*type = SOAP_TYPE_ns1__wfTask;
			return soap_in_ns1__wfTask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getMyTasksResponse"))
		{	*type = SOAP_TYPE_ns1__getMyTasksResponse;
			return soap_in_ns1__getMyTasksResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:batchPresentation"))
		{	*type = SOAP_TYPE_ns1__batchPresentation;
			return soap_in_ns1__batchPresentation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getMyTasks"))
		{	*type = SOAP_TYPE_ns1__getMyTasks;
			return soap_in_ns1__getMyTasks(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:reassignTaskResponse"))
		{	*type = SOAP_TYPE_ns1__reassignTaskResponse;
			return soap_in_ns1__reassignTaskResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:reassignTask"))
		{	*type = SOAP_TYPE_ns1__reassignTask;
			return soap_in_ns1__reassignTask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:authenticateByKerberosResponse"))
		{	*type = SOAP_TYPE_ns1__authenticateByKerberosResponse;
			return soap_in_ns1__authenticateByKerberosResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:authenticateByKerberos"))
		{	*type = SOAP_TYPE_ns1__authenticateByKerberos;
			return soap_in_ns1__authenticateByKerberos(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:authenticateByTrustedPrincipalResponse"))
		{	*type = SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse;
			return soap_in_ns1__authenticateByTrustedPrincipalResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:authenticateByTrustedPrincipal"))
		{	*type = SOAP_TYPE_ns1__authenticateByTrustedPrincipal;
			return soap_in_ns1__authenticateByTrustedPrincipal(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:authenticateByLoginPasswordResponse"))
		{	*type = SOAP_TYPE_ns1__authenticateByLoginPasswordResponse;
			return soap_in_ns1__authenticateByLoginPasswordResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:authenticateByLoginPassword"))
		{	*type = SOAP_TYPE_ns1__authenticateByLoginPassword;
			return soap_in_ns1__authenticateByLoginPassword(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:wfExecutor"))
		{	*type = SOAP_TYPE_ns1__wfExecutor;
			return soap_in_ns1__wfExecutor(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:identifiable"))
		{	*type = SOAP_TYPE_ns1__identifiable;
			return soap_in_ns1__identifiable(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:identifiableBase"))
		{	*type = SOAP_TYPE_ns1__identifiableBase;
			return soap_in_ns1__identifiableBase(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:executor"))
		{	*type = SOAP_TYPE_ns1__executor;
			return soap_in_ns1__executor(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:actor"))
		{	*type = SOAP_TYPE_ns1__actor;
			return soap_in_ns1__actor(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:user"))
		{	*type = SOAP_TYPE_ns1__user;
			return soap_in_ns1__user(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:authenticateByCallerPrincipalResponse"))
		{	*type = SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse;
			return soap_in_ns1__authenticateByCallerPrincipalResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:authenticateByCallerPrincipal"))
		{	*type = SOAP_TYPE_ns1__authenticateByCallerPrincipal;
			return soap_in_ns1__authenticateByCallerPrincipal(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_xsd__string;
			return soap_in_xsd__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_xsd__long;
			return soap_in_xsd__long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_xsd__dateTime;
			return soap_in_xsd__dateTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary_;
			return soap_in_xsd__base64Binary_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_xsd__anyType;
			return soap_in_xsd__anyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_dateTime;
			return soap_in_dateTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:variableStoreType"))
		{	*type = SOAP_TYPE_ns1__variableStoreType;
			return soap_in_ns1__variableStoreType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:classPresentationType"))
		{	*type = SOAP_TYPE_ns1__classPresentationType;
			return soap_in_ns1__classPresentationType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	wchar_t **s;
			*type = SOAP_TYPE_wstring;
			s = soap_in_wstring(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:userType-attributesMap-entry"))
		{	*type = SOAP_TYPE__ns1__userType_attributesMap_entry;
			return soap_in__ns1__userType_attributesMap_entry(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:userType-attributesMap"))
		{	*type = SOAP_TYPE__ns1__userType_attributesMap;
			return soap_in__ns1__userType_attributesMap(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_dateTime:
		return soap_out_dateTime(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_ns1__variableStoreType:
		return soap_out_ns1__variableStoreType(soap, tag, id, (const enum ns1__variableStoreType *)ptr, "ns1:variableStoreType");
	case SOAP_TYPE_ns1__classPresentationType:
		return soap_out_ns1__classPresentationType(soap, tag, id, (const enum ns1__classPresentationType *)ptr, "ns1:classPresentationType");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE__ns1__userType_attributesMap_entry:
		return ((_ns1__userType_attributesMap_entry *)ptr)->soap_out(soap, "ns1:userType-attributesMap-entry", id, "");
	case SOAP_TYPE__ns1__userType_attributesMap:
		return ((_ns1__userType_attributesMap *)ptr)->soap_out(soap, "ns1:userType-attributesMap", id, "");
	case SOAP_TYPE_ns1__variableStoreType_:
		return ((ns1__variableStoreType_ *)ptr)->soap_out(soap, tag, id, "ns1:variableStoreType");
	case SOAP_TYPE_ns1__classPresentationType_:
		return ((ns1__classPresentationType_ *)ptr)->soap_out(soap, tag, id, "ns1:classPresentationType");
	case SOAP_TYPE_ns1__reassignTasksResponse:
		return ((ns1__reassignTasksResponse *)ptr)->soap_out(soap, tag, id, "ns1:reassignTasksResponse");
	case SOAP_TYPE_ns1__reassignTasks:
		return ((ns1__reassignTasks *)ptr)->soap_out(soap, tag, id, "ns1:reassignTasks");
	case SOAP_TYPE_ns1__getTaskResponse:
		return ((ns1__getTaskResponse *)ptr)->soap_out(soap, tag, id, "ns1:getTaskResponse");
	case SOAP_TYPE_ns1__getTask:
		return ((ns1__getTask *)ptr)->soap_out(soap, tag, id, "ns1:getTask");
	case SOAP_TYPE_ns1__getProcessTasksResponse:
		return ((ns1__getProcessTasksResponse *)ptr)->soap_out(soap, tag, id, "ns1:getProcessTasksResponse");
	case SOAP_TYPE_ns1__getProcessTasks:
		return ((ns1__getProcessTasks *)ptr)->soap_out(soap, tag, id, "ns1:getProcessTasks");
	case SOAP_TYPE_ns1__completeTaskWSResponse:
		return ((ns1__completeTaskWSResponse *)ptr)->soap_out(soap, tag, id, "ns1:completeTaskWSResponse");
	case SOAP_TYPE_ns1__variable:
		return ((ns1__variable *)ptr)->soap_out(soap, tag, id, "ns1:variable");
	case SOAP_TYPE_ns1__completeTaskWS:
		return ((ns1__completeTaskWS *)ptr)->soap_out(soap, tag, id, "ns1:completeTaskWS");
	case SOAP_TYPE_ns1__getTasksResponse:
		return ((ns1__getTasksResponse *)ptr)->soap_out(soap, tag, id, "ns1:getTasksResponse");
	case SOAP_TYPE_ns1__getTasks:
		return ((ns1__getTasks *)ptr)->soap_out(soap, tag, id, "ns1:getTasks");
	case SOAP_TYPE_ns1__assignTaskResponse:
		return ((ns1__assignTaskResponse *)ptr)->soap_out(soap, tag, id, "ns1:assignTaskResponse");
	case SOAP_TYPE_ns1__assignTask:
		return ((ns1__assignTask *)ptr)->soap_out(soap, tag, id, "ns1:assignTask");
	case SOAP_TYPE_ns1__markTaskOpenedResponse:
		return ((ns1__markTaskOpenedResponse *)ptr)->soap_out(soap, tag, id, "ns1:markTaskOpenedResponse");
	case SOAP_TYPE_ns1__markTaskOpened:
		return ((ns1__markTaskOpened *)ptr)->soap_out(soap, tag, id, "ns1:markTaskOpened");
	case SOAP_TYPE_ns1__userType:
		return ((ns1__userType *)ptr)->soap_out(soap, tag, id, "ns1:userType");
	case SOAP_TYPE_ns1__variableDefinition:
		return ((ns1__variableDefinition *)ptr)->soap_out(soap, tag, id, "ns1:variableDefinition");
	case SOAP_TYPE_ns1__wfVariable:
		return ((ns1__wfVariable *)ptr)->soap_out(soap, tag, id, "ns1:wfVariable");
	case SOAP_TYPE_ns1__wfTask:
		return ((ns1__wfTask *)ptr)->soap_out(soap, tag, id, "ns1:wfTask");
	case SOAP_TYPE_ns1__getMyTasksResponse:
		return ((ns1__getMyTasksResponse *)ptr)->soap_out(soap, tag, id, "ns1:getMyTasksResponse");
	case SOAP_TYPE_ns1__batchPresentation:
		return ((ns1__batchPresentation *)ptr)->soap_out(soap, tag, id, "ns1:batchPresentation");
	case SOAP_TYPE_ns1__getMyTasks:
		return ((ns1__getMyTasks *)ptr)->soap_out(soap, tag, id, "ns1:getMyTasks");
	case SOAP_TYPE_ns1__reassignTaskResponse:
		return ((ns1__reassignTaskResponse *)ptr)->soap_out(soap, tag, id, "ns1:reassignTaskResponse");
	case SOAP_TYPE_ns1__reassignTask:
		return ((ns1__reassignTask *)ptr)->soap_out(soap, tag, id, "ns1:reassignTask");
	case SOAP_TYPE_ns1__authenticateByKerberosResponse:
		return ((ns1__authenticateByKerberosResponse *)ptr)->soap_out(soap, tag, id, "ns1:authenticateByKerberosResponse");
	case SOAP_TYPE_ns1__authenticateByKerberos:
		return ((ns1__authenticateByKerberos *)ptr)->soap_out(soap, tag, id, "ns1:authenticateByKerberos");
	case SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse:
		return ((ns1__authenticateByTrustedPrincipalResponse *)ptr)->soap_out(soap, tag, id, "ns1:authenticateByTrustedPrincipalResponse");
	case SOAP_TYPE_ns1__authenticateByTrustedPrincipal:
		return ((ns1__authenticateByTrustedPrincipal *)ptr)->soap_out(soap, tag, id, "ns1:authenticateByTrustedPrincipal");
	case SOAP_TYPE_ns1__authenticateByLoginPasswordResponse:
		return ((ns1__authenticateByLoginPasswordResponse *)ptr)->soap_out(soap, tag, id, "ns1:authenticateByLoginPasswordResponse");
	case SOAP_TYPE_ns1__authenticateByLoginPassword:
		return ((ns1__authenticateByLoginPassword *)ptr)->soap_out(soap, tag, id, "ns1:authenticateByLoginPassword");
	case SOAP_TYPE_ns1__wfExecutor:
		return ((ns1__wfExecutor *)ptr)->soap_out(soap, tag, id, "ns1:wfExecutor");
	case SOAP_TYPE_ns1__identifiable:
		return ((ns1__identifiable *)ptr)->soap_out(soap, tag, id, "ns1:identifiable");
	case SOAP_TYPE_ns1__identifiableBase:
		return ((ns1__identifiableBase *)ptr)->soap_out(soap, tag, id, "ns1:identifiableBase");
	case SOAP_TYPE_ns1__executor:
		return ((ns1__executor *)ptr)->soap_out(soap, tag, id, "ns1:executor");
	case SOAP_TYPE_ns1__actor:
		return ((ns1__actor *)ptr)->soap_out(soap, tag, id, "ns1:actor");
	case SOAP_TYPE_ns1__user:
		return ((ns1__user *)ptr)->soap_out(soap, tag, id, "ns1:user");
	case SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse:
		return ((ns1__authenticateByCallerPrincipalResponse *)ptr)->soap_out(soap, tag, id, "ns1:authenticateByCallerPrincipalResponse");
	case SOAP_TYPE_ns1__authenticateByCallerPrincipal:
		return ((ns1__authenticateByCallerPrincipal *)ptr)->soap_out(soap, tag, id, "ns1:authenticateByCallerPrincipal");
	case SOAP_TYPE_xsd__string:
		return ((xsd__string *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_xsd__long:
		return ((xsd__long *)ptr)->soap_out(soap, tag, id, "xsd:long");
	case SOAP_TYPE_xsd__int:
		return ((xsd__int *)ptr)->soap_out(soap, tag, id, "xsd:int");
	case SOAP_TYPE_xsd__dateTime:
		return ((xsd__dateTime *)ptr)->soap_out(soap, tag, id, "xsd:dateTime");
	case SOAP_TYPE_xsd__boolean:
		return ((xsd__boolean *)ptr)->soap_out(soap, tag, id, "xsd:boolean");
	case SOAP_TYPE_xsd__base64Binary_:
		return ((xsd__base64Binary_ *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyType:
		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");
	case SOAP_TYPE_PointerTons1__reassignTasks:
		return soap_out_PointerTons1__reassignTasks(soap, tag, id, (ns1__reassignTasks *const*)ptr, "ns1:reassignTasks");
	case SOAP_TYPE_PointerTons1__getTask:
		return soap_out_PointerTons1__getTask(soap, tag, id, (ns1__getTask *const*)ptr, "ns1:getTask");
	case SOAP_TYPE_PointerTons1__getProcessTasks:
		return soap_out_PointerTons1__getProcessTasks(soap, tag, id, (ns1__getProcessTasks *const*)ptr, "ns1:getProcessTasks");
	case SOAP_TYPE_PointerTons1__completeTaskWS:
		return soap_out_PointerTons1__completeTaskWS(soap, tag, id, (ns1__completeTaskWS *const*)ptr, "ns1:completeTaskWS");
	case SOAP_TYPE_PointerTons1__getTasks:
		return soap_out_PointerTons1__getTasks(soap, tag, id, (ns1__getTasks *const*)ptr, "ns1:getTasks");
	case SOAP_TYPE_PointerTons1__assignTask:
		return soap_out_PointerTons1__assignTask(soap, tag, id, (ns1__assignTask *const*)ptr, "ns1:assignTask");
	case SOAP_TYPE_PointerTons1__markTaskOpened:
		return soap_out_PointerTons1__markTaskOpened(soap, tag, id, (ns1__markTaskOpened *const*)ptr, "ns1:markTaskOpened");
	case SOAP_TYPE_PointerTons1__getMyTasks:
		return soap_out_PointerTons1__getMyTasks(soap, tag, id, (ns1__getMyTasks *const*)ptr, "ns1:getMyTasks");
	case SOAP_TYPE_PointerTons1__reassignTask:
		return soap_out_PointerTons1__reassignTask(soap, tag, id, (ns1__reassignTask *const*)ptr, "ns1:reassignTask");
	case SOAP_TYPE_PointerTons1__authenticateByKerberos:
		return soap_out_PointerTons1__authenticateByKerberos(soap, tag, id, (ns1__authenticateByKerberos *const*)ptr, "ns1:authenticateByKerberos");
	case SOAP_TYPE_PointerTons1__authenticateByTrustedPrincipal:
		return soap_out_PointerTons1__authenticateByTrustedPrincipal(soap, tag, id, (ns1__authenticateByTrustedPrincipal *const*)ptr, "ns1:authenticateByTrustedPrincipal");
	case SOAP_TYPE_PointerTons1__authenticateByLoginPassword:
		return soap_out_PointerTons1__authenticateByLoginPassword(soap, tag, id, (ns1__authenticateByLoginPassword *const*)ptr, "ns1:authenticateByLoginPassword");
	case SOAP_TYPE_PointerTons1__authenticateByCallerPrincipal:
		return soap_out_PointerTons1__authenticateByCallerPrincipal(soap, tag, id, (ns1__authenticateByCallerPrincipal *const*)ptr, "ns1:authenticateByCallerPrincipal");
	case SOAP_TYPE_PointerTons1__variable:
		return soap_out_PointerTons1__variable(soap, tag, id, (ns1__variable *const*)ptr, "ns1:variable");
	case SOAP_TYPE_PointerTons1__variableStoreType:
		return soap_out_PointerTons1__variableStoreType(soap, tag, id, (enum ns1__variableStoreType *const*)ptr, "ns1:variableStoreType");
	case SOAP_TYPE_PointerTons1__userType:
		return soap_out_PointerTons1__userType(soap, tag, id, (ns1__userType *const*)ptr, "ns1:userType");
	case SOAP_TYPE_PointerToxsd__anyType:
		return soap_out_PointerToxsd__anyType(soap, tag, id, (xsd__anyType *const*)ptr, "xsd:anyType");
	case SOAP_TYPE_PointerTons1__variableDefinition:
		return soap_out_PointerTons1__variableDefinition(soap, tag, id, (ns1__variableDefinition *const*)ptr, "ns1:variableDefinition");
	case SOAP_TYPE_PointerTons1__wfVariable:
		return soap_out_PointerTons1__wfVariable(soap, tag, id, (ns1__wfVariable *const*)ptr, "ns1:wfVariable");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTons1__wfExecutor:
		return soap_out_PointerTons1__wfExecutor(soap, tag, id, (ns1__wfExecutor *const*)ptr, "ns1:wfExecutor");
	case SOAP_TYPE_PointerTons1__wfTask:
		return soap_out_PointerTons1__wfTask(soap, tag, id, (ns1__wfTask *const*)ptr, "ns1:wfTask");
	case SOAP_TYPE_PointerTodateTime:
		return soap_out_PointerTodateTime(soap, tag, id, (time_t *const*)ptr, "xsd:dateTime");
	case SOAP_TYPE_PointerTons1__classPresentationType:
		return soap_out_PointerTons1__classPresentationType(soap, tag, id, (enum ns1__classPresentationType *const*)ptr, "ns1:classPresentationType");
	case SOAP_TYPE_PointerTons1__batchPresentation:
		return soap_out_PointerTons1__batchPresentation(soap, tag, id, (ns1__batchPresentation *const*)ptr, "ns1:batchPresentation");
	case SOAP_TYPE_PointerToLONG64:
		return soap_out_PointerToLONG64(soap, tag, id, (LONG64 *const*)ptr, "xsd:long");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__actor:
		return soap_out_PointerTons1__actor(soap, tag, id, (ns1__actor *const*)ptr, "ns1:actor");
	case SOAP_TYPE_PointerTons1__user:
		return soap_out_PointerTons1__user(soap, tag, id, (ns1__user *const*)ptr, "ns1:user");
	case SOAP_TYPE_wstring:
		return soap_out_wstring(soap, tag, id, (wchar_t*const*)(void*)&ptr, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__userType_attributesMap_entry:
		((_ns1__userType_attributesMap_entry *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__userType_attributesMap:
		((_ns1__userType_attributesMap *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__variableStoreType_:
		((ns1__variableStoreType_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__classPresentationType_:
		((ns1__classPresentationType_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__reassignTasksResponse:
		((ns1__reassignTasksResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__reassignTasks:
		((ns1__reassignTasks *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getTaskResponse:
		((ns1__getTaskResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getTask:
		((ns1__getTask *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getProcessTasksResponse:
		((ns1__getProcessTasksResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getProcessTasks:
		((ns1__getProcessTasks *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__completeTaskWSResponse:
		((ns1__completeTaskWSResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__variable:
		((ns1__variable *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__completeTaskWS:
		((ns1__completeTaskWS *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getTasksResponse:
		((ns1__getTasksResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getTasks:
		((ns1__getTasks *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__assignTaskResponse:
		((ns1__assignTaskResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__assignTask:
		((ns1__assignTask *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__markTaskOpenedResponse:
		((ns1__markTaskOpenedResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__markTaskOpened:
		((ns1__markTaskOpened *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__userType:
		((ns1__userType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__variableDefinition:
		((ns1__variableDefinition *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__wfVariable:
		((ns1__wfVariable *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__wfTask:
		((ns1__wfTask *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getMyTasksResponse:
		((ns1__getMyTasksResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__batchPresentation:
		((ns1__batchPresentation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getMyTasks:
		((ns1__getMyTasks *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__reassignTaskResponse:
		((ns1__reassignTaskResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__reassignTask:
		((ns1__reassignTask *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__authenticateByKerberosResponse:
		((ns1__authenticateByKerberosResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__authenticateByKerberos:
		((ns1__authenticateByKerberos *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse:
		((ns1__authenticateByTrustedPrincipalResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__authenticateByTrustedPrincipal:
		((ns1__authenticateByTrustedPrincipal *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__authenticateByLoginPasswordResponse:
		((ns1__authenticateByLoginPasswordResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__authenticateByLoginPassword:
		((ns1__authenticateByLoginPassword *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__wfExecutor:
		((ns1__wfExecutor *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__identifiable:
		((ns1__identifiable *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__identifiableBase:
		((ns1__identifiableBase *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__executor:
		((ns1__executor *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__actor:
		((ns1__actor *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__user:
		((ns1__user *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse:
		((ns1__authenticateByCallerPrincipalResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__authenticateByCallerPrincipal:
		((ns1__authenticateByCallerPrincipal *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__string:
		((xsd__string *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__long:
		((xsd__long *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__int:
		((xsd__int *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__dateTime:
		((xsd__dateTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__boolean:
		((xsd__boolean *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary_:
		((xsd__base64Binary_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyType:
		((xsd__anyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__reassignTasks:
		soap_serialize___ns1__reassignTasks(soap, (const struct __ns1__reassignTasks *)ptr);
		break;
	case SOAP_TYPE___ns1__getTask:
		soap_serialize___ns1__getTask(soap, (const struct __ns1__getTask *)ptr);
		break;
	case SOAP_TYPE___ns1__getProcessTasks:
		soap_serialize___ns1__getProcessTasks(soap, (const struct __ns1__getProcessTasks *)ptr);
		break;
	case SOAP_TYPE___ns1__completeTaskWS:
		soap_serialize___ns1__completeTaskWS(soap, (const struct __ns1__completeTaskWS *)ptr);
		break;
	case SOAP_TYPE___ns1__completeTaskWSResponse:
		soap_serialize___ns1__completeTaskWSResponse(soap, (const struct __ns1__completeTaskWSResponse *)ptr);
		break;
	case SOAP_TYPE___ns1__getTasks:
		soap_serialize___ns1__getTasks(soap, (const struct __ns1__getTasks *)ptr);
		break;
	case SOAP_TYPE___ns1__assignTask:
		soap_serialize___ns1__assignTask(soap, (const struct __ns1__assignTask *)ptr);
		break;
	case SOAP_TYPE___ns1__assignTaskResponse:
		soap_serialize___ns1__assignTaskResponse(soap, (const struct __ns1__assignTaskResponse *)ptr);
		break;
	case SOAP_TYPE___ns1__markTaskOpened:
		soap_serialize___ns1__markTaskOpened(soap, (const struct __ns1__markTaskOpened *)ptr);
		break;
	case SOAP_TYPE___ns1__markTaskOpenedResponse:
		soap_serialize___ns1__markTaskOpenedResponse(soap, (const struct __ns1__markTaskOpenedResponse *)ptr);
		break;
	case SOAP_TYPE___ns1__getMyTasks:
		soap_serialize___ns1__getMyTasks(soap, (const struct __ns1__getMyTasks *)ptr);
		break;
	case SOAP_TYPE___ns1__reassignTask:
		soap_serialize___ns1__reassignTask(soap, (const struct __ns1__reassignTask *)ptr);
		break;
	case SOAP_TYPE___ns1__authenticateByKerberos:
		soap_serialize___ns1__authenticateByKerberos(soap, (const struct __ns1__authenticateByKerberos *)ptr);
		break;
	case SOAP_TYPE___ns1__authenticateByTrustedPrincipal:
		soap_serialize___ns1__authenticateByTrustedPrincipal(soap, (const struct __ns1__authenticateByTrustedPrincipal *)ptr);
		break;
	case SOAP_TYPE___ns1__authenticateByLoginPassword:
		soap_serialize___ns1__authenticateByLoginPassword(soap, (const struct __ns1__authenticateByLoginPassword *)ptr);
		break;
	case SOAP_TYPE___ns1__authenticateByCallerPrincipal:
		soap_serialize___ns1__authenticateByCallerPrincipal(soap, (const struct __ns1__authenticateByCallerPrincipal *)ptr);
		break;
	case SOAP_TYPE_PointerTons1__reassignTasks:
		soap_serialize_PointerTons1__reassignTasks(soap, (ns1__reassignTasks *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getTask:
		soap_serialize_PointerTons1__getTask(soap, (ns1__getTask *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getProcessTasks:
		soap_serialize_PointerTons1__getProcessTasks(soap, (ns1__getProcessTasks *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__completeTaskWS:
		soap_serialize_PointerTons1__completeTaskWS(soap, (ns1__completeTaskWS *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getTasks:
		soap_serialize_PointerTons1__getTasks(soap, (ns1__getTasks *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__assignTask:
		soap_serialize_PointerTons1__assignTask(soap, (ns1__assignTask *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__markTaskOpened:
		soap_serialize_PointerTons1__markTaskOpened(soap, (ns1__markTaskOpened *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getMyTasks:
		soap_serialize_PointerTons1__getMyTasks(soap, (ns1__getMyTasks *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__reassignTask:
		soap_serialize_PointerTons1__reassignTask(soap, (ns1__reassignTask *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__authenticateByKerberos:
		soap_serialize_PointerTons1__authenticateByKerberos(soap, (ns1__authenticateByKerberos *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__authenticateByTrustedPrincipal:
		soap_serialize_PointerTons1__authenticateByTrustedPrincipal(soap, (ns1__authenticateByTrustedPrincipal *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__authenticateByLoginPassword:
		soap_serialize_PointerTons1__authenticateByLoginPassword(soap, (ns1__authenticateByLoginPassword *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__authenticateByCallerPrincipal:
		soap_serialize_PointerTons1__authenticateByCallerPrincipal(soap, (ns1__authenticateByCallerPrincipal *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__variable:
		soap_serialize_PointerTons1__variable(soap, (ns1__variable *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__variableStoreType:
		soap_serialize_PointerTons1__variableStoreType(soap, (enum ns1__variableStoreType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__userType:
		soap_serialize_PointerTons1__userType(soap, (ns1__userType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__anyType:
		soap_serialize_PointerToxsd__anyType(soap, (xsd__anyType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__variableDefinition:
		soap_serialize_PointerTons1__variableDefinition(soap, (ns1__variableDefinition *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__wfVariable:
		soap_serialize_PointerTons1__wfVariable(soap, (ns1__wfVariable *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__wfExecutor:
		soap_serialize_PointerTons1__wfExecutor(soap, (ns1__wfExecutor *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__wfTask:
		soap_serialize_PointerTons1__wfTask(soap, (ns1__wfTask *const*)ptr);
		break;
	case SOAP_TYPE_PointerTodateTime:
		soap_serialize_PointerTodateTime(soap, (time_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__classPresentationType:
		soap_serialize_PointerTons1__classPresentationType(soap, (enum ns1__classPresentationType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__batchPresentation:
		soap_serialize_PointerTons1__batchPresentation(soap, (ns1__batchPresentation *const*)ptr);
		break;
	case SOAP_TYPE_PointerToLONG64:
		soap_serialize_PointerToLONG64(soap, (LONG64 *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__actor:
		soap_serialize_PointerTons1__actor(soap, (ns1__actor *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__user:
		soap_serialize_PointerTons1__user(soap, (ns1__user *const*)ptr);
		break;
	case SOAP_TYPE_wstring:
		soap_serialize_wstring(soap, (wchar_t*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary_:
		return (void*)soap_instantiate_xsd__base64Binary_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__boolean:
		return (void*)soap_instantiate_xsd__boolean(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__dateTime:
		return (void*)soap_instantiate_xsd__dateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__int:
		return (void*)soap_instantiate_xsd__int(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__long:
		return (void*)soap_instantiate_xsd__long(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__string:
		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__classPresentationType_:
		return (void*)soap_instantiate_ns1__classPresentationType_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__variableStoreType_:
		return (void*)soap_instantiate_ns1__variableStoreType_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__authenticateByCallerPrincipal:
		return (void*)soap_instantiate_ns1__authenticateByCallerPrincipal(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse:
		return (void*)soap_instantiate_ns1__authenticateByCallerPrincipalResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__user:
		return (void*)soap_instantiate_ns1__user(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__identifiable:
		return (void*)soap_instantiate_ns1__identifiable(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__authenticateByLoginPassword:
		return (void*)soap_instantiate_ns1__authenticateByLoginPassword(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__authenticateByLoginPasswordResponse:
		return (void*)soap_instantiate_ns1__authenticateByLoginPasswordResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__authenticateByTrustedPrincipal:
		return (void*)soap_instantiate_ns1__authenticateByTrustedPrincipal(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse:
		return (void*)soap_instantiate_ns1__authenticateByTrustedPrincipalResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__authenticateByKerberos:
		return (void*)soap_instantiate_ns1__authenticateByKerberos(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__authenticateByKerberosResponse:
		return (void*)soap_instantiate_ns1__authenticateByKerberosResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__reassignTask:
		return (void*)soap_instantiate_ns1__reassignTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__reassignTaskResponse:
		return (void*)soap_instantiate_ns1__reassignTaskResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getMyTasks:
		return (void*)soap_instantiate_ns1__getMyTasks(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__batchPresentation:
		return (void*)soap_instantiate_ns1__batchPresentation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getMyTasksResponse:
		return (void*)soap_instantiate_ns1__getMyTasksResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__wfTask:
		return (void*)soap_instantiate_ns1__wfTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__wfVariable:
		return (void*)soap_instantiate_ns1__wfVariable(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__variableDefinition:
		return (void*)soap_instantiate_ns1__variableDefinition(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__userType_attributesMap_entry:
		return (void*)soap_instantiate__ns1__userType_attributesMap_entry(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__userType_attributesMap:
		return (void*)soap_instantiate__ns1__userType_attributesMap(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__userType:
		return (void*)soap_instantiate_ns1__userType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__markTaskOpened:
		return (void*)soap_instantiate_ns1__markTaskOpened(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__markTaskOpenedResponse:
		return (void*)soap_instantiate_ns1__markTaskOpenedResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__assignTask:
		return (void*)soap_instantiate_ns1__assignTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__assignTaskResponse:
		return (void*)soap_instantiate_ns1__assignTaskResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getTasks:
		return (void*)soap_instantiate_ns1__getTasks(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getTasksResponse:
		return (void*)soap_instantiate_ns1__getTasksResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__completeTaskWS:
		return (void*)soap_instantiate_ns1__completeTaskWS(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__variable:
		return (void*)soap_instantiate_ns1__variable(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__completeTaskWSResponse:
		return (void*)soap_instantiate_ns1__completeTaskWSResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getProcessTasks:
		return (void*)soap_instantiate_ns1__getProcessTasks(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getProcessTasksResponse:
		return (void*)soap_instantiate_ns1__getProcessTasksResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getTask:
		return (void*)soap_instantiate_ns1__getTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getTaskResponse:
		return (void*)soap_instantiate_ns1__getTaskResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__reassignTasks:
		return (void*)soap_instantiate_ns1__reassignTasks(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__reassignTasksResponse:
		return (void*)soap_instantiate_ns1__reassignTasksResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__identifiableBase:
		return (void*)soap_instantiate_ns1__identifiableBase(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__executor:
		return (void*)soap_instantiate_ns1__executor(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__actor:
		return (void*)soap_instantiate_ns1__actor(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__wfExecutor:
		return (void*)soap_instantiate_ns1__wfExecutor(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__authenticateByCallerPrincipal:
		return (void*)soap_instantiate___ns1__authenticateByCallerPrincipal(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__authenticateByLoginPassword:
		return (void*)soap_instantiate___ns1__authenticateByLoginPassword(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__authenticateByTrustedPrincipal:
		return (void*)soap_instantiate___ns1__authenticateByTrustedPrincipal(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__authenticateByKerberos:
		return (void*)soap_instantiate___ns1__authenticateByKerberos(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__reassignTask:
		return (void*)soap_instantiate___ns1__reassignTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getMyTasks:
		return (void*)soap_instantiate___ns1__getMyTasks(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__markTaskOpenedResponse:
		return (void*)soap_instantiate___ns1__markTaskOpenedResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__markTaskOpened:
		return (void*)soap_instantiate___ns1__markTaskOpened(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__assignTaskResponse:
		return (void*)soap_instantiate___ns1__assignTaskResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__assignTask:
		return (void*)soap_instantiate___ns1__assignTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getTasks:
		return (void*)soap_instantiate___ns1__getTasks(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__completeTaskWSResponse:
		return (void*)soap_instantiate___ns1__completeTaskWSResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__completeTaskWS:
		return (void*)soap_instantiate___ns1__completeTaskWS(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getProcessTasks:
		return (void*)soap_instantiate___ns1__getProcessTasks(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getTask:
		return (void*)soap_instantiate___ns1__getTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__reassignTasks:
		return (void*)soap_instantiate___ns1__reassignTasks(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__variable:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__variable(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns1__userType_attributesMap_entry:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns1__userType_attributesMap_entry(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__variableDefinition:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__variableDefinition(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__userType:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__userType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__wfVariable:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__wfVariable(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__wfTask:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__wfTask(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_xsd__anyType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__anyType*>(p->ptr), xsd__anyType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__anyType*>(p->ptr), xsd__anyType);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__base64Binary*>(p->ptr), xsd__base64Binary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__base64Binary*>(p->ptr), xsd__base64Binary);
		break;
	case SOAP_TYPE_xsd__base64Binary_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__base64Binary_*>(p->ptr), xsd__base64Binary_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__base64Binary_*>(p->ptr), xsd__base64Binary_);
		break;
	case SOAP_TYPE_xsd__boolean:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__boolean*>(p->ptr), xsd__boolean);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__boolean*>(p->ptr), xsd__boolean);
		break;
	case SOAP_TYPE_xsd__dateTime:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__dateTime*>(p->ptr), xsd__dateTime);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__dateTime*>(p->ptr), xsd__dateTime);
		break;
	case SOAP_TYPE_xsd__int:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__int*>(p->ptr), xsd__int);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__int*>(p->ptr), xsd__int);
		break;
	case SOAP_TYPE_xsd__long:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__long*>(p->ptr), xsd__long);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__long*>(p->ptr), xsd__long);
		break;
	case SOAP_TYPE_xsd__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__string*>(p->ptr), xsd__string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__string*>(p->ptr), xsd__string);
		break;
	case SOAP_TYPE_ns1__classPresentationType_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__classPresentationType_*>(p->ptr), ns1__classPresentationType_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__classPresentationType_*>(p->ptr), ns1__classPresentationType_);
		break;
	case SOAP_TYPE_ns1__variableStoreType_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__variableStoreType_*>(p->ptr), ns1__variableStoreType_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__variableStoreType_*>(p->ptr), ns1__variableStoreType_);
		break;
	case SOAP_TYPE_ns1__authenticateByCallerPrincipal:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__authenticateByCallerPrincipal*>(p->ptr), ns1__authenticateByCallerPrincipal);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__authenticateByCallerPrincipal*>(p->ptr), ns1__authenticateByCallerPrincipal);
		break;
	case SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__authenticateByCallerPrincipalResponse*>(p->ptr), ns1__authenticateByCallerPrincipalResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__authenticateByCallerPrincipalResponse*>(p->ptr), ns1__authenticateByCallerPrincipalResponse);
		break;
	case SOAP_TYPE_ns1__user:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__user*>(p->ptr), ns1__user);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__user*>(p->ptr), ns1__user);
		break;
	case SOAP_TYPE_ns1__identifiable:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__identifiable*>(p->ptr), ns1__identifiable);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__identifiable*>(p->ptr), ns1__identifiable);
		break;
	case SOAP_TYPE_ns1__authenticateByLoginPassword:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__authenticateByLoginPassword*>(p->ptr), ns1__authenticateByLoginPassword);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__authenticateByLoginPassword*>(p->ptr), ns1__authenticateByLoginPassword);
		break;
	case SOAP_TYPE_ns1__authenticateByLoginPasswordResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__authenticateByLoginPasswordResponse*>(p->ptr), ns1__authenticateByLoginPasswordResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__authenticateByLoginPasswordResponse*>(p->ptr), ns1__authenticateByLoginPasswordResponse);
		break;
	case SOAP_TYPE_ns1__authenticateByTrustedPrincipal:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__authenticateByTrustedPrincipal*>(p->ptr), ns1__authenticateByTrustedPrincipal);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__authenticateByTrustedPrincipal*>(p->ptr), ns1__authenticateByTrustedPrincipal);
		break;
	case SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__authenticateByTrustedPrincipalResponse*>(p->ptr), ns1__authenticateByTrustedPrincipalResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__authenticateByTrustedPrincipalResponse*>(p->ptr), ns1__authenticateByTrustedPrincipalResponse);
		break;
	case SOAP_TYPE_ns1__authenticateByKerberos:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__authenticateByKerberos*>(p->ptr), ns1__authenticateByKerberos);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__authenticateByKerberos*>(p->ptr), ns1__authenticateByKerberos);
		break;
	case SOAP_TYPE_ns1__authenticateByKerberosResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__authenticateByKerberosResponse*>(p->ptr), ns1__authenticateByKerberosResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__authenticateByKerberosResponse*>(p->ptr), ns1__authenticateByKerberosResponse);
		break;
	case SOAP_TYPE_ns1__reassignTask:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__reassignTask*>(p->ptr), ns1__reassignTask);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__reassignTask*>(p->ptr), ns1__reassignTask);
		break;
	case SOAP_TYPE_ns1__reassignTaskResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__reassignTaskResponse*>(p->ptr), ns1__reassignTaskResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__reassignTaskResponse*>(p->ptr), ns1__reassignTaskResponse);
		break;
	case SOAP_TYPE_ns1__getMyTasks:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getMyTasks*>(p->ptr), ns1__getMyTasks);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getMyTasks*>(p->ptr), ns1__getMyTasks);
		break;
	case SOAP_TYPE_ns1__batchPresentation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__batchPresentation*>(p->ptr), ns1__batchPresentation);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__batchPresentation*>(p->ptr), ns1__batchPresentation);
		break;
	case SOAP_TYPE_ns1__getMyTasksResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getMyTasksResponse*>(p->ptr), ns1__getMyTasksResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getMyTasksResponse*>(p->ptr), ns1__getMyTasksResponse);
		break;
	case SOAP_TYPE_ns1__wfTask:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__wfTask*>(p->ptr), ns1__wfTask);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__wfTask*>(p->ptr), ns1__wfTask);
		break;
	case SOAP_TYPE_ns1__wfVariable:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__wfVariable*>(p->ptr), ns1__wfVariable);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__wfVariable*>(p->ptr), ns1__wfVariable);
		break;
	case SOAP_TYPE_ns1__variableDefinition:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__variableDefinition*>(p->ptr), ns1__variableDefinition);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__variableDefinition*>(p->ptr), ns1__variableDefinition);
		break;
	case SOAP_TYPE__ns1__userType_attributesMap_entry:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__userType_attributesMap_entry*>(p->ptr), _ns1__userType_attributesMap_entry);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__userType_attributesMap_entry*>(p->ptr), _ns1__userType_attributesMap_entry);
		break;
	case SOAP_TYPE__ns1__userType_attributesMap:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__userType_attributesMap*>(p->ptr), _ns1__userType_attributesMap);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__userType_attributesMap*>(p->ptr), _ns1__userType_attributesMap);
		break;
	case SOAP_TYPE_ns1__userType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__userType*>(p->ptr), ns1__userType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__userType*>(p->ptr), ns1__userType);
		break;
	case SOAP_TYPE_ns1__markTaskOpened:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__markTaskOpened*>(p->ptr), ns1__markTaskOpened);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__markTaskOpened*>(p->ptr), ns1__markTaskOpened);
		break;
	case SOAP_TYPE_ns1__markTaskOpenedResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__markTaskOpenedResponse*>(p->ptr), ns1__markTaskOpenedResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__markTaskOpenedResponse*>(p->ptr), ns1__markTaskOpenedResponse);
		break;
	case SOAP_TYPE_ns1__assignTask:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__assignTask*>(p->ptr), ns1__assignTask);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__assignTask*>(p->ptr), ns1__assignTask);
		break;
	case SOAP_TYPE_ns1__assignTaskResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__assignTaskResponse*>(p->ptr), ns1__assignTaskResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__assignTaskResponse*>(p->ptr), ns1__assignTaskResponse);
		break;
	case SOAP_TYPE_ns1__getTasks:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getTasks*>(p->ptr), ns1__getTasks);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getTasks*>(p->ptr), ns1__getTasks);
		break;
	case SOAP_TYPE_ns1__getTasksResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getTasksResponse*>(p->ptr), ns1__getTasksResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getTasksResponse*>(p->ptr), ns1__getTasksResponse);
		break;
	case SOAP_TYPE_ns1__completeTaskWS:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__completeTaskWS*>(p->ptr), ns1__completeTaskWS);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__completeTaskWS*>(p->ptr), ns1__completeTaskWS);
		break;
	case SOAP_TYPE_ns1__variable:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__variable*>(p->ptr), ns1__variable);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__variable*>(p->ptr), ns1__variable);
		break;
	case SOAP_TYPE_ns1__completeTaskWSResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__completeTaskWSResponse*>(p->ptr), ns1__completeTaskWSResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__completeTaskWSResponse*>(p->ptr), ns1__completeTaskWSResponse);
		break;
	case SOAP_TYPE_ns1__getProcessTasks:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getProcessTasks*>(p->ptr), ns1__getProcessTasks);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getProcessTasks*>(p->ptr), ns1__getProcessTasks);
		break;
	case SOAP_TYPE_ns1__getProcessTasksResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getProcessTasksResponse*>(p->ptr), ns1__getProcessTasksResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getProcessTasksResponse*>(p->ptr), ns1__getProcessTasksResponse);
		break;
	case SOAP_TYPE_ns1__getTask:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getTask*>(p->ptr), ns1__getTask);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getTask*>(p->ptr), ns1__getTask);
		break;
	case SOAP_TYPE_ns1__getTaskResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getTaskResponse*>(p->ptr), ns1__getTaskResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getTaskResponse*>(p->ptr), ns1__getTaskResponse);
		break;
	case SOAP_TYPE_ns1__reassignTasks:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__reassignTasks*>(p->ptr), ns1__reassignTasks);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__reassignTasks*>(p->ptr), ns1__reassignTasks);
		break;
	case SOAP_TYPE_ns1__reassignTasksResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__reassignTasksResponse*>(p->ptr), ns1__reassignTasksResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__reassignTasksResponse*>(p->ptr), ns1__reassignTasksResponse);
		break;
	case SOAP_TYPE_ns1__identifiableBase:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__identifiableBase*>(p->ptr), ns1__identifiableBase);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__identifiableBase*>(p->ptr), ns1__identifiableBase);
		break;
	case SOAP_TYPE_ns1__executor:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__executor*>(p->ptr), ns1__executor);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__executor*>(p->ptr), ns1__executor);
		break;
	case SOAP_TYPE_ns1__actor:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__actor*>(p->ptr), ns1__actor);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__actor*>(p->ptr), ns1__actor);
		break;
	case SOAP_TYPE_ns1__wfExecutor:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__wfExecutor*>(p->ptr), ns1__wfExecutor);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__wfExecutor*>(p->ptr), ns1__wfExecutor);
		break;
	case SOAP_TYPE___ns1__authenticateByCallerPrincipal:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__authenticateByCallerPrincipal*>(p->ptr), struct __ns1__authenticateByCallerPrincipal);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__authenticateByCallerPrincipal*>(p->ptr), struct __ns1__authenticateByCallerPrincipal);
		break;
	case SOAP_TYPE___ns1__authenticateByLoginPassword:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__authenticateByLoginPassword*>(p->ptr), struct __ns1__authenticateByLoginPassword);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__authenticateByLoginPassword*>(p->ptr), struct __ns1__authenticateByLoginPassword);
		break;
	case SOAP_TYPE___ns1__authenticateByTrustedPrincipal:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__authenticateByTrustedPrincipal*>(p->ptr), struct __ns1__authenticateByTrustedPrincipal);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__authenticateByTrustedPrincipal*>(p->ptr), struct __ns1__authenticateByTrustedPrincipal);
		break;
	case SOAP_TYPE___ns1__authenticateByKerberos:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__authenticateByKerberos*>(p->ptr), struct __ns1__authenticateByKerberos);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__authenticateByKerberos*>(p->ptr), struct __ns1__authenticateByKerberos);
		break;
	case SOAP_TYPE___ns1__reassignTask:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__reassignTask*>(p->ptr), struct __ns1__reassignTask);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__reassignTask*>(p->ptr), struct __ns1__reassignTask);
		break;
	case SOAP_TYPE___ns1__getMyTasks:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getMyTasks*>(p->ptr), struct __ns1__getMyTasks);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getMyTasks*>(p->ptr), struct __ns1__getMyTasks);
		break;
	case SOAP_TYPE___ns1__markTaskOpenedResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__markTaskOpenedResponse*>(p->ptr), struct __ns1__markTaskOpenedResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__markTaskOpenedResponse*>(p->ptr), struct __ns1__markTaskOpenedResponse);
		break;
	case SOAP_TYPE___ns1__markTaskOpened:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__markTaskOpened*>(p->ptr), struct __ns1__markTaskOpened);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__markTaskOpened*>(p->ptr), struct __ns1__markTaskOpened);
		break;
	case SOAP_TYPE___ns1__assignTaskResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__assignTaskResponse*>(p->ptr), struct __ns1__assignTaskResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__assignTaskResponse*>(p->ptr), struct __ns1__assignTaskResponse);
		break;
	case SOAP_TYPE___ns1__assignTask:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__assignTask*>(p->ptr), struct __ns1__assignTask);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__assignTask*>(p->ptr), struct __ns1__assignTask);
		break;
	case SOAP_TYPE___ns1__getTasks:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getTasks*>(p->ptr), struct __ns1__getTasks);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getTasks*>(p->ptr), struct __ns1__getTasks);
		break;
	case SOAP_TYPE___ns1__completeTaskWSResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__completeTaskWSResponse*>(p->ptr), struct __ns1__completeTaskWSResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__completeTaskWSResponse*>(p->ptr), struct __ns1__completeTaskWSResponse);
		break;
	case SOAP_TYPE___ns1__completeTaskWS:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__completeTaskWS*>(p->ptr), struct __ns1__completeTaskWS);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__completeTaskWS*>(p->ptr), struct __ns1__completeTaskWS);
		break;
	case SOAP_TYPE___ns1__getProcessTasks:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getProcessTasks*>(p->ptr), struct __ns1__getProcessTasks);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getProcessTasks*>(p->ptr), struct __ns1__getProcessTasks);
		break;
	case SOAP_TYPE___ns1__getTask:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getTask*>(p->ptr), struct __ns1__getTask);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getTask*>(p->ptr), struct __ns1__getTask);
		break;
	case SOAP_TYPE___ns1__reassignTasks:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__reassignTasks*>(p->ptr), struct __ns1__reassignTasks);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__reassignTasks*>(p->ptr), struct __ns1__reassignTasks);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__variable:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__variable *> *>(p->ptr), std::vector<ns1__variable *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__variable *> *>(p->ptr), std::vector<ns1__variable *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns1__userType_attributesMap_entry:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<_ns1__userType_attributesMap_entry> *>(p->ptr), std::vector<_ns1__userType_attributesMap_entry> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<_ns1__userType_attributesMap_entry> *>(p->ptr), std::vector<_ns1__userType_attributesMap_entry> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__variableDefinition:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__variableDefinition *> *>(p->ptr), std::vector<ns1__variableDefinition *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__variableDefinition *> *>(p->ptr), std::vector<ns1__variableDefinition *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__userType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__userType *> *>(p->ptr), std::vector<ns1__userType *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__userType *> *>(p->ptr), std::vector<ns1__userType *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__wfVariable:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__wfVariable *> *>(p->ptr), std::vector<ns1__wfVariable *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__wfVariable *> *>(p->ptr), std::vector<ns1__wfVariable *> );
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__wfTask:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__wfTask *> *>(p->ptr), std::vector<ns1__wfTask *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__wfTask *> *>(p->ptr), std::vector<ns1__wfTask *> );
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	do
	{	switch (t)
		{

		case SOAP_TYPE_xsd__base64Binary_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__boolean: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__dateTime: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__int: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__long: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_xsd__string: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__classPresentationType_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__variableStoreType_: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__authenticateByCallerPrincipal: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__user: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__identifiable: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__authenticateByLoginPassword: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__authenticateByLoginPasswordResponse: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__authenticateByTrustedPrincipal: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__authenticateByKerberos: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__authenticateByKerberosResponse: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__reassignTask: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__reassignTaskResponse: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__getMyTasks: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__batchPresentation: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__getMyTasksResponse: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__wfTask: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__wfVariable: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__variableDefinition: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__userType: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__markTaskOpened: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__markTaskOpenedResponse: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__assignTask: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__assignTaskResponse: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__getTasks: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__getTasksResponse: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__completeTaskWS: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__variable: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__completeTaskWSResponse: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__getProcessTasks: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__getProcessTasksResponse: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__getTask: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__getTaskResponse: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__reassignTasks: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__reassignTasksResponse: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__identifiableBase: t = SOAP_TYPE_ns1__identifiable; break;
		case SOAP_TYPE_ns1__executor: t = SOAP_TYPE_ns1__identifiableBase; break;
		case SOAP_TYPE_ns1__actor: t = SOAP_TYPE_ns1__executor; break;
		case SOAP_TYPE_ns1__wfExecutor: t = SOAP_TYPE_ns1__executor; break;
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__variable:
		if (t == SOAP_TYPE_ns1__variable || soap_fbase(t, SOAP_TYPE_ns1__variable))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__variable *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__variable *> *)p)[index] = *(ns1__variable **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns1__userType_attributesMap_entry:
		if (t == SOAP_TYPE__ns1__userType_attributesMap_entry)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<_ns1__userType_attributesMap_entry>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<_ns1__userType_attributesMap_entry> *)p)[index] = *(_ns1__userType_attributesMap_entry *)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__variableDefinition:
		if (t == SOAP_TYPE_ns1__variableDefinition || soap_fbase(t, SOAP_TYPE_ns1__variableDefinition))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__variableDefinition *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__variableDefinition *> *)p)[index] = *(ns1__variableDefinition **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__userType:
		if (t == SOAP_TYPE_ns1__userType || soap_fbase(t, SOAP_TYPE_ns1__userType))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__userType *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__userType *> *)p)[index] = *(ns1__userType **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__wfVariable:
		if (t == SOAP_TYPE_ns1__wfVariable || soap_fbase(t, SOAP_TYPE_ns1__wfVariable))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__wfVariable *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__wfVariable *> *)p)[index] = *(ns1__wfVariable **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__wfTask:
		if (t == SOAP_TYPE_ns1__wfTask || soap_fbase(t, SOAP_TYPE_ns1__wfTask))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__wfTask *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__wfTask *> *)p)[index] = *(ns1__wfTask **)q;
		}
		break;
	case SOAP_TYPE_xsd__anyType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__anyType type=%d location=%p object=%p\n", t, p, q));
		*(xsd__anyType*)p = *(xsd__anyType*)q;
		break;
	case SOAP_TYPE_xsd__base64Binary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__base64Binary type=%d location=%p object=%p\n", t, p, q));
		*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
		break;
	case SOAP_TYPE_xsd__base64Binary_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__base64Binary_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__base64Binary_*)p = *(xsd__base64Binary_*)q;
		break;
	case SOAP_TYPE_xsd__boolean:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__boolean type=%d location=%p object=%p\n", t, p, q));
		*(xsd__boolean*)p = *(xsd__boolean*)q;
		break;
	case SOAP_TYPE_xsd__dateTime:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__dateTime type=%d location=%p object=%p\n", t, p, q));
		*(xsd__dateTime*)p = *(xsd__dateTime*)q;
		break;
	case SOAP_TYPE_xsd__int:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__int type=%d location=%p object=%p\n", t, p, q));
		*(xsd__int*)p = *(xsd__int*)q;
		break;
	case SOAP_TYPE_xsd__long:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__long type=%d location=%p object=%p\n", t, p, q));
		*(xsd__long*)p = *(xsd__long*)q;
		break;
	case SOAP_TYPE_xsd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__string type=%d location=%p object=%p\n", t, p, q));
		*(xsd__string*)p = *(xsd__string*)q;
		break;
	case SOAP_TYPE_ns1__classPresentationType_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__classPresentationType_ type=%d location=%p object=%p\n", t, p, q));
		*(ns1__classPresentationType_*)p = *(ns1__classPresentationType_*)q;
		break;
	case SOAP_TYPE_ns1__variableStoreType_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__variableStoreType_ type=%d location=%p object=%p\n", t, p, q));
		*(ns1__variableStoreType_*)p = *(ns1__variableStoreType_*)q;
		break;
	case SOAP_TYPE_ns1__authenticateByCallerPrincipal:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__authenticateByCallerPrincipal type=%d location=%p object=%p\n", t, p, q));
		*(ns1__authenticateByCallerPrincipal*)p = *(ns1__authenticateByCallerPrincipal*)q;
		break;
	case SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__authenticateByCallerPrincipalResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__authenticateByCallerPrincipalResponse*)p = *(ns1__authenticateByCallerPrincipalResponse*)q;
		break;
	case SOAP_TYPE_ns1__user:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__user type=%d location=%p object=%p\n", t, p, q));
		*(ns1__user*)p = *(ns1__user*)q;
		break;
	case SOAP_TYPE_ns1__identifiable:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__identifiable type=%d location=%p object=%p\n", t, p, q));
		*(ns1__identifiable*)p = *(ns1__identifiable*)q;
		break;
	case SOAP_TYPE_ns1__authenticateByLoginPassword:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__authenticateByLoginPassword type=%d location=%p object=%p\n", t, p, q));
		*(ns1__authenticateByLoginPassword*)p = *(ns1__authenticateByLoginPassword*)q;
		break;
	case SOAP_TYPE_ns1__authenticateByLoginPasswordResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__authenticateByLoginPasswordResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__authenticateByLoginPasswordResponse*)p = *(ns1__authenticateByLoginPasswordResponse*)q;
		break;
	case SOAP_TYPE_ns1__authenticateByTrustedPrincipal:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__authenticateByTrustedPrincipal type=%d location=%p object=%p\n", t, p, q));
		*(ns1__authenticateByTrustedPrincipal*)p = *(ns1__authenticateByTrustedPrincipal*)q;
		break;
	case SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__authenticateByTrustedPrincipalResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__authenticateByTrustedPrincipalResponse*)p = *(ns1__authenticateByTrustedPrincipalResponse*)q;
		break;
	case SOAP_TYPE_ns1__authenticateByKerberos:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__authenticateByKerberos type=%d location=%p object=%p\n", t, p, q));
		*(ns1__authenticateByKerberos*)p = *(ns1__authenticateByKerberos*)q;
		break;
	case SOAP_TYPE_ns1__authenticateByKerberosResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__authenticateByKerberosResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__authenticateByKerberosResponse*)p = *(ns1__authenticateByKerberosResponse*)q;
		break;
	case SOAP_TYPE_ns1__reassignTask:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__reassignTask type=%d location=%p object=%p\n", t, p, q));
		*(ns1__reassignTask*)p = *(ns1__reassignTask*)q;
		break;
	case SOAP_TYPE_ns1__reassignTaskResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__reassignTaskResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__reassignTaskResponse*)p = *(ns1__reassignTaskResponse*)q;
		break;
	case SOAP_TYPE_ns1__getMyTasks:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getMyTasks type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getMyTasks*)p = *(ns1__getMyTasks*)q;
		break;
	case SOAP_TYPE_ns1__batchPresentation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__batchPresentation type=%d location=%p object=%p\n", t, p, q));
		*(ns1__batchPresentation*)p = *(ns1__batchPresentation*)q;
		break;
	case SOAP_TYPE_ns1__getMyTasksResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getMyTasksResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getMyTasksResponse*)p = *(ns1__getMyTasksResponse*)q;
		break;
	case SOAP_TYPE_ns1__wfTask:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__wfTask type=%d location=%p object=%p\n", t, p, q));
		*(ns1__wfTask*)p = *(ns1__wfTask*)q;
		break;
	case SOAP_TYPE_ns1__wfVariable:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__wfVariable type=%d location=%p object=%p\n", t, p, q));
		*(ns1__wfVariable*)p = *(ns1__wfVariable*)q;
		break;
	case SOAP_TYPE_ns1__variableDefinition:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__variableDefinition type=%d location=%p object=%p\n", t, p, q));
		*(ns1__variableDefinition*)p = *(ns1__variableDefinition*)q;
		break;
	case SOAP_TYPE__ns1__userType_attributesMap_entry:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__userType_attributesMap_entry type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__userType_attributesMap_entry*)p = *(_ns1__userType_attributesMap_entry*)q;
		break;
	case SOAP_TYPE__ns1__userType_attributesMap:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__userType_attributesMap type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__userType_attributesMap*)p = *(_ns1__userType_attributesMap*)q;
		break;
	case SOAP_TYPE_ns1__userType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__userType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__userType*)p = *(ns1__userType*)q;
		break;
	case SOAP_TYPE_ns1__markTaskOpened:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__markTaskOpened type=%d location=%p object=%p\n", t, p, q));
		*(ns1__markTaskOpened*)p = *(ns1__markTaskOpened*)q;
		break;
	case SOAP_TYPE_ns1__markTaskOpenedResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__markTaskOpenedResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__markTaskOpenedResponse*)p = *(ns1__markTaskOpenedResponse*)q;
		break;
	case SOAP_TYPE_ns1__assignTask:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__assignTask type=%d location=%p object=%p\n", t, p, q));
		*(ns1__assignTask*)p = *(ns1__assignTask*)q;
		break;
	case SOAP_TYPE_ns1__assignTaskResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__assignTaskResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__assignTaskResponse*)p = *(ns1__assignTaskResponse*)q;
		break;
	case SOAP_TYPE_ns1__getTasks:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getTasks type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getTasks*)p = *(ns1__getTasks*)q;
		break;
	case SOAP_TYPE_ns1__getTasksResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getTasksResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getTasksResponse*)p = *(ns1__getTasksResponse*)q;
		break;
	case SOAP_TYPE_ns1__completeTaskWS:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__completeTaskWS type=%d location=%p object=%p\n", t, p, q));
		*(ns1__completeTaskWS*)p = *(ns1__completeTaskWS*)q;
		break;
	case SOAP_TYPE_ns1__variable:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__variable type=%d location=%p object=%p\n", t, p, q));
		*(ns1__variable*)p = *(ns1__variable*)q;
		break;
	case SOAP_TYPE_ns1__completeTaskWSResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__completeTaskWSResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__completeTaskWSResponse*)p = *(ns1__completeTaskWSResponse*)q;
		break;
	case SOAP_TYPE_ns1__getProcessTasks:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getProcessTasks type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getProcessTasks*)p = *(ns1__getProcessTasks*)q;
		break;
	case SOAP_TYPE_ns1__getProcessTasksResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getProcessTasksResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getProcessTasksResponse*)p = *(ns1__getProcessTasksResponse*)q;
		break;
	case SOAP_TYPE_ns1__getTask:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getTask type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getTask*)p = *(ns1__getTask*)q;
		break;
	case SOAP_TYPE_ns1__getTaskResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getTaskResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getTaskResponse*)p = *(ns1__getTaskResponse*)q;
		break;
	case SOAP_TYPE_ns1__reassignTasks:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__reassignTasks type=%d location=%p object=%p\n", t, p, q));
		*(ns1__reassignTasks*)p = *(ns1__reassignTasks*)q;
		break;
	case SOAP_TYPE_ns1__reassignTasksResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__reassignTasksResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__reassignTasksResponse*)p = *(ns1__reassignTasksResponse*)q;
		break;
	case SOAP_TYPE_ns1__identifiableBase:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__identifiableBase type=%d location=%p object=%p\n", t, p, q));
		*(ns1__identifiableBase*)p = *(ns1__identifiableBase*)q;
		break;
	case SOAP_TYPE_ns1__executor:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__executor type=%d location=%p object=%p\n", t, p, q));
		*(ns1__executor*)p = *(ns1__executor*)q;
		break;
	case SOAP_TYPE_ns1__actor:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__actor type=%d location=%p object=%p\n", t, p, q));
		*(ns1__actor*)p = *(ns1__actor*)q;
		break;
	case SOAP_TYPE_ns1__wfExecutor:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__wfExecutor type=%d location=%p object=%p\n", t, p, q));
		*(ns1__wfExecutor*)p = *(ns1__wfExecutor*)q;
		break;
	case SOAP_TYPE___ns1__authenticateByCallerPrincipal:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__authenticateByCallerPrincipal type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__authenticateByCallerPrincipal*)p = *(struct __ns1__authenticateByCallerPrincipal*)q;
		break;
	case SOAP_TYPE___ns1__authenticateByLoginPassword:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__authenticateByLoginPassword type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__authenticateByLoginPassword*)p = *(struct __ns1__authenticateByLoginPassword*)q;
		break;
	case SOAP_TYPE___ns1__authenticateByTrustedPrincipal:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__authenticateByTrustedPrincipal type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__authenticateByTrustedPrincipal*)p = *(struct __ns1__authenticateByTrustedPrincipal*)q;
		break;
	case SOAP_TYPE___ns1__authenticateByKerberos:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__authenticateByKerberos type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__authenticateByKerberos*)p = *(struct __ns1__authenticateByKerberos*)q;
		break;
	case SOAP_TYPE___ns1__reassignTask:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__reassignTask type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__reassignTask*)p = *(struct __ns1__reassignTask*)q;
		break;
	case SOAP_TYPE___ns1__getMyTasks:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getMyTasks type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getMyTasks*)p = *(struct __ns1__getMyTasks*)q;
		break;
	case SOAP_TYPE___ns1__markTaskOpenedResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__markTaskOpenedResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__markTaskOpenedResponse*)p = *(struct __ns1__markTaskOpenedResponse*)q;
		break;
	case SOAP_TYPE___ns1__markTaskOpened:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__markTaskOpened type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__markTaskOpened*)p = *(struct __ns1__markTaskOpened*)q;
		break;
	case SOAP_TYPE___ns1__assignTaskResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__assignTaskResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__assignTaskResponse*)p = *(struct __ns1__assignTaskResponse*)q;
		break;
	case SOAP_TYPE___ns1__assignTask:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__assignTask type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__assignTask*)p = *(struct __ns1__assignTask*)q;
		break;
	case SOAP_TYPE___ns1__getTasks:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getTasks type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getTasks*)p = *(struct __ns1__getTasks*)q;
		break;
	case SOAP_TYPE___ns1__completeTaskWSResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__completeTaskWSResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__completeTaskWSResponse*)p = *(struct __ns1__completeTaskWSResponse*)q;
		break;
	case SOAP_TYPE___ns1__completeTaskWS:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__completeTaskWS type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__completeTaskWS*)p = *(struct __ns1__completeTaskWS*)q;
		break;
	case SOAP_TYPE___ns1__getProcessTasks:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getProcessTasks type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getProcessTasks*)p = *(struct __ns1__getProcessTasks*)q;
		break;
	case SOAP_TYPE___ns1__getTask:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getTask type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getTask*)p = *(struct __ns1__getTask*)q;
		break;
	case SOAP_TYPE___ns1__reassignTasks:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__reassignTasks type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__reassignTasks*)p = *(struct __ns1__reassignTasks*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	a = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return a;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n)
{
	LONG64 *a = static_cast<LONG64 *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(LONG64)));
	for (LONG64 *p = a; p && n--; ++p)
		soap_default_LONG64(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	if (soap_out_LONG64(soap, tag ? tag : "long", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return a;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n)
{
	unsigned char *a = static_cast<unsigned char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned char)));
	for (unsigned char *p = a; p && n--; ++p)
		soap_default_unsignedByte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_unsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	a = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return a;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n)
{
	unsigned int *a = static_cast<unsigned int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned int)));
	for (unsigned int *p = a; p && n--; ++p)
		soap_default_unsignedInt(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	if (soap_out_unsignedInt(soap, tag ? tag : "unsignedInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_dateTime);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap *soap, const char *tag, time_t *a, const char *type)
{
	a = soap_indateTime(soap, tag, a, type, SOAP_TYPE_dateTime);
	return a;
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n)
{
	time_t *a = static_cast<time_t *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(time_t)));
	for (time_t *p = a; p && n--; ++p)
		soap_default_dateTime(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	if (soap_out_dateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_ns1__variableStoreType[] =
{	{ (LONG64)ns1__variableStoreType__DEFAULT, "DEFAULT" },
	{ (LONG64)ns1__variableStoreType__BLOB, "BLOB" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__variableStoreType2s(struct soap *soap, enum ns1__variableStoreType n)
{	const char *s = soap_code_str(soap_codes_ns1__variableStoreType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__variableStoreType(struct soap *soap, const char *tag, int id, const enum ns1__variableStoreType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__variableStoreType), type) || soap_send(soap, soap_ns1__variableStoreType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__variableStoreType(struct soap *soap, const char *s, enum ns1__variableStoreType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns1__variableStoreType, s);
	if (map)
		*a = (enum ns1__variableStoreType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (enum ns1__variableStoreType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns1__variableStoreType * SOAP_FMAC4 soap_in_ns1__variableStoreType(struct soap *soap, const char *tag, enum ns1__variableStoreType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns1__variableStoreType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__variableStoreType, sizeof(enum ns1__variableStoreType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2ns1__variableStoreType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum ns1__variableStoreType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__variableStoreType, SOAP_TYPE_ns1__variableStoreType, sizeof(enum ns1__variableStoreType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum ns1__variableStoreType * SOAP_FMAC4 soap_new_ns1__variableStoreType(struct soap *soap, int n)
{
	enum ns1__variableStoreType *a = static_cast<enum ns1__variableStoreType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum ns1__variableStoreType)));
	for (enum ns1__variableStoreType *p = a; p && n--; ++p)
		soap_default_ns1__variableStoreType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__variableStoreType(struct soap *soap, const enum ns1__variableStoreType *a, const char *tag, const char *type)
{
	if (soap_out_ns1__variableStoreType(soap, tag ? tag : "ns1:variableStoreType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns1__variableStoreType * SOAP_FMAC4 soap_get_ns1__variableStoreType(struct soap *soap, enum ns1__variableStoreType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__variableStoreType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_ns1__classPresentationType[] =
{	{ (LONG64)ns1__classPresentationType__NONE, "NONE" },
	{ (LONG64)ns1__classPresentationType__SYSTEM_USCORELOG, "SYSTEM_LOG" },
	{ (LONG64)ns1__classPresentationType__EXECUTOR, "EXECUTOR" },
	{ (LONG64)ns1__classPresentationType__ACTOR, "ACTOR" },
	{ (LONG64)ns1__classPresentationType__GROUP, "GROUP" },
	{ (LONG64)ns1__classPresentationType__RELATION, "RELATION" },
	{ (LONG64)ns1__classPresentationType__RELATIONPAIR, "RELATIONPAIR" },
	{ (LONG64)ns1__classPresentationType__DEFINITION, "DEFINITION" },
	{ (LONG64)ns1__classPresentationType__DEFINITION_USCOREHISTORY, "DEFINITION_HISTORY" },
	{ (LONG64)ns1__classPresentationType__PROCESS, "PROCESS" },
	{ (LONG64)ns1__classPresentationType__TASK, "TASK" },
	{ (LONG64)ns1__classPresentationType__TASK_USCOREOBSERVABLE, "TASK_OBSERVABLE" },
	{ (LONG64)ns1__classPresentationType__REPORTS, "REPORTS" },
	{ (LONG64)ns1__classPresentationType__PROCESS_USCOREWITH_USCORETASKS, "PROCESS_WITH_TASKS" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__classPresentationType2s(struct soap *soap, enum ns1__classPresentationType n)
{	const char *s = soap_code_str(soap_codes_ns1__classPresentationType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__classPresentationType(struct soap *soap, const char *tag, int id, const enum ns1__classPresentationType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__classPresentationType), type) || soap_send(soap, soap_ns1__classPresentationType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__classPresentationType(struct soap *soap, const char *s, enum ns1__classPresentationType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns1__classPresentationType, s);
	if (map)
		*a = (enum ns1__classPresentationType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 13)
			return soap->error = SOAP_TYPE;
		*a = (enum ns1__classPresentationType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns1__classPresentationType * SOAP_FMAC4 soap_in_ns1__classPresentationType(struct soap *soap, const char *tag, enum ns1__classPresentationType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns1__classPresentationType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__classPresentationType, sizeof(enum ns1__classPresentationType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2ns1__classPresentationType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum ns1__classPresentationType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__classPresentationType, SOAP_TYPE_ns1__classPresentationType, sizeof(enum ns1__classPresentationType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum ns1__classPresentationType * SOAP_FMAC4 soap_new_ns1__classPresentationType(struct soap *soap, int n)
{
	enum ns1__classPresentationType *a = static_cast<enum ns1__classPresentationType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum ns1__classPresentationType)));
	for (enum ns1__classPresentationType *p = a; p && n--; ++p)
		soap_default_ns1__classPresentationType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__classPresentationType(struct soap *soap, const enum ns1__classPresentationType *a, const char *tag, const char *type)
{
	if (soap_out_ns1__classPresentationType(soap, tag ? tag : "ns1:classPresentationType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns1__classPresentationType * SOAP_FMAC4 soap_get_ns1__classPresentationType(struct soap *soap, enum ns1__classPresentationType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__classPresentationType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2bool(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__userType_attributesMap_entry::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__userType_attributesMap_entry::key = NULL;
	this->_ns1__userType_attributesMap_entry::value = NULL;
}

void _ns1__userType_attributesMap_entry::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->_ns1__userType_attributesMap_entry::key);
	soap_serialize_PointerTons1__variableDefinition(soap, &this->_ns1__userType_attributesMap_entry::value);
#endif
}

int _ns1__userType_attributesMap_entry::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__userType_attributesMap_entry(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__userType_attributesMap_entry(struct soap *soap, const char *tag, int id, const _ns1__userType_attributesMap_entry *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__userType_attributesMap_entry), type))
		return soap->error;
	if (soap_out_wstring(soap, "key", -1, (wchar_t*const*)&a->_ns1__userType_attributesMap_entry::key, ""))
		return soap->error;
	if (soap_out_PointerTons1__variableDefinition(soap, "value", -1, &a->_ns1__userType_attributesMap_entry::value, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__userType_attributesMap_entry::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__userType_attributesMap_entry(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__userType_attributesMap_entry * SOAP_FMAC4 soap_in__ns1__userType_attributesMap_entry(struct soap *soap, const char *tag, _ns1__userType_attributesMap_entry *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__userType_attributesMap_entry *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__userType_attributesMap_entry, sizeof(_ns1__userType_attributesMap_entry), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__userType_attributesMap_entry)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__userType_attributesMap_entry *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_key1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_key1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "key", (wchar_t**)&a->_ns1__userType_attributesMap_entry::key, "xsd:string"))
				{	soap_flag_key1--;
					continue;
				}
			}
			if (soap_flag_value1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__variableDefinition(soap, "value", &a->_ns1__userType_attributesMap_entry::value, "ns1:variableDefinition"))
				{	soap_flag_value1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__userType_attributesMap_entry *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__userType_attributesMap_entry, SOAP_TYPE__ns1__userType_attributesMap_entry, sizeof(_ns1__userType_attributesMap_entry), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__userType_attributesMap_entry * SOAP_FMAC2 soap_instantiate__ns1__userType_attributesMap_entry(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__userType_attributesMap_entry(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__userType_attributesMap_entry *p;
	size_t k = sizeof(_ns1__userType_attributesMap_entry);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__userType_attributesMap_entry, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__userType_attributesMap_entry);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__userType_attributesMap_entry, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__userType_attributesMap_entry location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__userType_attributesMap_entry::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__userType_attributesMap_entry(soap, tag ? tag : "ns1:userType-attributesMap-entry", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__userType_attributesMap_entry::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__userType_attributesMap_entry(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__userType_attributesMap_entry * SOAP_FMAC4 soap_get__ns1__userType_attributesMap_entry(struct soap *soap, _ns1__userType_attributesMap_entry *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__userType_attributesMap_entry(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__userType_attributesMap::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOf_ns1__userType_attributesMap_entry(soap, &this->_ns1__userType_attributesMap::entry);
}

void _ns1__userType_attributesMap::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_ns1__userType_attributesMap_entry(soap, &this->_ns1__userType_attributesMap::entry);
#endif
}

int _ns1__userType_attributesMap::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__userType_attributesMap(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__userType_attributesMap(struct soap *soap, const char *tag, int id, const _ns1__userType_attributesMap *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__userType_attributesMap), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_ns1__userType_attributesMap_entry(soap, "entry", -1, &a->_ns1__userType_attributesMap::entry, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__userType_attributesMap::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__userType_attributesMap(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__userType_attributesMap * SOAP_FMAC4 soap_in__ns1__userType_attributesMap(struct soap *soap, const char *tag, _ns1__userType_attributesMap *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__userType_attributesMap *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__userType_attributesMap, sizeof(_ns1__userType_attributesMap), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__userType_attributesMap)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__userType_attributesMap *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOf_ns1__userType_attributesMap_entry(soap, "entry", &a->_ns1__userType_attributesMap::entry, ""))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__userType_attributesMap *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__userType_attributesMap, SOAP_TYPE__ns1__userType_attributesMap, sizeof(_ns1__userType_attributesMap), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__userType_attributesMap * SOAP_FMAC2 soap_instantiate__ns1__userType_attributesMap(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__userType_attributesMap(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__userType_attributesMap *p;
	size_t k = sizeof(_ns1__userType_attributesMap);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__userType_attributesMap, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__userType_attributesMap);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__userType_attributesMap, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__userType_attributesMap location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__userType_attributesMap::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__userType_attributesMap(soap, tag ? tag : "ns1:userType-attributesMap", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__userType_attributesMap::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__userType_attributesMap(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__userType_attributesMap * SOAP_FMAC4 soap_get__ns1__userType_attributesMap(struct soap *soap, _ns1__userType_attributesMap *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__userType_attributesMap(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__variableStoreType_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ns1__variableStoreType(soap, &this->ns1__variableStoreType_::__item);
}

void ns1__variableStoreType_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__variableStoreType_::__item, SOAP_TYPE_ns1__variableStoreType);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__variableStoreType_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__variableStoreType_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__variableStoreType_(struct soap *soap, const char *tag, int id, const ns1__variableStoreType_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns1__variableStoreType(soap, tag, id, &a->ns1__variableStoreType_::__item, "ns1:variableStoreType");
}

void *ns1__variableStoreType_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__variableStoreType_(soap, tag, this, type);
}

SOAP_FMAC3 ns1__variableStoreType_ * SOAP_FMAC4 soap_in_ns1__variableStoreType_(struct soap *soap, const char *tag, ns1__variableStoreType_ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns1__variableStoreType_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__variableStoreType_, sizeof(ns1__variableStoreType_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__variableStoreType_)
		return (ns1__variableStoreType_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ns1__variableStoreType(soap, tag, &a->ns1__variableStoreType_::__item, "ns1:variableStoreType"))
		return NULL;
	return a;
}

SOAP_FMAC1 ns1__variableStoreType_ * SOAP_FMAC2 soap_instantiate_ns1__variableStoreType_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__variableStoreType_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__variableStoreType_ *p;
	size_t k = sizeof(ns1__variableStoreType_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__variableStoreType_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__variableStoreType_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__variableStoreType_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__variableStoreType_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__variableStoreType_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__variableStoreType_(soap, tag ? tag : "ns1:variableStoreType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__variableStoreType_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__variableStoreType_(soap, this, tag, type);
}

SOAP_FMAC3 ns1__variableStoreType_ * SOAP_FMAC4 soap_get_ns1__variableStoreType_(struct soap *soap, ns1__variableStoreType_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__variableStoreType_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__classPresentationType_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ns1__classPresentationType(soap, &this->ns1__classPresentationType_::__item);
}

void ns1__classPresentationType_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__classPresentationType_::__item, SOAP_TYPE_ns1__classPresentationType);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__classPresentationType_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__classPresentationType_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__classPresentationType_(struct soap *soap, const char *tag, int id, const ns1__classPresentationType_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns1__classPresentationType(soap, tag, id, &a->ns1__classPresentationType_::__item, "ns1:classPresentationType");
}

void *ns1__classPresentationType_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__classPresentationType_(soap, tag, this, type);
}

SOAP_FMAC3 ns1__classPresentationType_ * SOAP_FMAC4 soap_in_ns1__classPresentationType_(struct soap *soap, const char *tag, ns1__classPresentationType_ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns1__classPresentationType_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__classPresentationType_, sizeof(ns1__classPresentationType_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__classPresentationType_)
		return (ns1__classPresentationType_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ns1__classPresentationType(soap, tag, &a->ns1__classPresentationType_::__item, "ns1:classPresentationType"))
		return NULL;
	return a;
}

SOAP_FMAC1 ns1__classPresentationType_ * SOAP_FMAC2 soap_instantiate_ns1__classPresentationType_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__classPresentationType_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__classPresentationType_ *p;
	size_t k = sizeof(ns1__classPresentationType_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__classPresentationType_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__classPresentationType_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__classPresentationType_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__classPresentationType_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__classPresentationType_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__classPresentationType_(soap, tag ? tag : "ns1:classPresentationType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__classPresentationType_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__classPresentationType_(soap, this, tag, type);
}

SOAP_FMAC3 ns1__classPresentationType_ * SOAP_FMAC4 soap_get_ns1__classPresentationType_(struct soap *soap, ns1__classPresentationType_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__classPresentationType_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__reassignTasksResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_int(soap, &this->ns1__reassignTasksResponse::result);
}

void ns1__reassignTasksResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__reassignTasksResponse::result, SOAP_TYPE_int);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__reassignTasksResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__reassignTasksResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reassignTasksResponse(struct soap *soap, const char *tag, int id, const ns1__reassignTasksResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__reassignTasksResponse), type ? type : "ns1:reassignTasksResponse"))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->ns1__reassignTasksResponse::result, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__reassignTasksResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__reassignTasksResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__reassignTasksResponse * SOAP_FMAC4 soap_in_ns1__reassignTasksResponse(struct soap *soap, const char *tag, ns1__reassignTasksResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__reassignTasksResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__reassignTasksResponse, sizeof(ns1__reassignTasksResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__reassignTasksResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__reassignTasksResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "result", &a->ns1__reassignTasksResponse::result, "xsd:int"))
				{	soap_flag_result1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__reassignTasksResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__reassignTasksResponse, SOAP_TYPE_ns1__reassignTasksResponse, sizeof(ns1__reassignTasksResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__reassignTasksResponse * SOAP_FMAC2 soap_instantiate_ns1__reassignTasksResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__reassignTasksResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__reassignTasksResponse *p;
	size_t k = sizeof(ns1__reassignTasksResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__reassignTasksResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__reassignTasksResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__reassignTasksResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__reassignTasksResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__reassignTasksResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__reassignTasksResponse(soap, tag ? tag : "ns1:reassignTasksResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__reassignTasksResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__reassignTasksResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__reassignTasksResponse * SOAP_FMAC4 soap_get_ns1__reassignTasksResponse(struct soap *soap, ns1__reassignTasksResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__reassignTasksResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__reassignTasks::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__reassignTasks::user = NULL;
	this->ns1__reassignTasks::batchPresentation = NULL;
}

void ns1__reassignTasks::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__user(soap, &this->ns1__reassignTasks::user);
	soap_serialize_PointerTons1__batchPresentation(soap, &this->ns1__reassignTasks::batchPresentation);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__reassignTasks::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__reassignTasks(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reassignTasks(struct soap *soap, const char *tag, int id, const ns1__reassignTasks *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__reassignTasks), type ? type : "ns1:reassignTasks"))
		return soap->error;
	if (soap_out_PointerTons1__user(soap, "user", -1, &a->ns1__reassignTasks::user, ""))
		return soap->error;
	if (soap_out_PointerTons1__batchPresentation(soap, "batchPresentation", -1, &a->ns1__reassignTasks::batchPresentation, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__reassignTasks::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__reassignTasks(soap, tag, this, type);
}

SOAP_FMAC3 ns1__reassignTasks * SOAP_FMAC4 soap_in_ns1__reassignTasks(struct soap *soap, const char *tag, ns1__reassignTasks *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__reassignTasks *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__reassignTasks, sizeof(ns1__reassignTasks), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__reassignTasks)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__reassignTasks *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_user1 = 1;
	size_t soap_flag_batchPresentation1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__user(soap, "user", &a->ns1__reassignTasks::user, "ns1:user"))
				{	soap_flag_user1--;
					continue;
				}
			}
			if (soap_flag_batchPresentation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__batchPresentation(soap, "batchPresentation", &a->ns1__reassignTasks::batchPresentation, "ns1:batchPresentation"))
				{	soap_flag_batchPresentation1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__reassignTasks *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__reassignTasks, SOAP_TYPE_ns1__reassignTasks, sizeof(ns1__reassignTasks), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__reassignTasks * SOAP_FMAC2 soap_instantiate_ns1__reassignTasks(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__reassignTasks(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__reassignTasks *p;
	size_t k = sizeof(ns1__reassignTasks);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__reassignTasks, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__reassignTasks);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__reassignTasks, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__reassignTasks location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__reassignTasks::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__reassignTasks(soap, tag ? tag : "ns1:reassignTasks", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__reassignTasks::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__reassignTasks(soap, this, tag, type);
}

SOAP_FMAC3 ns1__reassignTasks * SOAP_FMAC4 soap_get_ns1__reassignTasks(struct soap *soap, ns1__reassignTasks *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__reassignTasks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getTaskResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__getTaskResponse::result = NULL;
}

void ns1__getTaskResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__wfTask(soap, &this->ns1__getTaskResponse::result);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__getTaskResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getTaskResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTaskResponse(struct soap *soap, const char *tag, int id, const ns1__getTaskResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getTaskResponse), type ? type : "ns1:getTaskResponse"))
		return soap->error;
	if (soap_out_PointerTons1__wfTask(soap, "result", -1, &a->ns1__getTaskResponse::result, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getTaskResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getTaskResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getTaskResponse * SOAP_FMAC4 soap_in_ns1__getTaskResponse(struct soap *soap, const char *tag, ns1__getTaskResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getTaskResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getTaskResponse, sizeof(ns1__getTaskResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getTaskResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getTaskResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__wfTask(soap, "result", &a->ns1__getTaskResponse::result, "ns1:wfTask"))
				{	soap_flag_result1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getTaskResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getTaskResponse, SOAP_TYPE_ns1__getTaskResponse, sizeof(ns1__getTaskResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getTaskResponse * SOAP_FMAC2 soap_instantiate_ns1__getTaskResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getTaskResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getTaskResponse *p;
	size_t k = sizeof(ns1__getTaskResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getTaskResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getTaskResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getTaskResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getTaskResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getTaskResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getTaskResponse(soap, tag ? tag : "ns1:getTaskResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getTaskResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getTaskResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getTaskResponse * SOAP_FMAC4 soap_get_ns1__getTaskResponse(struct soap *soap, ns1__getTaskResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getTask::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__getTask::user = NULL;
	this->ns1__getTask::taskId = NULL;
}

void ns1__getTask::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__user(soap, &this->ns1__getTask::user);
	soap_serialize_PointerToLONG64(soap, &this->ns1__getTask::taskId);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__getTask::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getTask(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTask(struct soap *soap, const char *tag, int id, const ns1__getTask *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getTask), type ? type : "ns1:getTask"))
		return soap->error;
	if (soap_out_PointerTons1__user(soap, "user", -1, &a->ns1__getTask::user, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "taskId", -1, &a->ns1__getTask::taskId, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getTask::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getTask(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getTask * SOAP_FMAC4 soap_in_ns1__getTask(struct soap *soap, const char *tag, ns1__getTask *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getTask *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getTask, sizeof(ns1__getTask), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getTask)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getTask *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_user1 = 1;
	size_t soap_flag_taskId1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__user(soap, "user", &a->ns1__getTask::user, "ns1:user"))
				{	soap_flag_user1--;
					continue;
				}
			}
			if (soap_flag_taskId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "taskId", &a->ns1__getTask::taskId, "xsd:long"))
				{	soap_flag_taskId1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getTask *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getTask, SOAP_TYPE_ns1__getTask, sizeof(ns1__getTask), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getTask * SOAP_FMAC2 soap_instantiate_ns1__getTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getTask(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getTask *p;
	size_t k = sizeof(ns1__getTask);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getTask, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getTask);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getTask, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getTask location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getTask::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getTask(soap, tag ? tag : "ns1:getTask", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getTask::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getTask(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getTask * SOAP_FMAC4 soap_get_ns1__getTask(struct soap *soap, ns1__getTask *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getProcessTasksResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOfPointerTons1__wfTask(soap, &this->ns1__getProcessTasksResponse::result);
}

void ns1__getProcessTasksResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__wfTask(soap, &this->ns1__getProcessTasksResponse::result);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__getProcessTasksResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getProcessTasksResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getProcessTasksResponse(struct soap *soap, const char *tag, int id, const ns1__getProcessTasksResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getProcessTasksResponse), type ? type : "ns1:getProcessTasksResponse"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__wfTask(soap, "result", -1, &a->ns1__getProcessTasksResponse::result, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getProcessTasksResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getProcessTasksResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getProcessTasksResponse * SOAP_FMAC4 soap_in_ns1__getProcessTasksResponse(struct soap *soap, const char *tag, ns1__getProcessTasksResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getProcessTasksResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getProcessTasksResponse, sizeof(ns1__getProcessTasksResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getProcessTasksResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getProcessTasksResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__wfTask(soap, "result", &a->ns1__getProcessTasksResponse::result, "ns1:wfTask"))
					continue;
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getProcessTasksResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getProcessTasksResponse, SOAP_TYPE_ns1__getProcessTasksResponse, sizeof(ns1__getProcessTasksResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getProcessTasksResponse * SOAP_FMAC2 soap_instantiate_ns1__getProcessTasksResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getProcessTasksResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getProcessTasksResponse *p;
	size_t k = sizeof(ns1__getProcessTasksResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getProcessTasksResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getProcessTasksResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getProcessTasksResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getProcessTasksResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getProcessTasksResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getProcessTasksResponse(soap, tag ? tag : "ns1:getProcessTasksResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getProcessTasksResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getProcessTasksResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getProcessTasksResponse * SOAP_FMAC4 soap_get_ns1__getProcessTasksResponse(struct soap *soap, ns1__getProcessTasksResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getProcessTasksResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getProcessTasks::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__getProcessTasks::user = NULL;
	this->ns1__getProcessTasks::processId = NULL;
	soap_default_bool(soap, &this->ns1__getProcessTasks::includeSubprocesses);
}

void ns1__getProcessTasks::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__user(soap, &this->ns1__getProcessTasks::user);
	soap_serialize_PointerToLONG64(soap, &this->ns1__getProcessTasks::processId);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__getProcessTasks::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getProcessTasks(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getProcessTasks(struct soap *soap, const char *tag, int id, const ns1__getProcessTasks *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getProcessTasks), type ? type : "ns1:getProcessTasks"))
		return soap->error;
	if (soap_out_PointerTons1__user(soap, "user", -1, &a->ns1__getProcessTasks::user, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "processId", -1, &a->ns1__getProcessTasks::processId, ""))
		return soap->error;
	if (soap_out_bool(soap, "includeSubprocesses", -1, &a->ns1__getProcessTasks::includeSubprocesses, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getProcessTasks::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getProcessTasks(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getProcessTasks * SOAP_FMAC4 soap_in_ns1__getProcessTasks(struct soap *soap, const char *tag, ns1__getProcessTasks *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getProcessTasks *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getProcessTasks, sizeof(ns1__getProcessTasks), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getProcessTasks)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getProcessTasks *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_user1 = 1;
	size_t soap_flag_processId1 = 1;
	size_t soap_flag_includeSubprocesses1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__user(soap, "user", &a->ns1__getProcessTasks::user, "ns1:user"))
				{	soap_flag_user1--;
					continue;
				}
			}
			if (soap_flag_processId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "processId", &a->ns1__getProcessTasks::processId, "xsd:long"))
				{	soap_flag_processId1--;
					continue;
				}
			}
			if (soap_flag_includeSubprocesses1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "includeSubprocesses", &a->ns1__getProcessTasks::includeSubprocesses, "xsd:boolean"))
				{	soap_flag_includeSubprocesses1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_includeSubprocesses1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__getProcessTasks *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getProcessTasks, SOAP_TYPE_ns1__getProcessTasks, sizeof(ns1__getProcessTasks), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getProcessTasks * SOAP_FMAC2 soap_instantiate_ns1__getProcessTasks(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getProcessTasks(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getProcessTasks *p;
	size_t k = sizeof(ns1__getProcessTasks);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getProcessTasks, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getProcessTasks);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getProcessTasks, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getProcessTasks location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getProcessTasks::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getProcessTasks(soap, tag ? tag : "ns1:getProcessTasks", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getProcessTasks::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getProcessTasks(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getProcessTasks * SOAP_FMAC4 soap_get_ns1__getProcessTasks(struct soap *soap, ns1__getProcessTasks *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getProcessTasks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__completeTaskWSResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
}

void ns1__completeTaskWSResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__completeTaskWSResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__completeTaskWSResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__completeTaskWSResponse(struct soap *soap, const char *tag, int id, const ns1__completeTaskWSResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_outliteral(soap, tag, (char*const*)&a->xsd__anyType::__item, "ns1:completeTaskWSResponse");
}

void *ns1__completeTaskWSResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__completeTaskWSResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__completeTaskWSResponse * SOAP_FMAC4 soap_in_ns1__completeTaskWSResponse(struct soap *soap, const char *tag, ns1__completeTaskWSResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns1__completeTaskWSResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__completeTaskWSResponse, sizeof(ns1__completeTaskWSResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__completeTaskWSResponse)
		return (ns1__completeTaskWSResponse *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_inliteral(soap, tag, (char**)&a->xsd__anyType::__item))
		return NULL;
	return a;
}

SOAP_FMAC1 ns1__completeTaskWSResponse * SOAP_FMAC2 soap_instantiate_ns1__completeTaskWSResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__completeTaskWSResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__completeTaskWSResponse *p;
	size_t k = sizeof(ns1__completeTaskWSResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__completeTaskWSResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__completeTaskWSResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__completeTaskWSResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__completeTaskWSResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__completeTaskWSResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__completeTaskWSResponse(soap, tag ? tag : "ns1:completeTaskWSResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__completeTaskWSResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__completeTaskWSResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__completeTaskWSResponse * SOAP_FMAC4 soap_get_ns1__completeTaskWSResponse(struct soap *soap, ns1__completeTaskWSResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__completeTaskWSResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__variable::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__variable::name = NULL;
	this->ns1__variable::scriptingName = NULL;
	this->ns1__variable::format = NULL;
	this->ns1__variable::value = NULL;
}

void ns1__variable::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__variable::name);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__variable::scriptingName);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__variable::format);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__variable::value);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__variable::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__variable(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__variable(struct soap *soap, const char *tag, int id, const ns1__variable *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__variable), type ? type : "ns1:variable"))
		return soap->error;
	if (soap_out_wstring(soap, "name", -1, (wchar_t*const*)&a->ns1__variable::name, ""))
		return soap->error;
	if (soap_out_wstring(soap, "scriptingName", -1, (wchar_t*const*)&a->ns1__variable::scriptingName, ""))
		return soap->error;
	if (soap_out_wstring(soap, "format", -1, (wchar_t*const*)&a->ns1__variable::format, ""))
		return soap->error;
	if (soap_out_wstring(soap, "value", -1, (wchar_t*const*)&a->ns1__variable::value, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__variable::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__variable(soap, tag, this, type);
}

SOAP_FMAC3 ns1__variable * SOAP_FMAC4 soap_in_ns1__variable(struct soap *soap, const char *tag, ns1__variable *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__variable *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__variable, sizeof(ns1__variable), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__variable)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__variable *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_scriptingName1 = 1;
	size_t soap_flag_format1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "name", (wchar_t**)&a->ns1__variable::name, "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap_flag_scriptingName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "scriptingName", (wchar_t**)&a->ns1__variable::scriptingName, "xsd:string"))
				{	soap_flag_scriptingName1--;
					continue;
				}
			}
			if (soap_flag_format1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "format", (wchar_t**)&a->ns1__variable::format, "xsd:string"))
				{	soap_flag_format1--;
					continue;
				}
			}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "value", (wchar_t**)&a->ns1__variable::value, "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__variable *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__variable, SOAP_TYPE_ns1__variable, sizeof(ns1__variable), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__variable * SOAP_FMAC2 soap_instantiate_ns1__variable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__variable(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__variable *p;
	size_t k = sizeof(ns1__variable);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__variable, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__variable);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__variable, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__variable location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__variable::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__variable(soap, tag ? tag : "ns1:variable", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__variable::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__variable(soap, this, tag, type);
}

SOAP_FMAC3 ns1__variable * SOAP_FMAC4 soap_get_ns1__variable(struct soap *soap, ns1__variable *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__variable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__completeTaskWS::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__completeTaskWS::user = NULL;
	this->ns1__completeTaskWS::taskId = NULL;
	soap_default_std__vectorTemplateOfPointerTons1__variable(soap, &this->ns1__completeTaskWS::variables);
	this->ns1__completeTaskWS::swimlaneActorId = NULL;
}

void ns1__completeTaskWS::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__user(soap, &this->ns1__completeTaskWS::user);
	soap_serialize_PointerToLONG64(soap, &this->ns1__completeTaskWS::taskId);
	soap_serialize_std__vectorTemplateOfPointerTons1__variable(soap, &this->ns1__completeTaskWS::variables);
	soap_serialize_PointerToLONG64(soap, &this->ns1__completeTaskWS::swimlaneActorId);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__completeTaskWS::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__completeTaskWS(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__completeTaskWS(struct soap *soap, const char *tag, int id, const ns1__completeTaskWS *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__completeTaskWS), type ? type : "ns1:completeTaskWS"))
		return soap->error;
	if (soap_out_PointerTons1__user(soap, "user", -1, &a->ns1__completeTaskWS::user, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "taskId", -1, &a->ns1__completeTaskWS::taskId, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__variable(soap, "variables", -1, &a->ns1__completeTaskWS::variables, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "swimlaneActorId", -1, &a->ns1__completeTaskWS::swimlaneActorId, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__completeTaskWS::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__completeTaskWS(soap, tag, this, type);
}

SOAP_FMAC3 ns1__completeTaskWS * SOAP_FMAC4 soap_in_ns1__completeTaskWS(struct soap *soap, const char *tag, ns1__completeTaskWS *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__completeTaskWS *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__completeTaskWS, sizeof(ns1__completeTaskWS), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__completeTaskWS)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__completeTaskWS *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_user1 = 1;
	size_t soap_flag_taskId1 = 1;
	size_t soap_flag_swimlaneActorId1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__user(soap, "user", &a->ns1__completeTaskWS::user, "ns1:user"))
				{	soap_flag_user1--;
					continue;
				}
			}
			if (soap_flag_taskId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "taskId", &a->ns1__completeTaskWS::taskId, "xsd:long"))
				{	soap_flag_taskId1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__variable(soap, "variables", &a->ns1__completeTaskWS::variables, "ns1:variable"))
					continue;
			}
			if (soap_flag_swimlaneActorId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "swimlaneActorId", &a->ns1__completeTaskWS::swimlaneActorId, "xsd:long"))
				{	soap_flag_swimlaneActorId1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__completeTaskWS *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__completeTaskWS, SOAP_TYPE_ns1__completeTaskWS, sizeof(ns1__completeTaskWS), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__completeTaskWS * SOAP_FMAC2 soap_instantiate_ns1__completeTaskWS(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__completeTaskWS(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__completeTaskWS *p;
	size_t k = sizeof(ns1__completeTaskWS);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__completeTaskWS, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__completeTaskWS);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__completeTaskWS, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__completeTaskWS location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__completeTaskWS::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__completeTaskWS(soap, tag ? tag : "ns1:completeTaskWS", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__completeTaskWS::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__completeTaskWS(soap, this, tag, type);
}

SOAP_FMAC3 ns1__completeTaskWS * SOAP_FMAC4 soap_get_ns1__completeTaskWS(struct soap *soap, ns1__completeTaskWS *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__completeTaskWS(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getTasksResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOfPointerTons1__wfTask(soap, &this->ns1__getTasksResponse::result);
}

void ns1__getTasksResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__wfTask(soap, &this->ns1__getTasksResponse::result);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__getTasksResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getTasksResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTasksResponse(struct soap *soap, const char *tag, int id, const ns1__getTasksResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getTasksResponse), type ? type : "ns1:getTasksResponse"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__wfTask(soap, "result", -1, &a->ns1__getTasksResponse::result, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getTasksResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getTasksResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getTasksResponse * SOAP_FMAC4 soap_in_ns1__getTasksResponse(struct soap *soap, const char *tag, ns1__getTasksResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getTasksResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getTasksResponse, sizeof(ns1__getTasksResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getTasksResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getTasksResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__wfTask(soap, "result", &a->ns1__getTasksResponse::result, "ns1:wfTask"))
					continue;
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getTasksResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getTasksResponse, SOAP_TYPE_ns1__getTasksResponse, sizeof(ns1__getTasksResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getTasksResponse * SOAP_FMAC2 soap_instantiate_ns1__getTasksResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getTasksResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getTasksResponse *p;
	size_t k = sizeof(ns1__getTasksResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getTasksResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getTasksResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getTasksResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getTasksResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getTasksResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getTasksResponse(soap, tag ? tag : "ns1:getTasksResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getTasksResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getTasksResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getTasksResponse * SOAP_FMAC4 soap_get_ns1__getTasksResponse(struct soap *soap, ns1__getTasksResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getTasksResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getTasks::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__getTasks::user = NULL;
	this->ns1__getTasks::batchPresentation = NULL;
}

void ns1__getTasks::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__user(soap, &this->ns1__getTasks::user);
	soap_serialize_PointerTons1__batchPresentation(soap, &this->ns1__getTasks::batchPresentation);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__getTasks::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getTasks(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTasks(struct soap *soap, const char *tag, int id, const ns1__getTasks *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getTasks), type ? type : "ns1:getTasks"))
		return soap->error;
	if (soap_out_PointerTons1__user(soap, "user", -1, &a->ns1__getTasks::user, ""))
		return soap->error;
	if (soap_out_PointerTons1__batchPresentation(soap, "batchPresentation", -1, &a->ns1__getTasks::batchPresentation, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getTasks::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getTasks(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getTasks * SOAP_FMAC4 soap_in_ns1__getTasks(struct soap *soap, const char *tag, ns1__getTasks *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getTasks *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getTasks, sizeof(ns1__getTasks), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getTasks)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getTasks *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_user1 = 1;
	size_t soap_flag_batchPresentation1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__user(soap, "user", &a->ns1__getTasks::user, "ns1:user"))
				{	soap_flag_user1--;
					continue;
				}
			}
			if (soap_flag_batchPresentation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__batchPresentation(soap, "batchPresentation", &a->ns1__getTasks::batchPresentation, "ns1:batchPresentation"))
				{	soap_flag_batchPresentation1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getTasks *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getTasks, SOAP_TYPE_ns1__getTasks, sizeof(ns1__getTasks), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getTasks * SOAP_FMAC2 soap_instantiate_ns1__getTasks(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getTasks(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getTasks *p;
	size_t k = sizeof(ns1__getTasks);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getTasks, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getTasks);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getTasks, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getTasks location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getTasks::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getTasks(soap, tag ? tag : "ns1:getTasks", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getTasks::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getTasks(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getTasks * SOAP_FMAC4 soap_get_ns1__getTasks(struct soap *soap, ns1__getTasks *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getTasks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__assignTaskResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
}

void ns1__assignTaskResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__assignTaskResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__assignTaskResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__assignTaskResponse(struct soap *soap, const char *tag, int id, const ns1__assignTaskResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_outliteral(soap, tag, (char*const*)&a->xsd__anyType::__item, "ns1:assignTaskResponse");
}

void *ns1__assignTaskResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__assignTaskResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__assignTaskResponse * SOAP_FMAC4 soap_in_ns1__assignTaskResponse(struct soap *soap, const char *tag, ns1__assignTaskResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns1__assignTaskResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__assignTaskResponse, sizeof(ns1__assignTaskResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__assignTaskResponse)
		return (ns1__assignTaskResponse *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_inliteral(soap, tag, (char**)&a->xsd__anyType::__item))
		return NULL;
	return a;
}

SOAP_FMAC1 ns1__assignTaskResponse * SOAP_FMAC2 soap_instantiate_ns1__assignTaskResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__assignTaskResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__assignTaskResponse *p;
	size_t k = sizeof(ns1__assignTaskResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__assignTaskResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__assignTaskResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__assignTaskResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__assignTaskResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__assignTaskResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__assignTaskResponse(soap, tag ? tag : "ns1:assignTaskResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__assignTaskResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__assignTaskResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__assignTaskResponse * SOAP_FMAC4 soap_get_ns1__assignTaskResponse(struct soap *soap, ns1__assignTaskResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__assignTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__assignTask::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__assignTask::user = NULL;
	this->ns1__assignTask::taskId = NULL;
	this->ns1__assignTask::previousOwner = NULL;
	this->ns1__assignTask::newExecutor = NULL;
}

void ns1__assignTask::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__user(soap, &this->ns1__assignTask::user);
	soap_serialize_PointerToLONG64(soap, &this->ns1__assignTask::taskId);
	soap_serialize_PointerTons1__wfExecutor(soap, &this->ns1__assignTask::previousOwner);
	soap_serialize_PointerTons1__wfExecutor(soap, &this->ns1__assignTask::newExecutor);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__assignTask::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__assignTask(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__assignTask(struct soap *soap, const char *tag, int id, const ns1__assignTask *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__assignTask), type ? type : "ns1:assignTask"))
		return soap->error;
	if (soap_out_PointerTons1__user(soap, "user", -1, &a->ns1__assignTask::user, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "taskId", -1, &a->ns1__assignTask::taskId, ""))
		return soap->error;
	if (soap_out_PointerTons1__wfExecutor(soap, "previousOwner", -1, &a->ns1__assignTask::previousOwner, ""))
		return soap->error;
	if (soap_out_PointerTons1__wfExecutor(soap, "newExecutor", -1, &a->ns1__assignTask::newExecutor, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__assignTask::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__assignTask(soap, tag, this, type);
}

SOAP_FMAC3 ns1__assignTask * SOAP_FMAC4 soap_in_ns1__assignTask(struct soap *soap, const char *tag, ns1__assignTask *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__assignTask *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__assignTask, sizeof(ns1__assignTask), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__assignTask)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__assignTask *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_user1 = 1;
	size_t soap_flag_taskId1 = 1;
	size_t soap_flag_previousOwner1 = 1;
	size_t soap_flag_newExecutor1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__user(soap, "user", &a->ns1__assignTask::user, "ns1:user"))
				{	soap_flag_user1--;
					continue;
				}
			}
			if (soap_flag_taskId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "taskId", &a->ns1__assignTask::taskId, "xsd:long"))
				{	soap_flag_taskId1--;
					continue;
				}
			}
			if (soap_flag_previousOwner1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__wfExecutor(soap, "previousOwner", &a->ns1__assignTask::previousOwner, "ns1:wfExecutor"))
				{	soap_flag_previousOwner1--;
					continue;
				}
			}
			if (soap_flag_newExecutor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__wfExecutor(soap, "newExecutor", &a->ns1__assignTask::newExecutor, "ns1:wfExecutor"))
				{	soap_flag_newExecutor1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__assignTask *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__assignTask, SOAP_TYPE_ns1__assignTask, sizeof(ns1__assignTask), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__assignTask * SOAP_FMAC2 soap_instantiate_ns1__assignTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__assignTask(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__assignTask *p;
	size_t k = sizeof(ns1__assignTask);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__assignTask, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__assignTask);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__assignTask, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__assignTask location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__assignTask::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__assignTask(soap, tag ? tag : "ns1:assignTask", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__assignTask::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__assignTask(soap, this, tag, type);
}

SOAP_FMAC3 ns1__assignTask * SOAP_FMAC4 soap_get_ns1__assignTask(struct soap *soap, ns1__assignTask *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__assignTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__markTaskOpenedResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
}

void ns1__markTaskOpenedResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__markTaskOpenedResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__markTaskOpenedResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__markTaskOpenedResponse(struct soap *soap, const char *tag, int id, const ns1__markTaskOpenedResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_outliteral(soap, tag, (char*const*)&a->xsd__anyType::__item, "ns1:markTaskOpenedResponse");
}

void *ns1__markTaskOpenedResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__markTaskOpenedResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__markTaskOpenedResponse * SOAP_FMAC4 soap_in_ns1__markTaskOpenedResponse(struct soap *soap, const char *tag, ns1__markTaskOpenedResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns1__markTaskOpenedResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__markTaskOpenedResponse, sizeof(ns1__markTaskOpenedResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__markTaskOpenedResponse)
		return (ns1__markTaskOpenedResponse *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_inliteral(soap, tag, (char**)&a->xsd__anyType::__item))
		return NULL;
	return a;
}

SOAP_FMAC1 ns1__markTaskOpenedResponse * SOAP_FMAC2 soap_instantiate_ns1__markTaskOpenedResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__markTaskOpenedResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__markTaskOpenedResponse *p;
	size_t k = sizeof(ns1__markTaskOpenedResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__markTaskOpenedResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__markTaskOpenedResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__markTaskOpenedResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__markTaskOpenedResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__markTaskOpenedResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__markTaskOpenedResponse(soap, tag ? tag : "ns1:markTaskOpenedResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__markTaskOpenedResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__markTaskOpenedResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__markTaskOpenedResponse * SOAP_FMAC4 soap_get_ns1__markTaskOpenedResponse(struct soap *soap, ns1__markTaskOpenedResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__markTaskOpenedResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__markTaskOpened::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__markTaskOpened::user = NULL;
	this->ns1__markTaskOpened::taskId = NULL;
}

void ns1__markTaskOpened::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__user(soap, &this->ns1__markTaskOpened::user);
	soap_serialize_PointerToLONG64(soap, &this->ns1__markTaskOpened::taskId);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__markTaskOpened::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__markTaskOpened(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__markTaskOpened(struct soap *soap, const char *tag, int id, const ns1__markTaskOpened *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__markTaskOpened), type ? type : "ns1:markTaskOpened"))
		return soap->error;
	if (soap_out_PointerTons1__user(soap, "user", -1, &a->ns1__markTaskOpened::user, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "taskId", -1, &a->ns1__markTaskOpened::taskId, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__markTaskOpened::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__markTaskOpened(soap, tag, this, type);
}

SOAP_FMAC3 ns1__markTaskOpened * SOAP_FMAC4 soap_in_ns1__markTaskOpened(struct soap *soap, const char *tag, ns1__markTaskOpened *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__markTaskOpened *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__markTaskOpened, sizeof(ns1__markTaskOpened), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__markTaskOpened)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__markTaskOpened *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_user1 = 1;
	size_t soap_flag_taskId1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__user(soap, "user", &a->ns1__markTaskOpened::user, "ns1:user"))
				{	soap_flag_user1--;
					continue;
				}
			}
			if (soap_flag_taskId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "taskId", &a->ns1__markTaskOpened::taskId, "xsd:long"))
				{	soap_flag_taskId1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__markTaskOpened *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__markTaskOpened, SOAP_TYPE_ns1__markTaskOpened, sizeof(ns1__markTaskOpened), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__markTaskOpened * SOAP_FMAC2 soap_instantiate_ns1__markTaskOpened(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__markTaskOpened(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__markTaskOpened *p;
	size_t k = sizeof(ns1__markTaskOpened);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__markTaskOpened, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__markTaskOpened);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__markTaskOpened, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__markTaskOpened location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__markTaskOpened::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__markTaskOpened(soap, tag ? tag : "ns1:markTaskOpened", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__markTaskOpened::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__markTaskOpened(soap, this, tag, type);
}

SOAP_FMAC3 ns1__markTaskOpened * SOAP_FMAC4 soap_get_ns1__markTaskOpened(struct soap *soap, ns1__markTaskOpened *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__markTaskOpened(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__userType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__userType::name = NULL;
	soap_default_std__vectorTemplateOfPointerTons1__variableDefinition(soap, &this->ns1__userType::attributes);
	this->ns1__userType::attributesMap._ns1__userType_attributesMap::soap_default(soap);
}

void ns1__userType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__userType::name);
	soap_serialize_std__vectorTemplateOfPointerTons1__variableDefinition(soap, &this->ns1__userType::attributes);
	this->ns1__userType::attributesMap.soap_serialize(soap);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__userType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__userType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__userType(struct soap *soap, const char *tag, int id, const ns1__userType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__userType), type ? type : "ns1:userType"))
		return soap->error;
	if (soap_out_wstring(soap, "name", -1, (wchar_t*const*)&a->ns1__userType::name, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__variableDefinition(soap, "attributes", -1, &a->ns1__userType::attributes, ""))
		return soap->error;
	if ((a->ns1__userType::attributesMap).soap_out(soap, "attributesMap", -1, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__userType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__userType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__userType * SOAP_FMAC4 soap_in_ns1__userType(struct soap *soap, const char *tag, ns1__userType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__userType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__userType, sizeof(ns1__userType), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__userType)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__userType *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_attributesMap1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "name", (wchar_t**)&a->ns1__userType::name, "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__variableDefinition(soap, "attributes", &a->ns1__userType::attributes, "ns1:variableDefinition"))
					continue;
			}
			if (soap_flag_attributesMap1 && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->ns1__userType::attributesMap).soap_in(soap, "attributesMap", ""))
				{	soap_flag_attributesMap1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_attributesMap1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__userType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__userType, SOAP_TYPE_ns1__userType, sizeof(ns1__userType), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__userType * SOAP_FMAC2 soap_instantiate_ns1__userType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__userType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__userType *p;
	size_t k = sizeof(ns1__userType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__userType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__userType);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__userType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__userType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__userType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__userType(soap, tag ? tag : "ns1:userType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__userType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__userType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__userType * SOAP_FMAC4 soap_get_ns1__userType(struct soap *soap, ns1__userType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__userType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__variableDefinition::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_bool(soap, &this->ns1__variableDefinition::synthetic);
	this->ns1__variableDefinition::name = NULL;
	this->ns1__variableDefinition::scriptingName = NULL;
	this->ns1__variableDefinition::description = NULL;
	this->ns1__variableDefinition::format = NULL;
	this->ns1__variableDefinition::formatLabel = NULL;
	this->ns1__variableDefinition::userType = NULL;
	soap_default_std__vectorTemplateOfPointerTons1__userType(soap, &this->ns1__variableDefinition::formatComponentUserTypes);
	soap_default_bool(soap, &this->ns1__variableDefinition::publicAccess);
	this->ns1__variableDefinition::defaultValue = NULL;
	this->ns1__variableDefinition::storeType = NULL;
}

void ns1__variableDefinition::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__variableDefinition::name);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__variableDefinition::scriptingName);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__variableDefinition::description);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__variableDefinition::format);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__variableDefinition::formatLabel);
	soap_serialize_PointerTons1__userType(soap, &this->ns1__variableDefinition::userType);
	soap_serialize_std__vectorTemplateOfPointerTons1__userType(soap, &this->ns1__variableDefinition::formatComponentUserTypes);
	soap_serialize_PointerToxsd__anyType(soap, &this->ns1__variableDefinition::defaultValue);
	soap_serialize_PointerTons1__variableStoreType(soap, &this->ns1__variableDefinition::storeType);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__variableDefinition::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__variableDefinition(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__variableDefinition(struct soap *soap, const char *tag, int id, const ns1__variableDefinition *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__variableDefinition), type ? type : "ns1:variableDefinition"))
		return soap->error;
	if (soap_out_bool(soap, "synthetic", -1, &a->ns1__variableDefinition::synthetic, ""))
		return soap->error;
	if (soap_out_wstring(soap, "name", -1, (wchar_t*const*)&a->ns1__variableDefinition::name, ""))
		return soap->error;
	if (soap_out_wstring(soap, "scriptingName", -1, (wchar_t*const*)&a->ns1__variableDefinition::scriptingName, ""))
		return soap->error;
	if (soap_out_wstring(soap, "description", -1, (wchar_t*const*)&a->ns1__variableDefinition::description, ""))
		return soap->error;
	if (soap_out_wstring(soap, "format", -1, (wchar_t*const*)&a->ns1__variableDefinition::format, ""))
		return soap->error;
	if (soap_out_wstring(soap, "formatLabel", -1, (wchar_t*const*)&a->ns1__variableDefinition::formatLabel, ""))
		return soap->error;
	if (soap_out_PointerTons1__userType(soap, "userType", -1, &a->ns1__variableDefinition::userType, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__userType(soap, "formatComponentUserTypes", -1, &a->ns1__variableDefinition::formatComponentUserTypes, ""))
		return soap->error;
	if (soap_out_bool(soap, "publicAccess", -1, &a->ns1__variableDefinition::publicAccess, ""))
		return soap->error;
	if (soap_out_PointerToxsd__anyType(soap, "defaultValue", -1, &a->ns1__variableDefinition::defaultValue, ""))
		return soap->error;
	if (soap_out_PointerTons1__variableStoreType(soap, "storeType", -1, &a->ns1__variableDefinition::storeType, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__variableDefinition::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__variableDefinition(soap, tag, this, type);
}

SOAP_FMAC3 ns1__variableDefinition * SOAP_FMAC4 soap_in_ns1__variableDefinition(struct soap *soap, const char *tag, ns1__variableDefinition *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__variableDefinition *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__variableDefinition, sizeof(ns1__variableDefinition), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__variableDefinition)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__variableDefinition *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_synthetic1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_scriptingName1 = 1;
	size_t soap_flag_description1 = 1;
	size_t soap_flag_format1 = 1;
	size_t soap_flag_formatLabel1 = 1;
	size_t soap_flag_userType1 = 1;
	size_t soap_flag_publicAccess1 = 1;
	size_t soap_flag_defaultValue1 = 1;
	size_t soap_flag_storeType1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_synthetic1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "synthetic", &a->ns1__variableDefinition::synthetic, "xsd:boolean"))
				{	soap_flag_synthetic1--;
					continue;
				}
			}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "name", (wchar_t**)&a->ns1__variableDefinition::name, "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap_flag_scriptingName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "scriptingName", (wchar_t**)&a->ns1__variableDefinition::scriptingName, "xsd:string"))
				{	soap_flag_scriptingName1--;
					continue;
				}
			}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "description", (wchar_t**)&a->ns1__variableDefinition::description, "xsd:string"))
				{	soap_flag_description1--;
					continue;
				}
			}
			if (soap_flag_format1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "format", (wchar_t**)&a->ns1__variableDefinition::format, "xsd:string"))
				{	soap_flag_format1--;
					continue;
				}
			}
			if (soap_flag_formatLabel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "formatLabel", (wchar_t**)&a->ns1__variableDefinition::formatLabel, "xsd:string"))
				{	soap_flag_formatLabel1--;
					continue;
				}
			}
			if (soap_flag_userType1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__userType(soap, "userType", &a->ns1__variableDefinition::userType, "ns1:userType"))
				{	soap_flag_userType1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__userType(soap, "formatComponentUserTypes", &a->ns1__variableDefinition::formatComponentUserTypes, "ns1:userType"))
					continue;
			}
			if (soap_flag_publicAccess1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "publicAccess", &a->ns1__variableDefinition::publicAccess, "xsd:boolean"))
				{	soap_flag_publicAccess1--;
					continue;
				}
			}
			if (soap_flag_defaultValue1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__anyType(soap, "defaultValue", &a->ns1__variableDefinition::defaultValue, "xsd:anyType"))
				{	soap_flag_defaultValue1--;
					continue;
				}
			}
			if (soap_flag_storeType1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__variableStoreType(soap, "storeType", &a->ns1__variableDefinition::storeType, "ns1:variableStoreType"))
				{	soap_flag_storeType1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_synthetic1 > 0 || soap_flag_publicAccess1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__variableDefinition *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__variableDefinition, SOAP_TYPE_ns1__variableDefinition, sizeof(ns1__variableDefinition), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__variableDefinition * SOAP_FMAC2 soap_instantiate_ns1__variableDefinition(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__variableDefinition(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__variableDefinition *p;
	size_t k = sizeof(ns1__variableDefinition);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__variableDefinition, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__variableDefinition);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__variableDefinition, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__variableDefinition location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__variableDefinition::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__variableDefinition(soap, tag ? tag : "ns1:variableDefinition", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__variableDefinition::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__variableDefinition(soap, this, tag, type);
}

SOAP_FMAC3 ns1__variableDefinition * SOAP_FMAC4 soap_get_ns1__variableDefinition(struct soap *soap, ns1__variableDefinition *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__variableDefinition(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__wfVariable::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__wfVariable::definition = NULL;
	this->ns1__wfVariable::value = NULL;
}

void ns1__wfVariable::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__variableDefinition(soap, &this->ns1__wfVariable::definition);
	soap_serialize_PointerToxsd__anyType(soap, &this->ns1__wfVariable::value);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__wfVariable::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__wfVariable(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__wfVariable(struct soap *soap, const char *tag, int id, const ns1__wfVariable *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__wfVariable), type ? type : "ns1:wfVariable"))
		return soap->error;
	if (soap_out_PointerTons1__variableDefinition(soap, "definition", -1, &a->ns1__wfVariable::definition, ""))
		return soap->error;
	if (soap_out_PointerToxsd__anyType(soap, "value", -1, &a->ns1__wfVariable::value, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__wfVariable::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__wfVariable(soap, tag, this, type);
}

SOAP_FMAC3 ns1__wfVariable * SOAP_FMAC4 soap_in_ns1__wfVariable(struct soap *soap, const char *tag, ns1__wfVariable *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__wfVariable *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__wfVariable, sizeof(ns1__wfVariable), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__wfVariable)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__wfVariable *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_definition1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_definition1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__variableDefinition(soap, "definition", &a->ns1__wfVariable::definition, "ns1:variableDefinition"))
				{	soap_flag_definition1--;
					continue;
				}
			}
			if (soap_flag_value1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__anyType(soap, "value", &a->ns1__wfVariable::value, "xsd:anyType"))
				{	soap_flag_value1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__wfVariable *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__wfVariable, SOAP_TYPE_ns1__wfVariable, sizeof(ns1__wfVariable), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__wfVariable * SOAP_FMAC2 soap_instantiate_ns1__wfVariable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__wfVariable(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__wfVariable *p;
	size_t k = sizeof(ns1__wfVariable);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__wfVariable, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__wfVariable);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__wfVariable, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__wfVariable location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__wfVariable::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__wfVariable(soap, tag ? tag : "ns1:wfVariable", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__wfVariable::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__wfVariable(soap, this, tag, type);
}

SOAP_FMAC3 ns1__wfVariable * SOAP_FMAC4 soap_get_ns1__wfVariable(struct soap *soap, ns1__wfVariable *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__wfVariable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__wfTask::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__wfTask::id = NULL;
	this->ns1__wfTask::name = NULL;
	this->ns1__wfTask::nodeId = NULL;
	this->ns1__wfTask::description = NULL;
	this->ns1__wfTask::swimlaneName = NULL;
	this->ns1__wfTask::owner = NULL;
	this->ns1__wfTask::targetActor = NULL;
	this->ns1__wfTask::definitionId = NULL;
	this->ns1__wfTask::definitionName = NULL;
	this->ns1__wfTask::processId = NULL;
	this->ns1__wfTask::processHierarchyIds = NULL;
	this->ns1__wfTask::tokenId = NULL;
	this->ns1__wfTask::creationDate = NULL;
	this->ns1__wfTask::deadlineDate = NULL;
	this->ns1__wfTask::deadlineWarningDate = NULL;
	this->ns1__wfTask::assignDate = NULL;
	soap_default_bool(soap, &this->ns1__wfTask::escalated);
	soap_default_bool(soap, &this->ns1__wfTask::firstOpen);
	soap_default_bool(soap, &this->ns1__wfTask::acquiredBySubstitution);
	this->ns1__wfTask::multitaskIndex = NULL;
	soap_default_bool(soap, &this->ns1__wfTask::readOnly);
	soap_default_std__vectorTemplateOfPointerTons1__wfVariable(soap, &this->ns1__wfTask::variables);
}

void ns1__wfTask::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToLONG64(soap, &this->ns1__wfTask::id);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__wfTask::name);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__wfTask::nodeId);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__wfTask::description);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__wfTask::swimlaneName);
	soap_serialize_PointerTons1__wfExecutor(soap, &this->ns1__wfTask::owner);
	soap_serialize_PointerTons1__actor(soap, &this->ns1__wfTask::targetActor);
	soap_serialize_PointerToLONG64(soap, &this->ns1__wfTask::definitionId);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__wfTask::definitionName);
	soap_serialize_PointerToLONG64(soap, &this->ns1__wfTask::processId);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__wfTask::processHierarchyIds);
	soap_serialize_PointerToLONG64(soap, &this->ns1__wfTask::tokenId);
	soap_serialize_PointerTodateTime(soap, &this->ns1__wfTask::creationDate);
	soap_serialize_PointerTodateTime(soap, &this->ns1__wfTask::deadlineDate);
	soap_serialize_PointerTodateTime(soap, &this->ns1__wfTask::deadlineWarningDate);
	soap_serialize_PointerTodateTime(soap, &this->ns1__wfTask::assignDate);
	soap_serialize_PointerToint(soap, &this->ns1__wfTask::multitaskIndex);
	soap_serialize_std__vectorTemplateOfPointerTons1__wfVariable(soap, &this->ns1__wfTask::variables);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__wfTask::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__wfTask(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__wfTask(struct soap *soap, const char *tag, int id, const ns1__wfTask *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__wfTask), type ? type : "ns1:wfTask"))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "id", -1, &a->ns1__wfTask::id, ""))
		return soap->error;
	if (soap_out_wstring(soap, "name", -1, (wchar_t*const*)&a->ns1__wfTask::name, ""))
		return soap->error;
	if (soap_out_wstring(soap, "nodeId", -1, (wchar_t*const*)&a->ns1__wfTask::nodeId, ""))
		return soap->error;
	if (soap_out_wstring(soap, "description", -1, (wchar_t*const*)&a->ns1__wfTask::description, ""))
		return soap->error;
	if (soap_out_wstring(soap, "swimlaneName", -1, (wchar_t*const*)&a->ns1__wfTask::swimlaneName, ""))
		return soap->error;
	if (soap_out_PointerTons1__wfExecutor(soap, "owner", -1, &a->ns1__wfTask::owner, ""))
		return soap->error;
	if (soap_out_PointerTons1__actor(soap, "targetActor", -1, &a->ns1__wfTask::targetActor, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "definitionId", -1, &a->ns1__wfTask::definitionId, ""))
		return soap->error;
	if (soap_out_wstring(soap, "definitionName", -1, (wchar_t*const*)&a->ns1__wfTask::definitionName, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "processId", -1, &a->ns1__wfTask::processId, ""))
		return soap->error;
	if (soap_out_wstring(soap, "processHierarchyIds", -1, (wchar_t*const*)&a->ns1__wfTask::processHierarchyIds, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "tokenId", -1, &a->ns1__wfTask::tokenId, ""))
		return soap->error;
	if (soap_out_PointerTodateTime(soap, "creationDate", -1, &a->ns1__wfTask::creationDate, ""))
		return soap->error;
	if (soap_out_PointerTodateTime(soap, "deadlineDate", -1, &a->ns1__wfTask::deadlineDate, ""))
		return soap->error;
	if (soap_out_PointerTodateTime(soap, "deadlineWarningDate", -1, &a->ns1__wfTask::deadlineWarningDate, ""))
		return soap->error;
	if (soap_out_PointerTodateTime(soap, "assignDate", -1, &a->ns1__wfTask::assignDate, ""))
		return soap->error;
	if (soap_out_bool(soap, "escalated", -1, &a->ns1__wfTask::escalated, ""))
		return soap->error;
	if (soap_out_bool(soap, "firstOpen", -1, &a->ns1__wfTask::firstOpen, ""))
		return soap->error;
	if (soap_out_bool(soap, "acquiredBySubstitution", -1, &a->ns1__wfTask::acquiredBySubstitution, ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "multitaskIndex", -1, &a->ns1__wfTask::multitaskIndex, ""))
		return soap->error;
	if (soap_out_bool(soap, "readOnly", -1, &a->ns1__wfTask::readOnly, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__wfVariable(soap, "variables", -1, &a->ns1__wfTask::variables, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__wfTask::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__wfTask(soap, tag, this, type);
}

SOAP_FMAC3 ns1__wfTask * SOAP_FMAC4 soap_in_ns1__wfTask(struct soap *soap, const char *tag, ns1__wfTask *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__wfTask *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__wfTask, sizeof(ns1__wfTask), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__wfTask)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__wfTask *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_id1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_nodeId1 = 1;
	size_t soap_flag_description1 = 1;
	size_t soap_flag_swimlaneName1 = 1;
	size_t soap_flag_owner1 = 1;
	size_t soap_flag_targetActor1 = 1;
	size_t soap_flag_definitionId1 = 1;
	size_t soap_flag_definitionName1 = 1;
	size_t soap_flag_processId1 = 1;
	size_t soap_flag_processHierarchyIds1 = 1;
	size_t soap_flag_tokenId1 = 1;
	size_t soap_flag_creationDate1 = 1;
	size_t soap_flag_deadlineDate1 = 1;
	size_t soap_flag_deadlineWarningDate1 = 1;
	size_t soap_flag_assignDate1 = 1;
	size_t soap_flag_escalated1 = 1;
	size_t soap_flag_firstOpen1 = 1;
	size_t soap_flag_acquiredBySubstitution1 = 1;
	size_t soap_flag_multitaskIndex1 = 1;
	size_t soap_flag_readOnly1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "id", &a->ns1__wfTask::id, "xsd:long"))
				{	soap_flag_id1--;
					continue;
				}
			}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "name", (wchar_t**)&a->ns1__wfTask::name, "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap_flag_nodeId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "nodeId", (wchar_t**)&a->ns1__wfTask::nodeId, "xsd:string"))
				{	soap_flag_nodeId1--;
					continue;
				}
			}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "description", (wchar_t**)&a->ns1__wfTask::description, "xsd:string"))
				{	soap_flag_description1--;
					continue;
				}
			}
			if (soap_flag_swimlaneName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "swimlaneName", (wchar_t**)&a->ns1__wfTask::swimlaneName, "xsd:string"))
				{	soap_flag_swimlaneName1--;
					continue;
				}
			}
			if (soap_flag_owner1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__wfExecutor(soap, "owner", &a->ns1__wfTask::owner, "ns1:wfExecutor"))
				{	soap_flag_owner1--;
					continue;
				}
			}
			if (soap_flag_targetActor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__actor(soap, "targetActor", &a->ns1__wfTask::targetActor, "ns1:actor"))
				{	soap_flag_targetActor1--;
					continue;
				}
			}
			if (soap_flag_definitionId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "definitionId", &a->ns1__wfTask::definitionId, "xsd:long"))
				{	soap_flag_definitionId1--;
					continue;
				}
			}
			if (soap_flag_definitionName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "definitionName", (wchar_t**)&a->ns1__wfTask::definitionName, "xsd:string"))
				{	soap_flag_definitionName1--;
					continue;
				}
			}
			if (soap_flag_processId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "processId", &a->ns1__wfTask::processId, "xsd:long"))
				{	soap_flag_processId1--;
					continue;
				}
			}
			if (soap_flag_processHierarchyIds1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "processHierarchyIds", (wchar_t**)&a->ns1__wfTask::processHierarchyIds, "xsd:string"))
				{	soap_flag_processHierarchyIds1--;
					continue;
				}
			}
			if (soap_flag_tokenId1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "tokenId", &a->ns1__wfTask::tokenId, "xsd:long"))
				{	soap_flag_tokenId1--;
					continue;
				}
			}
			if (soap_flag_creationDate1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTodateTime(soap, "creationDate", &a->ns1__wfTask::creationDate, "xsd:dateTime"))
				{	soap_flag_creationDate1--;
					continue;
				}
			}
			if (soap_flag_deadlineDate1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTodateTime(soap, "deadlineDate", &a->ns1__wfTask::deadlineDate, "xsd:dateTime"))
				{	soap_flag_deadlineDate1--;
					continue;
				}
			}
			if (soap_flag_deadlineWarningDate1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTodateTime(soap, "deadlineWarningDate", &a->ns1__wfTask::deadlineWarningDate, "xsd:dateTime"))
				{	soap_flag_deadlineWarningDate1--;
					continue;
				}
			}
			if (soap_flag_assignDate1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTodateTime(soap, "assignDate", &a->ns1__wfTask::assignDate, "xsd:dateTime"))
				{	soap_flag_assignDate1--;
					continue;
				}
			}
			if (soap_flag_escalated1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "escalated", &a->ns1__wfTask::escalated, "xsd:boolean"))
				{	soap_flag_escalated1--;
					continue;
				}
			}
			if (soap_flag_firstOpen1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "firstOpen", &a->ns1__wfTask::firstOpen, "xsd:boolean"))
				{	soap_flag_firstOpen1--;
					continue;
				}
			}
			if (soap_flag_acquiredBySubstitution1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "acquiredBySubstitution", &a->ns1__wfTask::acquiredBySubstitution, "xsd:boolean"))
				{	soap_flag_acquiredBySubstitution1--;
					continue;
				}
			}
			if (soap_flag_multitaskIndex1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "multitaskIndex", &a->ns1__wfTask::multitaskIndex, "xsd:int"))
				{	soap_flag_multitaskIndex1--;
					continue;
				}
			}
			if (soap_flag_readOnly1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "readOnly", &a->ns1__wfTask::readOnly, "xsd:boolean"))
				{	soap_flag_readOnly1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__wfVariable(soap, "variables", &a->ns1__wfTask::variables, "ns1:wfVariable"))
					continue;
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_escalated1 > 0 || soap_flag_firstOpen1 > 0 || soap_flag_acquiredBySubstitution1 > 0 || soap_flag_readOnly1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__wfTask *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__wfTask, SOAP_TYPE_ns1__wfTask, sizeof(ns1__wfTask), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__wfTask * SOAP_FMAC2 soap_instantiate_ns1__wfTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__wfTask(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__wfTask *p;
	size_t k = sizeof(ns1__wfTask);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__wfTask, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__wfTask);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__wfTask, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__wfTask location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__wfTask::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__wfTask(soap, tag ? tag : "ns1:wfTask", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__wfTask::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__wfTask(soap, this, tag, type);
}

SOAP_FMAC3 ns1__wfTask * SOAP_FMAC4 soap_get_ns1__wfTask(struct soap *soap, ns1__wfTask *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__wfTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getMyTasksResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOfPointerTons1__wfTask(soap, &this->ns1__getMyTasksResponse::result);
}

void ns1__getMyTasksResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__wfTask(soap, &this->ns1__getMyTasksResponse::result);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__getMyTasksResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getMyTasksResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getMyTasksResponse(struct soap *soap, const char *tag, int id, const ns1__getMyTasksResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getMyTasksResponse), type ? type : "ns1:getMyTasksResponse"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__wfTask(soap, "result", -1, &a->ns1__getMyTasksResponse::result, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getMyTasksResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getMyTasksResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getMyTasksResponse * SOAP_FMAC4 soap_in_ns1__getMyTasksResponse(struct soap *soap, const char *tag, ns1__getMyTasksResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getMyTasksResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getMyTasksResponse, sizeof(ns1__getMyTasksResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getMyTasksResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getMyTasksResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__wfTask(soap, "result", &a->ns1__getMyTasksResponse::result, "ns1:wfTask"))
					continue;
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getMyTasksResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getMyTasksResponse, SOAP_TYPE_ns1__getMyTasksResponse, sizeof(ns1__getMyTasksResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getMyTasksResponse * SOAP_FMAC2 soap_instantiate_ns1__getMyTasksResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getMyTasksResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getMyTasksResponse *p;
	size_t k = sizeof(ns1__getMyTasksResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getMyTasksResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getMyTasksResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getMyTasksResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getMyTasksResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getMyTasksResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getMyTasksResponse(soap, tag ? tag : "ns1:getMyTasksResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getMyTasksResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getMyTasksResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getMyTasksResponse * SOAP_FMAC4 soap_get_ns1__getMyTasksResponse(struct soap *soap, ns1__getMyTasksResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getMyTasksResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__batchPresentation::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__batchPresentation::id = NULL;
	this->ns1__batchPresentation::version = NULL;
	this->ns1__batchPresentation::type = NULL;
	this->ns1__batchPresentation::category = NULL;
	this->ns1__batchPresentation::name = NULL;
	soap_default_bool(soap, &this->ns1__batchPresentation::active);
	soap_default_int(soap, &this->ns1__batchPresentation::rangeSize);
	soap_default_int(soap, &this->ns1__batchPresentation::pageNumber);
	this->ns1__batchPresentation::fieldsData = NULL;
	this->ns1__batchPresentation::createDate = NULL;
	soap_default_bool(soap, &this->ns1__batchPresentation::shared);
}

void ns1__batchPresentation::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToLONG64(soap, &this->ns1__batchPresentation::id);
	soap_serialize_PointerToLONG64(soap, &this->ns1__batchPresentation::version);
	soap_serialize_PointerTons1__classPresentationType(soap, &this->ns1__batchPresentation::type);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__batchPresentation::category);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__batchPresentation::name);
	soap_embedded(soap, &this->ns1__batchPresentation::rangeSize, SOAP_TYPE_int);
	soap_embedded(soap, &this->ns1__batchPresentation::pageNumber, SOAP_TYPE_int);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__batchPresentation::fieldsData);
	soap_serialize_PointerTodateTime(soap, &this->ns1__batchPresentation::createDate);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__batchPresentation::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__batchPresentation(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__batchPresentation(struct soap *soap, const char *tag, int id, const ns1__batchPresentation *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__batchPresentation), type ? type : "ns1:batchPresentation"))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "id", -1, &a->ns1__batchPresentation::id, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "version", -1, &a->ns1__batchPresentation::version, ""))
		return soap->error;
	if (soap_out_PointerTons1__classPresentationType(soap, "type", -1, &a->ns1__batchPresentation::type, ""))
		return soap->error;
	if (soap_out_wstring(soap, "category", -1, (wchar_t*const*)&a->ns1__batchPresentation::category, ""))
		return soap->error;
	if (soap_out_wstring(soap, "name", -1, (wchar_t*const*)&a->ns1__batchPresentation::name, ""))
		return soap->error;
	if (soap_out_bool(soap, "active", -1, &a->ns1__batchPresentation::active, ""))
		return soap->error;
	if (soap_out_int(soap, "rangeSize", -1, &a->ns1__batchPresentation::rangeSize, ""))
		return soap->error;
	if (soap_out_int(soap, "pageNumber", -1, &a->ns1__batchPresentation::pageNumber, ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "fieldsData", -1, &a->ns1__batchPresentation::fieldsData, ""))
		return soap->error;
	if (soap_out_PointerTodateTime(soap, "createDate", -1, &a->ns1__batchPresentation::createDate, ""))
		return soap->error;
	if (soap_out_bool(soap, "shared", -1, &a->ns1__batchPresentation::shared, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__batchPresentation::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__batchPresentation(soap, tag, this, type);
}

SOAP_FMAC3 ns1__batchPresentation * SOAP_FMAC4 soap_in_ns1__batchPresentation(struct soap *soap, const char *tag, ns1__batchPresentation *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__batchPresentation *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__batchPresentation, sizeof(ns1__batchPresentation), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__batchPresentation)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__batchPresentation *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_id1 = 1;
	size_t soap_flag_version1 = 1;
	size_t soap_flag_type1 = 1;
	size_t soap_flag_category1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_active1 = 1;
	size_t soap_flag_rangeSize1 = 1;
	size_t soap_flag_pageNumber1 = 1;
	size_t soap_flag_fieldsData1 = 1;
	size_t soap_flag_createDate1 = 1;
	size_t soap_flag_shared1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "id", &a->ns1__batchPresentation::id, "xsd:long"))
				{	soap_flag_id1--;
					continue;
				}
			}
			if (soap_flag_version1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "version", &a->ns1__batchPresentation::version, "xsd:long"))
				{	soap_flag_version1--;
					continue;
				}
			}
			if (soap_flag_type1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__classPresentationType(soap, "type", &a->ns1__batchPresentation::type, "ns1:classPresentationType"))
				{	soap_flag_type1--;
					continue;
				}
			}
			if (soap_flag_category1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "category", (wchar_t**)&a->ns1__batchPresentation::category, "xsd:string"))
				{	soap_flag_category1--;
					continue;
				}
			}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "name", (wchar_t**)&a->ns1__batchPresentation::name, "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap_flag_active1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "active", &a->ns1__batchPresentation::active, "xsd:boolean"))
				{	soap_flag_active1--;
					continue;
				}
			}
			if (soap_flag_rangeSize1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "rangeSize", &a->ns1__batchPresentation::rangeSize, "xsd:int"))
				{	soap_flag_rangeSize1--;
					continue;
				}
			}
			if (soap_flag_pageNumber1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "pageNumber", &a->ns1__batchPresentation::pageNumber, "xsd:int"))
				{	soap_flag_pageNumber1--;
					continue;
				}
			}
			if (soap_flag_fieldsData1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__base64Binary(soap, "fieldsData", &a->ns1__batchPresentation::fieldsData, "xsd:base64Binary"))
				{	soap_flag_fieldsData1--;
					continue;
				}
			}
			if (soap_flag_createDate1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTodateTime(soap, "createDate", &a->ns1__batchPresentation::createDate, "xsd:dateTime"))
				{	soap_flag_createDate1--;
					continue;
				}
			}
			if (soap_flag_shared1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "shared", &a->ns1__batchPresentation::shared, "xsd:boolean"))
				{	soap_flag_shared1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_active1 > 0 || soap_flag_rangeSize1 > 0 || soap_flag_pageNumber1 > 0 || soap_flag_shared1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__batchPresentation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__batchPresentation, SOAP_TYPE_ns1__batchPresentation, sizeof(ns1__batchPresentation), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__batchPresentation * SOAP_FMAC2 soap_instantiate_ns1__batchPresentation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__batchPresentation(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__batchPresentation *p;
	size_t k = sizeof(ns1__batchPresentation);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__batchPresentation, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__batchPresentation);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__batchPresentation, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__batchPresentation location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__batchPresentation::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__batchPresentation(soap, tag ? tag : "ns1:batchPresentation", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__batchPresentation::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__batchPresentation(soap, this, tag, type);
}

SOAP_FMAC3 ns1__batchPresentation * SOAP_FMAC4 soap_get_ns1__batchPresentation(struct soap *soap, ns1__batchPresentation *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__batchPresentation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getMyTasks::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__getMyTasks::user = NULL;
	this->ns1__getMyTasks::batchPresentation = NULL;
}

void ns1__getMyTasks::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__user(soap, &this->ns1__getMyTasks::user);
	soap_serialize_PointerTons1__batchPresentation(soap, &this->ns1__getMyTasks::batchPresentation);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__getMyTasks::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getMyTasks(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getMyTasks(struct soap *soap, const char *tag, int id, const ns1__getMyTasks *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getMyTasks), type ? type : "ns1:getMyTasks"))
		return soap->error;
	if (soap_out_PointerTons1__user(soap, "user", -1, &a->ns1__getMyTasks::user, ""))
		return soap->error;
	if (soap_out_PointerTons1__batchPresentation(soap, "batchPresentation", -1, &a->ns1__getMyTasks::batchPresentation, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getMyTasks::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getMyTasks(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getMyTasks * SOAP_FMAC4 soap_in_ns1__getMyTasks(struct soap *soap, const char *tag, ns1__getMyTasks *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getMyTasks *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getMyTasks, sizeof(ns1__getMyTasks), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getMyTasks)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getMyTasks *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_user1 = 1;
	size_t soap_flag_batchPresentation1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__user(soap, "user", &a->ns1__getMyTasks::user, "ns1:user"))
				{	soap_flag_user1--;
					continue;
				}
			}
			if (soap_flag_batchPresentation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__batchPresentation(soap, "batchPresentation", &a->ns1__getMyTasks::batchPresentation, "ns1:batchPresentation"))
				{	soap_flag_batchPresentation1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getMyTasks *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getMyTasks, SOAP_TYPE_ns1__getMyTasks, sizeof(ns1__getMyTasks), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getMyTasks * SOAP_FMAC2 soap_instantiate_ns1__getMyTasks(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getMyTasks(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getMyTasks *p;
	size_t k = sizeof(ns1__getMyTasks);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getMyTasks, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getMyTasks);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getMyTasks, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getMyTasks location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getMyTasks::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getMyTasks(soap, tag ? tag : "ns1:getMyTasks", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getMyTasks::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getMyTasks(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getMyTasks * SOAP_FMAC4 soap_get_ns1__getMyTasks(struct soap *soap, ns1__getMyTasks *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getMyTasks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__reassignTaskResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_bool(soap, &this->ns1__reassignTaskResponse::result);
}

void ns1__reassignTaskResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__reassignTaskResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__reassignTaskResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reassignTaskResponse(struct soap *soap, const char *tag, int id, const ns1__reassignTaskResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__reassignTaskResponse), type ? type : "ns1:reassignTaskResponse"))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &a->ns1__reassignTaskResponse::result, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__reassignTaskResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__reassignTaskResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__reassignTaskResponse * SOAP_FMAC4 soap_in_ns1__reassignTaskResponse(struct soap *soap, const char *tag, ns1__reassignTaskResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__reassignTaskResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__reassignTaskResponse, sizeof(ns1__reassignTaskResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__reassignTaskResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__reassignTaskResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "result", &a->ns1__reassignTaskResponse::result, "xsd:boolean"))
				{	soap_flag_result1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__reassignTaskResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__reassignTaskResponse, SOAP_TYPE_ns1__reassignTaskResponse, sizeof(ns1__reassignTaskResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__reassignTaskResponse * SOAP_FMAC2 soap_instantiate_ns1__reassignTaskResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__reassignTaskResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__reassignTaskResponse *p;
	size_t k = sizeof(ns1__reassignTaskResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__reassignTaskResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__reassignTaskResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__reassignTaskResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__reassignTaskResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__reassignTaskResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__reassignTaskResponse(soap, tag ? tag : "ns1:reassignTaskResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__reassignTaskResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__reassignTaskResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__reassignTaskResponse * SOAP_FMAC4 soap_get_ns1__reassignTaskResponse(struct soap *soap, ns1__reassignTaskResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__reassignTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__reassignTask::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__reassignTask::user = NULL;
	this->ns1__reassignTask::batchPresentation = NULL;
}

void ns1__reassignTask::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__user(soap, &this->ns1__reassignTask::user);
	soap_serialize_PointerToLONG64(soap, &this->ns1__reassignTask::batchPresentation);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__reassignTask::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__reassignTask(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reassignTask(struct soap *soap, const char *tag, int id, const ns1__reassignTask *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__reassignTask), type ? type : "ns1:reassignTask"))
		return soap->error;
	if (soap_out_PointerTons1__user(soap, "user", -1, &a->ns1__reassignTask::user, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "batchPresentation", -1, &a->ns1__reassignTask::batchPresentation, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__reassignTask::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__reassignTask(soap, tag, this, type);
}

SOAP_FMAC3 ns1__reassignTask * SOAP_FMAC4 soap_in_ns1__reassignTask(struct soap *soap, const char *tag, ns1__reassignTask *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__reassignTask *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__reassignTask, sizeof(ns1__reassignTask), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__reassignTask)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__reassignTask *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_user1 = 1;
	size_t soap_flag_batchPresentation1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__user(soap, "user", &a->ns1__reassignTask::user, "ns1:user"))
				{	soap_flag_user1--;
					continue;
				}
			}
			if (soap_flag_batchPresentation1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "batchPresentation", &a->ns1__reassignTask::batchPresentation, "xsd:long"))
				{	soap_flag_batchPresentation1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__reassignTask *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__reassignTask, SOAP_TYPE_ns1__reassignTask, sizeof(ns1__reassignTask), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__reassignTask * SOAP_FMAC2 soap_instantiate_ns1__reassignTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__reassignTask(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__reassignTask *p;
	size_t k = sizeof(ns1__reassignTask);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__reassignTask, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__reassignTask);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__reassignTask, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__reassignTask location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__reassignTask::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__reassignTask(soap, tag ? tag : "ns1:reassignTask", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__reassignTask::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__reassignTask(soap, this, tag, type);
}

SOAP_FMAC3 ns1__reassignTask * SOAP_FMAC4 soap_get_ns1__reassignTask(struct soap *soap, ns1__reassignTask *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__reassignTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__authenticateByKerberosResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__authenticateByKerberosResponse::result = NULL;
}

void ns1__authenticateByKerberosResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__user(soap, &this->ns1__authenticateByKerberosResponse::result);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__authenticateByKerberosResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__authenticateByKerberosResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByKerberosResponse(struct soap *soap, const char *tag, int id, const ns1__authenticateByKerberosResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__authenticateByKerberosResponse), type ? type : "ns1:authenticateByKerberosResponse"))
		return soap->error;
	if (soap_out_PointerTons1__user(soap, "result", -1, &a->ns1__authenticateByKerberosResponse::result, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__authenticateByKerberosResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__authenticateByKerberosResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__authenticateByKerberosResponse * SOAP_FMAC4 soap_in_ns1__authenticateByKerberosResponse(struct soap *soap, const char *tag, ns1__authenticateByKerberosResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__authenticateByKerberosResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__authenticateByKerberosResponse, sizeof(ns1__authenticateByKerberosResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__authenticateByKerberosResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__authenticateByKerberosResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__user(soap, "result", &a->ns1__authenticateByKerberosResponse::result, "ns1:user"))
				{	soap_flag_result1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__authenticateByKerberosResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__authenticateByKerberosResponse, SOAP_TYPE_ns1__authenticateByKerberosResponse, sizeof(ns1__authenticateByKerberosResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__authenticateByKerberosResponse * SOAP_FMAC2 soap_instantiate_ns1__authenticateByKerberosResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__authenticateByKerberosResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__authenticateByKerberosResponse *p;
	size_t k = sizeof(ns1__authenticateByKerberosResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__authenticateByKerberosResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__authenticateByKerberosResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__authenticateByKerberosResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__authenticateByKerberosResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__authenticateByKerberosResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__authenticateByKerberosResponse(soap, tag ? tag : "ns1:authenticateByKerberosResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__authenticateByKerberosResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__authenticateByKerberosResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__authenticateByKerberosResponse * SOAP_FMAC4 soap_get_ns1__authenticateByKerberosResponse(struct soap *soap, ns1__authenticateByKerberosResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__authenticateByKerberosResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__authenticateByKerberos::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__authenticateByKerberos::token = NULL;
}

void ns1__authenticateByKerberos::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__authenticateByKerberos::token);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__authenticateByKerberos::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__authenticateByKerberos(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByKerberos(struct soap *soap, const char *tag, int id, const ns1__authenticateByKerberos *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__authenticateByKerberos), type ? type : "ns1:authenticateByKerberos"))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "token", -1, &a->ns1__authenticateByKerberos::token, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__authenticateByKerberos::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__authenticateByKerberos(soap, tag, this, type);
}

SOAP_FMAC3 ns1__authenticateByKerberos * SOAP_FMAC4 soap_in_ns1__authenticateByKerberos(struct soap *soap, const char *tag, ns1__authenticateByKerberos *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__authenticateByKerberos *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__authenticateByKerberos, sizeof(ns1__authenticateByKerberos), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__authenticateByKerberos)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__authenticateByKerberos *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_token1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_token1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__base64Binary(soap, "token", &a->ns1__authenticateByKerberos::token, "xsd:base64Binary"))
				{	soap_flag_token1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__authenticateByKerberos *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__authenticateByKerberos, SOAP_TYPE_ns1__authenticateByKerberos, sizeof(ns1__authenticateByKerberos), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__authenticateByKerberos * SOAP_FMAC2 soap_instantiate_ns1__authenticateByKerberos(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__authenticateByKerberos(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__authenticateByKerberos *p;
	size_t k = sizeof(ns1__authenticateByKerberos);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__authenticateByKerberos, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__authenticateByKerberos);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__authenticateByKerberos, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__authenticateByKerberos location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__authenticateByKerberos::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__authenticateByKerberos(soap, tag ? tag : "ns1:authenticateByKerberos", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__authenticateByKerberos::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__authenticateByKerberos(soap, this, tag, type);
}

SOAP_FMAC3 ns1__authenticateByKerberos * SOAP_FMAC4 soap_get_ns1__authenticateByKerberos(struct soap *soap, ns1__authenticateByKerberos *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__authenticateByKerberos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__authenticateByTrustedPrincipalResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__authenticateByTrustedPrincipalResponse::result = NULL;
}

void ns1__authenticateByTrustedPrincipalResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__user(soap, &this->ns1__authenticateByTrustedPrincipalResponse::result);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__authenticateByTrustedPrincipalResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__authenticateByTrustedPrincipalResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByTrustedPrincipalResponse(struct soap *soap, const char *tag, int id, const ns1__authenticateByTrustedPrincipalResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse), type ? type : "ns1:authenticateByTrustedPrincipalResponse"))
		return soap->error;
	if (soap_out_PointerTons1__user(soap, "result", -1, &a->ns1__authenticateByTrustedPrincipalResponse::result, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__authenticateByTrustedPrincipalResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__authenticateByTrustedPrincipalResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__authenticateByTrustedPrincipalResponse * SOAP_FMAC4 soap_in_ns1__authenticateByTrustedPrincipalResponse(struct soap *soap, const char *tag, ns1__authenticateByTrustedPrincipalResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__authenticateByTrustedPrincipalResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse, sizeof(ns1__authenticateByTrustedPrincipalResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__authenticateByTrustedPrincipalResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__user(soap, "result", &a->ns1__authenticateByTrustedPrincipalResponse::result, "ns1:user"))
				{	soap_flag_result1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__authenticateByTrustedPrincipalResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse, SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse, sizeof(ns1__authenticateByTrustedPrincipalResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__authenticateByTrustedPrincipalResponse * SOAP_FMAC2 soap_instantiate_ns1__authenticateByTrustedPrincipalResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__authenticateByTrustedPrincipalResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__authenticateByTrustedPrincipalResponse *p;
	size_t k = sizeof(ns1__authenticateByTrustedPrincipalResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__authenticateByTrustedPrincipalResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__authenticateByTrustedPrincipalResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__authenticateByTrustedPrincipalResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__authenticateByTrustedPrincipalResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__authenticateByTrustedPrincipalResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__authenticateByTrustedPrincipalResponse(soap, tag ? tag : "ns1:authenticateByTrustedPrincipalResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__authenticateByTrustedPrincipalResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__authenticateByTrustedPrincipalResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__authenticateByTrustedPrincipalResponse * SOAP_FMAC4 soap_get_ns1__authenticateByTrustedPrincipalResponse(struct soap *soap, ns1__authenticateByTrustedPrincipalResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__authenticateByTrustedPrincipalResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__authenticateByTrustedPrincipal::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__authenticateByTrustedPrincipal::serviceUser = NULL;
	this->ns1__authenticateByTrustedPrincipal::login = NULL;
}

void ns1__authenticateByTrustedPrincipal::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__user(soap, &this->ns1__authenticateByTrustedPrincipal::serviceUser);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__authenticateByTrustedPrincipal::login);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__authenticateByTrustedPrincipal::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__authenticateByTrustedPrincipal(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByTrustedPrincipal(struct soap *soap, const char *tag, int id, const ns1__authenticateByTrustedPrincipal *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__authenticateByTrustedPrincipal), type ? type : "ns1:authenticateByTrustedPrincipal"))
		return soap->error;
	if (soap_out_PointerTons1__user(soap, "serviceUser", -1, &a->ns1__authenticateByTrustedPrincipal::serviceUser, ""))
		return soap->error;
	if (soap_out_wstring(soap, "login", -1, (wchar_t*const*)&a->ns1__authenticateByTrustedPrincipal::login, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__authenticateByTrustedPrincipal::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__authenticateByTrustedPrincipal(soap, tag, this, type);
}

SOAP_FMAC3 ns1__authenticateByTrustedPrincipal * SOAP_FMAC4 soap_in_ns1__authenticateByTrustedPrincipal(struct soap *soap, const char *tag, ns1__authenticateByTrustedPrincipal *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__authenticateByTrustedPrincipal *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__authenticateByTrustedPrincipal, sizeof(ns1__authenticateByTrustedPrincipal), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__authenticateByTrustedPrincipal)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__authenticateByTrustedPrincipal *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_serviceUser1 = 1;
	size_t soap_flag_login1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serviceUser1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__user(soap, "serviceUser", &a->ns1__authenticateByTrustedPrincipal::serviceUser, "ns1:user"))
				{	soap_flag_serviceUser1--;
					continue;
				}
			}
			if (soap_flag_login1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "login", (wchar_t**)&a->ns1__authenticateByTrustedPrincipal::login, "xsd:string"))
				{	soap_flag_login1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__authenticateByTrustedPrincipal *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__authenticateByTrustedPrincipal, SOAP_TYPE_ns1__authenticateByTrustedPrincipal, sizeof(ns1__authenticateByTrustedPrincipal), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__authenticateByTrustedPrincipal * SOAP_FMAC2 soap_instantiate_ns1__authenticateByTrustedPrincipal(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__authenticateByTrustedPrincipal(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__authenticateByTrustedPrincipal *p;
	size_t k = sizeof(ns1__authenticateByTrustedPrincipal);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__authenticateByTrustedPrincipal, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__authenticateByTrustedPrincipal);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__authenticateByTrustedPrincipal, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__authenticateByTrustedPrincipal location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__authenticateByTrustedPrincipal::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__authenticateByTrustedPrincipal(soap, tag ? tag : "ns1:authenticateByTrustedPrincipal", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__authenticateByTrustedPrincipal::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__authenticateByTrustedPrincipal(soap, this, tag, type);
}

SOAP_FMAC3 ns1__authenticateByTrustedPrincipal * SOAP_FMAC4 soap_get_ns1__authenticateByTrustedPrincipal(struct soap *soap, ns1__authenticateByTrustedPrincipal *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__authenticateByTrustedPrincipal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__authenticateByLoginPasswordResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__authenticateByLoginPasswordResponse::result = NULL;
}

void ns1__authenticateByLoginPasswordResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__user(soap, &this->ns1__authenticateByLoginPasswordResponse::result);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__authenticateByLoginPasswordResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__authenticateByLoginPasswordResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByLoginPasswordResponse(struct soap *soap, const char *tag, int id, const ns1__authenticateByLoginPasswordResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__authenticateByLoginPasswordResponse), type ? type : "ns1:authenticateByLoginPasswordResponse"))
		return soap->error;
	if (soap_out_PointerTons1__user(soap, "result", -1, &a->ns1__authenticateByLoginPasswordResponse::result, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__authenticateByLoginPasswordResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__authenticateByLoginPasswordResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__authenticateByLoginPasswordResponse * SOAP_FMAC4 soap_in_ns1__authenticateByLoginPasswordResponse(struct soap *soap, const char *tag, ns1__authenticateByLoginPasswordResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__authenticateByLoginPasswordResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__authenticateByLoginPasswordResponse, sizeof(ns1__authenticateByLoginPasswordResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__authenticateByLoginPasswordResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__authenticateByLoginPasswordResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__user(soap, "result", &a->ns1__authenticateByLoginPasswordResponse::result, "ns1:user"))
				{	soap_flag_result1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__authenticateByLoginPasswordResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__authenticateByLoginPasswordResponse, SOAP_TYPE_ns1__authenticateByLoginPasswordResponse, sizeof(ns1__authenticateByLoginPasswordResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__authenticateByLoginPasswordResponse * SOAP_FMAC2 soap_instantiate_ns1__authenticateByLoginPasswordResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__authenticateByLoginPasswordResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__authenticateByLoginPasswordResponse *p;
	size_t k = sizeof(ns1__authenticateByLoginPasswordResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__authenticateByLoginPasswordResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__authenticateByLoginPasswordResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__authenticateByLoginPasswordResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__authenticateByLoginPasswordResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__authenticateByLoginPasswordResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__authenticateByLoginPasswordResponse(soap, tag ? tag : "ns1:authenticateByLoginPasswordResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__authenticateByLoginPasswordResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__authenticateByLoginPasswordResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__authenticateByLoginPasswordResponse * SOAP_FMAC4 soap_get_ns1__authenticateByLoginPasswordResponse(struct soap *soap, ns1__authenticateByLoginPasswordResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__authenticateByLoginPasswordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__authenticateByLoginPassword::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__authenticateByLoginPassword::name = NULL;
	this->ns1__authenticateByLoginPassword::password = NULL;
}

void ns1__authenticateByLoginPassword::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__authenticateByLoginPassword::name);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__authenticateByLoginPassword::password);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__authenticateByLoginPassword::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__authenticateByLoginPassword(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByLoginPassword(struct soap *soap, const char *tag, int id, const ns1__authenticateByLoginPassword *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__authenticateByLoginPassword), type ? type : "ns1:authenticateByLoginPassword"))
		return soap->error;
	if (soap_out_wstring(soap, "name", -1, (wchar_t*const*)&a->ns1__authenticateByLoginPassword::name, ""))
		return soap->error;
	if (soap_out_wstring(soap, "password", -1, (wchar_t*const*)&a->ns1__authenticateByLoginPassword::password, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__authenticateByLoginPassword::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__authenticateByLoginPassword(soap, tag, this, type);
}

SOAP_FMAC3 ns1__authenticateByLoginPassword * SOAP_FMAC4 soap_in_ns1__authenticateByLoginPassword(struct soap *soap, const char *tag, ns1__authenticateByLoginPassword *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__authenticateByLoginPassword *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__authenticateByLoginPassword, sizeof(ns1__authenticateByLoginPassword), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__authenticateByLoginPassword)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__authenticateByLoginPassword *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_password1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "name", (wchar_t**)&a->ns1__authenticateByLoginPassword::name, "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "password", (wchar_t**)&a->ns1__authenticateByLoginPassword::password, "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__authenticateByLoginPassword *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__authenticateByLoginPassword, SOAP_TYPE_ns1__authenticateByLoginPassword, sizeof(ns1__authenticateByLoginPassword), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__authenticateByLoginPassword * SOAP_FMAC2 soap_instantiate_ns1__authenticateByLoginPassword(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__authenticateByLoginPassword(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__authenticateByLoginPassword *p;
	size_t k = sizeof(ns1__authenticateByLoginPassword);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__authenticateByLoginPassword, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__authenticateByLoginPassword);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__authenticateByLoginPassword, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__authenticateByLoginPassword location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__authenticateByLoginPassword::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__authenticateByLoginPassword(soap, tag ? tag : "ns1:authenticateByLoginPassword", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__authenticateByLoginPassword::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__authenticateByLoginPassword(soap, this, tag, type);
}

SOAP_FMAC3 ns1__authenticateByLoginPassword * SOAP_FMAC4 soap_get_ns1__authenticateByLoginPassword(struct soap *soap, ns1__authenticateByLoginPassword *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__authenticateByLoginPassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__wfExecutor::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__executor::soap_default(soap);
	this->ns1__wfExecutor::executorClassName = NULL;
}

void ns1__wfExecutor::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__wfExecutor::executorClassName);
	this->ns1__executor::soap_serialize(soap);
#endif
}

int ns1__wfExecutor::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__wfExecutor(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__wfExecutor(struct soap *soap, const char *tag, int id, const ns1__wfExecutor *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__wfExecutor), type ? type : "ns1:wfExecutor"))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "id", -1, &a->ns1__executor::id, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "version", -1, &a->ns1__executor::version, ""))
		return soap->error;
	if (soap_out_wstring(soap, "name", -1, (wchar_t*const*)&a->ns1__executor::name, ""))
		return soap->error;
	if (soap_out_wstring(soap, "description", -1, (wchar_t*const*)&a->ns1__executor::description, ""))
		return soap->error;
	if (soap_out_wstring(soap, "fullName", -1, (wchar_t*const*)&a->ns1__executor::fullName, ""))
		return soap->error;
	if (soap_out_PointerTodateTime(soap, "createDate", -1, &a->ns1__executor::createDate, ""))
		return soap->error;
	if (soap_out_wstring(soap, "executorClassName", -1, (wchar_t*const*)&a->ns1__wfExecutor::executorClassName, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__wfExecutor::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__wfExecutor(soap, tag, this, type);
}

SOAP_FMAC3 ns1__wfExecutor * SOAP_FMAC4 soap_in_ns1__wfExecutor(struct soap *soap, const char *tag, ns1__wfExecutor *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__wfExecutor *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__wfExecutor, sizeof(ns1__wfExecutor), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__wfExecutor)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__wfExecutor *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item5 = 1;
	size_t soap_flag_id2 = 1;
	size_t soap_flag_version2 = 1;
	size_t soap_flag_name2 = 1;
	size_t soap_flag_description2 = 1;
	size_t soap_flag_fullName2 = 1;
	size_t soap_flag_createDate2 = 1;
	size_t soap_flag_executorClassName1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id2 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "id", &a->ns1__executor::id, "xsd:long"))
				{	soap_flag_id2--;
					continue;
				}
			}
			if (soap_flag_version2 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "version", &a->ns1__executor::version, "xsd:long"))
				{	soap_flag_version2--;
					continue;
				}
			}
			if (soap_flag_name2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "name", (wchar_t**)&a->ns1__executor::name, "xsd:string"))
				{	soap_flag_name2--;
					continue;
				}
			}
			if (soap_flag_description2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "description", (wchar_t**)&a->ns1__executor::description, "xsd:string"))
				{	soap_flag_description2--;
					continue;
				}
			}
			if (soap_flag_fullName2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "fullName", (wchar_t**)&a->ns1__executor::fullName, "xsd:string"))
				{	soap_flag_fullName2--;
					continue;
				}
			}
			if (soap_flag_createDate2 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTodateTime(soap, "createDate", &a->ns1__executor::createDate, "xsd:dateTime"))
				{	soap_flag_createDate2--;
					continue;
				}
			}
			if (soap_flag_executorClassName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "executorClassName", (wchar_t**)&a->ns1__wfExecutor::executorClassName, "xsd:string"))
				{	soap_flag_executorClassName1--;
					continue;
				}
			}
			if (soap_flag___item5 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item5--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__wfExecutor *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__wfExecutor, SOAP_TYPE_ns1__wfExecutor, sizeof(ns1__wfExecutor), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__wfExecutor * SOAP_FMAC2 soap_instantiate_ns1__wfExecutor(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__wfExecutor(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__wfExecutor *p;
	size_t k = sizeof(ns1__wfExecutor);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__wfExecutor, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__wfExecutor);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__wfExecutor, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__wfExecutor location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__wfExecutor::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__wfExecutor(soap, tag ? tag : "ns1:wfExecutor", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__wfExecutor::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__wfExecutor(soap, this, tag, type);
}

SOAP_FMAC3 ns1__wfExecutor * SOAP_FMAC4 soap_get_ns1__wfExecutor(struct soap *soap, ns1__wfExecutor *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__wfExecutor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__identifiable::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
}

void ns1__identifiable::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__identifiable::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__identifiable(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__identifiable(struct soap *soap, const char *tag, int id, const ns1__identifiable *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_outliteral(soap, tag, (char*const*)&a->xsd__anyType::__item, "ns1:identifiable");
}

void *ns1__identifiable::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__identifiable(soap, tag, this, type);
}

SOAP_FMAC3 ns1__identifiable * SOAP_FMAC4 soap_in_ns1__identifiable(struct soap *soap, const char *tag, ns1__identifiable *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns1__identifiable *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__identifiable, sizeof(ns1__identifiable), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__identifiable)
		return (ns1__identifiable *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_inliteral(soap, tag, (char**)&a->xsd__anyType::__item))
		return NULL;
	return a;
}

SOAP_FMAC1 ns1__identifiable * SOAP_FMAC2 soap_instantiate_ns1__identifiable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__identifiable(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (soap && type && !soap_match_tag(soap, type, "ns1:identifiableBase"))
		return soap_instantiate_ns1__identifiableBase(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:executor"))
		return soap_instantiate_ns1__executor(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:actor"))
		return soap_instantiate_ns1__actor(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:wfExecutor"))
		return soap_instantiate_ns1__wfExecutor(soap, n, NULL, NULL, size);
	ns1__identifiable *p;
	size_t k = sizeof(ns1__identifiable);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__identifiable, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__identifiable);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__identifiable, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__identifiable location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__identifiable::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__identifiable(soap, tag ? tag : "ns1:identifiable", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__identifiable::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__identifiable(soap, this, tag, type);
}

SOAP_FMAC3 ns1__identifiable * SOAP_FMAC4 soap_get_ns1__identifiable(struct soap *soap, ns1__identifiable *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__identifiable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__identifiableBase::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__identifiable::soap_default(soap);
}

void ns1__identifiableBase::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->ns1__identifiable::soap_serialize(soap);
#endif
}

int ns1__identifiableBase::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__identifiableBase(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__identifiableBase(struct soap *soap, const char *tag, int id, const ns1__identifiableBase *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_outliteral(soap, tag, (char*const*)&a->xsd__anyType::__item, "ns1:identifiableBase");
}

void *ns1__identifiableBase::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__identifiableBase(soap, tag, this, type);
}

SOAP_FMAC3 ns1__identifiableBase * SOAP_FMAC4 soap_in_ns1__identifiableBase(struct soap *soap, const char *tag, ns1__identifiableBase *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns1__identifiableBase *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__identifiableBase, sizeof(ns1__identifiableBase), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__identifiableBase)
		return (ns1__identifiableBase *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_inliteral(soap, tag, (char**)&a->xsd__anyType::__item))
		return NULL;
	return a;
}

SOAP_FMAC1 ns1__identifiableBase * SOAP_FMAC2 soap_instantiate_ns1__identifiableBase(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__identifiableBase(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (soap && type && !soap_match_tag(soap, type, "ns1:executor"))
		return soap_instantiate_ns1__executor(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:actor"))
		return soap_instantiate_ns1__actor(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:wfExecutor"))
		return soap_instantiate_ns1__wfExecutor(soap, n, NULL, NULL, size);
	ns1__identifiableBase *p;
	size_t k = sizeof(ns1__identifiableBase);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__identifiableBase, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__identifiableBase);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__identifiableBase, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__identifiableBase location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__identifiableBase::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__identifiableBase(soap, tag ? tag : "ns1:identifiableBase", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__identifiableBase::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__identifiableBase(soap, this, tag, type);
}

SOAP_FMAC3 ns1__identifiableBase * SOAP_FMAC4 soap_get_ns1__identifiableBase(struct soap *soap, ns1__identifiableBase *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__identifiableBase(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__executor::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__identifiableBase::soap_default(soap);
	this->ns1__executor::id = NULL;
	this->ns1__executor::version = NULL;
	this->ns1__executor::name = NULL;
	this->ns1__executor::description = NULL;
	this->ns1__executor::fullName = NULL;
	this->ns1__executor::createDate = NULL;
}

void ns1__executor::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToLONG64(soap, &this->ns1__executor::id);
	soap_serialize_PointerToLONG64(soap, &this->ns1__executor::version);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__executor::name);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__executor::description);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__executor::fullName);
	soap_serialize_PointerTodateTime(soap, &this->ns1__executor::createDate);
	this->ns1__identifiableBase::soap_serialize(soap);
#endif
}

int ns1__executor::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__executor(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__executor(struct soap *soap, const char *tag, int id, const ns1__executor *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__executor), type ? type : "ns1:executor"))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "id", -1, &a->ns1__executor::id, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "version", -1, &a->ns1__executor::version, ""))
		return soap->error;
	if (soap_out_wstring(soap, "name", -1, (wchar_t*const*)&a->ns1__executor::name, ""))
		return soap->error;
	if (soap_out_wstring(soap, "description", -1, (wchar_t*const*)&a->ns1__executor::description, ""))
		return soap->error;
	if (soap_out_wstring(soap, "fullName", -1, (wchar_t*const*)&a->ns1__executor::fullName, ""))
		return soap->error;
	if (soap_out_PointerTodateTime(soap, "createDate", -1, &a->ns1__executor::createDate, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__executor::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__executor(soap, tag, this, type);
}

SOAP_FMAC3 ns1__executor * SOAP_FMAC4 soap_in_ns1__executor(struct soap *soap, const char *tag, ns1__executor *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__executor *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__executor, sizeof(ns1__executor), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__executor)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__executor *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item4 = 1;
	size_t soap_flag_id1 = 1;
	size_t soap_flag_version1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_description1 = 1;
	size_t soap_flag_fullName1 = 1;
	size_t soap_flag_createDate1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "id", &a->ns1__executor::id, "xsd:long"))
				{	soap_flag_id1--;
					continue;
				}
			}
			if (soap_flag_version1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "version", &a->ns1__executor::version, "xsd:long"))
				{	soap_flag_version1--;
					continue;
				}
			}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "name", (wchar_t**)&a->ns1__executor::name, "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "description", (wchar_t**)&a->ns1__executor::description, "xsd:string"))
				{	soap_flag_description1--;
					continue;
				}
			}
			if (soap_flag_fullName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "fullName", (wchar_t**)&a->ns1__executor::fullName, "xsd:string"))
				{	soap_flag_fullName1--;
					continue;
				}
			}
			if (soap_flag_createDate1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTodateTime(soap, "createDate", &a->ns1__executor::createDate, "xsd:dateTime"))
				{	soap_flag_createDate1--;
					continue;
				}
			}
			if (soap_flag___item4 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item4--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__executor *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__executor, SOAP_TYPE_ns1__executor, sizeof(ns1__executor), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__executor * SOAP_FMAC2 soap_instantiate_ns1__executor(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__executor(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (soap && type && !soap_match_tag(soap, type, "ns1:actor"))
		return soap_instantiate_ns1__actor(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:wfExecutor"))
		return soap_instantiate_ns1__wfExecutor(soap, n, NULL, NULL, size);
	ns1__executor *p;
	size_t k = sizeof(ns1__executor);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__executor, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__executor);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__executor, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__executor location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__executor::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__executor(soap, tag ? tag : "ns1:executor", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__executor::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__executor(soap, this, tag, type);
}

SOAP_FMAC3 ns1__executor * SOAP_FMAC4 soap_get_ns1__executor(struct soap *soap, ns1__executor *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__executor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__actor::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__executor::soap_default(soap);
	this->ns1__actor::code = NULL;
	soap_default_bool(soap, &this->ns1__actor::active);
	this->ns1__actor::email = NULL;
	this->ns1__actor::phone = NULL;
	this->ns1__actor::title = NULL;
	this->ns1__actor::department = NULL;
}

void ns1__actor::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToLONG64(soap, &this->ns1__actor::code);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__actor::email);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__actor::phone);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__actor::title);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->ns1__actor::department);
	this->ns1__executor::soap_serialize(soap);
#endif
}

int ns1__actor::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__actor(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__actor(struct soap *soap, const char *tag, int id, const ns1__actor *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__actor), type ? type : "ns1:actor"))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "id", -1, &a->ns1__executor::id, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "version", -1, &a->ns1__executor::version, ""))
		return soap->error;
	if (soap_out_wstring(soap, "name", -1, (wchar_t*const*)&a->ns1__executor::name, ""))
		return soap->error;
	if (soap_out_wstring(soap, "description", -1, (wchar_t*const*)&a->ns1__executor::description, ""))
		return soap->error;
	if (soap_out_wstring(soap, "fullName", -1, (wchar_t*const*)&a->ns1__executor::fullName, ""))
		return soap->error;
	if (soap_out_PointerTodateTime(soap, "createDate", -1, &a->ns1__executor::createDate, ""))
		return soap->error;
	if (soap_out_PointerToLONG64(soap, "code", -1, &a->ns1__actor::code, ""))
		return soap->error;
	if (soap_out_bool(soap, "active", -1, &a->ns1__actor::active, ""))
		return soap->error;
	if (soap_out_wstring(soap, "email", -1, (wchar_t*const*)&a->ns1__actor::email, ""))
		return soap->error;
	if (soap_out_wstring(soap, "phone", -1, (wchar_t*const*)&a->ns1__actor::phone, ""))
		return soap->error;
	if (soap_out_wstring(soap, "title", -1, (wchar_t*const*)&a->ns1__actor::title, ""))
		return soap->error;
	if (soap_out_wstring(soap, "department", -1, (wchar_t*const*)&a->ns1__actor::department, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__actor::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__actor(soap, tag, this, type);
}

SOAP_FMAC3 ns1__actor * SOAP_FMAC4 soap_in_ns1__actor(struct soap *soap, const char *tag, ns1__actor *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__actor *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__actor, sizeof(ns1__actor), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__actor)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__actor *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item5 = 1;
	size_t soap_flag_id2 = 1;
	size_t soap_flag_version2 = 1;
	size_t soap_flag_name2 = 1;
	size_t soap_flag_description2 = 1;
	size_t soap_flag_fullName2 = 1;
	size_t soap_flag_createDate2 = 1;
	size_t soap_flag_code1 = 1;
	size_t soap_flag_active1 = 1;
	size_t soap_flag_email1 = 1;
	size_t soap_flag_phone1 = 1;
	size_t soap_flag_title1 = 1;
	size_t soap_flag_department1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id2 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "id", &a->ns1__executor::id, "xsd:long"))
				{	soap_flag_id2--;
					continue;
				}
			}
			if (soap_flag_version2 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "version", &a->ns1__executor::version, "xsd:long"))
				{	soap_flag_version2--;
					continue;
				}
			}
			if (soap_flag_name2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "name", (wchar_t**)&a->ns1__executor::name, "xsd:string"))
				{	soap_flag_name2--;
					continue;
				}
			}
			if (soap_flag_description2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "description", (wchar_t**)&a->ns1__executor::description, "xsd:string"))
				{	soap_flag_description2--;
					continue;
				}
			}
			if (soap_flag_fullName2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "fullName", (wchar_t**)&a->ns1__executor::fullName, "xsd:string"))
				{	soap_flag_fullName2--;
					continue;
				}
			}
			if (soap_flag_createDate2 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTodateTime(soap, "createDate", &a->ns1__executor::createDate, "xsd:dateTime"))
				{	soap_flag_createDate2--;
					continue;
				}
			}
			if (soap_flag_code1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToLONG64(soap, "code", &a->ns1__actor::code, "xsd:long"))
				{	soap_flag_code1--;
					continue;
				}
			}
			if (soap_flag_active1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "active", &a->ns1__actor::active, "xsd:boolean"))
				{	soap_flag_active1--;
					continue;
				}
			}
			if (soap_flag_email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "email", (wchar_t**)&a->ns1__actor::email, "xsd:string"))
				{	soap_flag_email1--;
					continue;
				}
			}
			if (soap_flag_phone1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "phone", (wchar_t**)&a->ns1__actor::phone, "xsd:string"))
				{	soap_flag_phone1--;
					continue;
				}
			}
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "title", (wchar_t**)&a->ns1__actor::title, "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			}
			if (soap_flag_department1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "department", (wchar_t**)&a->ns1__actor::department, "xsd:string"))
				{	soap_flag_department1--;
					continue;
				}
			}
			if (soap_flag___item5 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item5--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_active1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__actor *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__actor, SOAP_TYPE_ns1__actor, sizeof(ns1__actor), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__actor * SOAP_FMAC2 soap_instantiate_ns1__actor(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__actor(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__actor *p;
	size_t k = sizeof(ns1__actor);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__actor, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__actor);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__actor, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__actor location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__actor::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__actor(soap, tag ? tag : "ns1:actor", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__actor::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__actor(soap, this, tag, type);
}

SOAP_FMAC3 ns1__actor * SOAP_FMAC4 soap_get_ns1__actor(struct soap *soap, ns1__actor *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__actor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__user::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__user::actor = NULL;
	this->ns1__user::securedKey = NULL;
}

void ns1__user::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__actor(soap, &this->ns1__user::actor);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__user::securedKey);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__user::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__user(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__user(struct soap *soap, const char *tag, int id, const ns1__user *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__user), type ? type : "ns1:user"))
		return soap->error;
	if (soap_out_PointerTons1__actor(soap, "actor", -1, &a->ns1__user::actor, ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "securedKey", -1, &a->ns1__user::securedKey, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__user::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__user(soap, tag, this, type);
}

SOAP_FMAC3 ns1__user * SOAP_FMAC4 soap_in_ns1__user(struct soap *soap, const char *tag, ns1__user *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__user *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__user, sizeof(ns1__user), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__user)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__user *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_actor1 = 1;
	size_t soap_flag_securedKey1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_actor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__actor(soap, "actor", &a->ns1__user::actor, "ns1:actor"))
				{	soap_flag_actor1--;
					continue;
				}
			}
			if (soap_flag_securedKey1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__base64Binary(soap, "securedKey", &a->ns1__user::securedKey, "xsd:base64Binary"))
				{	soap_flag_securedKey1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__user *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__user, SOAP_TYPE_ns1__user, sizeof(ns1__user), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__user * SOAP_FMAC2 soap_instantiate_ns1__user(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__user(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__user *p;
	size_t k = sizeof(ns1__user);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__user, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__user);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__user, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__user location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__user::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__user(soap, tag ? tag : "ns1:user", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__user::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__user(soap, this, tag, type);
}

SOAP_FMAC3 ns1__user * SOAP_FMAC4 soap_get_ns1__user(struct soap *soap, ns1__user *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__user(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__authenticateByCallerPrincipalResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__authenticateByCallerPrincipalResponse::result = NULL;
}

void ns1__authenticateByCallerPrincipalResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__user(soap, &this->ns1__authenticateByCallerPrincipalResponse::result);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__authenticateByCallerPrincipalResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__authenticateByCallerPrincipalResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByCallerPrincipalResponse(struct soap *soap, const char *tag, int id, const ns1__authenticateByCallerPrincipalResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse), type ? type : "ns1:authenticateByCallerPrincipalResponse"))
		return soap->error;
	if (soap_out_PointerTons1__user(soap, "result", -1, &a->ns1__authenticateByCallerPrincipalResponse::result, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__authenticateByCallerPrincipalResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__authenticateByCallerPrincipalResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__authenticateByCallerPrincipalResponse * SOAP_FMAC4 soap_in_ns1__authenticateByCallerPrincipalResponse(struct soap *soap, const char *tag, ns1__authenticateByCallerPrincipalResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__authenticateByCallerPrincipalResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse, sizeof(ns1__authenticateByCallerPrincipalResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__authenticateByCallerPrincipalResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_result1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__user(soap, "result", &a->ns1__authenticateByCallerPrincipalResponse::result, "ns1:user"))
				{	soap_flag_result1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__authenticateByCallerPrincipalResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse, SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse, sizeof(ns1__authenticateByCallerPrincipalResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__authenticateByCallerPrincipalResponse * SOAP_FMAC2 soap_instantiate_ns1__authenticateByCallerPrincipalResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__authenticateByCallerPrincipalResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__authenticateByCallerPrincipalResponse *p;
	size_t k = sizeof(ns1__authenticateByCallerPrincipalResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__authenticateByCallerPrincipalResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__authenticateByCallerPrincipalResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__authenticateByCallerPrincipalResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__authenticateByCallerPrincipalResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__authenticateByCallerPrincipalResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__authenticateByCallerPrincipalResponse(soap, tag ? tag : "ns1:authenticateByCallerPrincipalResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__authenticateByCallerPrincipalResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__authenticateByCallerPrincipalResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__authenticateByCallerPrincipalResponse * SOAP_FMAC4 soap_get_ns1__authenticateByCallerPrincipalResponse(struct soap *soap, ns1__authenticateByCallerPrincipalResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__authenticateByCallerPrincipalResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__authenticateByCallerPrincipal::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
}

void ns1__authenticateByCallerPrincipal::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__authenticateByCallerPrincipal::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__authenticateByCallerPrincipal(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authenticateByCallerPrincipal(struct soap *soap, const char *tag, int id, const ns1__authenticateByCallerPrincipal *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_outliteral(soap, tag, (char*const*)&a->xsd__anyType::__item, "ns1:authenticateByCallerPrincipal");
}

void *ns1__authenticateByCallerPrincipal::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__authenticateByCallerPrincipal(soap, tag, this, type);
}

SOAP_FMAC3 ns1__authenticateByCallerPrincipal * SOAP_FMAC4 soap_in_ns1__authenticateByCallerPrincipal(struct soap *soap, const char *tag, ns1__authenticateByCallerPrincipal *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns1__authenticateByCallerPrincipal *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__authenticateByCallerPrincipal, sizeof(ns1__authenticateByCallerPrincipal), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__authenticateByCallerPrincipal)
		return (ns1__authenticateByCallerPrincipal *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_inliteral(soap, tag, (char**)&a->xsd__anyType::__item))
		return NULL;
	return a;
}

SOAP_FMAC1 ns1__authenticateByCallerPrincipal * SOAP_FMAC2 soap_instantiate_ns1__authenticateByCallerPrincipal(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__authenticateByCallerPrincipal(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__authenticateByCallerPrincipal *p;
	size_t k = sizeof(ns1__authenticateByCallerPrincipal);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__authenticateByCallerPrincipal, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__authenticateByCallerPrincipal);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__authenticateByCallerPrincipal, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__authenticateByCallerPrincipal location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__authenticateByCallerPrincipal::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__authenticateByCallerPrincipal(soap, tag ? tag : "ns1:authenticateByCallerPrincipal", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__authenticateByCallerPrincipal::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__authenticateByCallerPrincipal(soap, this, tag, type);
}

SOAP_FMAC3 ns1__authenticateByCallerPrincipal * SOAP_FMAC4 soap_get_ns1__authenticateByCallerPrincipal(struct soap *soap, ns1__authenticateByCallerPrincipal *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__authenticateByCallerPrincipal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__string::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->xsd__string::__item = NULL;
}

void xsd__string::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->xsd__string::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__string::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__string(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, const xsd__string *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_wstring(soap, tag, id, (wchar_t*const*)&a->xsd__string::__item, "xsd:string");
}

void *xsd__string::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__string(soap, tag, this, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, xsd__string *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__string *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__string, sizeof(xsd__string), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__string)
		return (xsd__string *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_wstring(soap, tag, (wchar_t**)&a->xsd__string::__item, "xsd:string"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__string *p;
	size_t k = sizeof(xsd__string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__string);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__string, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__string::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__string(soap, tag ? tag : "xsd:string", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__string::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__string(soap, this, tag, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, xsd__string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__long::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_LONG64(soap, &this->xsd__long::__item);
}

void xsd__long::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__long::__item, SOAP_TYPE_LONG64);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__long::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__long(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap *soap, const char *tag, int id, const xsd__long *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_LONG64(soap, tag, id, &a->xsd__long::__item, "xsd:long");
}

void *xsd__long::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__long(soap, tag, this, type);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap *soap, const char *tag, xsd__long *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__long *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__long, sizeof(xsd__long), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__long)
		return (xsd__long *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_LONG64(soap, tag, &a->xsd__long::__item, "xsd:long"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__long(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__long *p;
	size_t k = sizeof(xsd__long);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__long, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__long);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__long, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__long location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__long::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__long(soap, tag ? tag : "xsd:long", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__long::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__long(soap, this, tag, type);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap *soap, xsd__long *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__int::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_int(soap, &this->xsd__int::__item);
}

void xsd__int::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__int::__item, SOAP_TYPE_int);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__int::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__int(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const xsd__int *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_int(soap, tag, id, &a->xsd__int::__item, "xsd:int");
}

void *xsd__int::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__int(soap, tag, this, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, xsd__int *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__int *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__int, sizeof(xsd__int), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__int)
		return (xsd__int *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_int(soap, tag, &a->xsd__int::__item, "xsd:int"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__int(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__int *p;
	size_t k = sizeof(xsd__int);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__int, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__int);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__int, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__int location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__int::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__int(soap, tag ? tag : "xsd:int", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__int::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__int(soap, this, tag, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, xsd__int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__dateTime::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_dateTime(soap, &this->xsd__dateTime::__item);
}

void xsd__dateTime::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__dateTime::__item, SOAP_TYPE_dateTime);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__dateTime::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__dateTime(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap *soap, const char *tag, int id, const xsd__dateTime *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_dateTime(soap, tag, id, &a->xsd__dateTime::__item, "xsd:dateTime");
}

void *xsd__dateTime::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__dateTime(soap, tag, this, type);
}

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap *soap, const char *tag, xsd__dateTime *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__dateTime *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__dateTime, sizeof(xsd__dateTime), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__dateTime)
		return (xsd__dateTime *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_dateTime(soap, tag, &a->xsd__dateTime::__item, "xsd:dateTime"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__dateTime(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__dateTime *p;
	size_t k = sizeof(xsd__dateTime);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__dateTime, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__dateTime);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__dateTime, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__dateTime location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__dateTime::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__dateTime(soap, tag ? tag : "xsd:dateTime", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__dateTime::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__dateTime(soap, this, tag, type);
}

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap *soap, xsd__dateTime *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__boolean::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_bool(soap, &this->xsd__boolean::__item);
}

void xsd__boolean::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__boolean::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__boolean(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const xsd__boolean *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_bool(soap, tag, id, &a->xsd__boolean::__item, "xsd:boolean");
}

void *xsd__boolean::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__boolean(soap, tag, this, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, xsd__boolean *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__boolean *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(xsd__boolean), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__boolean)
		return (xsd__boolean *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_bool(soap, tag, &a->xsd__boolean::__item, "xsd:boolean"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__boolean(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__boolean *p;
	size_t k = sizeof(xsd__boolean);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__boolean, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__boolean);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__boolean, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__boolean location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__boolean::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__boolean(soap, tag ? tag : "xsd:boolean", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__boolean::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__boolean(soap, this, tag, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, xsd__boolean *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__base64Binary_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->xsd__base64Binary_::__item.xsd__base64Binary::soap_default(soap);
}

void xsd__base64Binary_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->xsd__base64Binary_::__item, SOAP_TYPE_xsd__base64Binary);
	this->xsd__base64Binary_::__item.soap_serialize(soap);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__base64Binary_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__base64Binary_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap *soap, const char *tag, int id, const xsd__base64Binary_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return (a->xsd__base64Binary_::__item).soap_out(soap, tag, id, "xsd:base64Binary");
}

void *xsd__base64Binary_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap *soap, const char *tag, xsd__base64Binary_ *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__base64Binary_ *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary_, sizeof(xsd__base64Binary_), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__base64Binary_)
		return (xsd__base64Binary_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!(a->xsd__base64Binary_::__item).soap_in(soap, tag, "xsd:base64Binary"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__base64Binary_ *p;
	size_t k = sizeof(xsd__base64Binary_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__base64Binary_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__base64Binary_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__base64Binary_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__base64Binary_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__base64Binary_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__base64Binary_(soap, tag ? tag : "xsd:base64Binary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->__ptr = NULL;
	this->__size = 0;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr)
		(void)soap_attachment_reference(soap, this, this->__ptr, this->__size, SOAP_TYPE_xsd__base64Binary, this->id, this->type);
#endif
}

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap *soap, xsd__base64Binary a)
{
	return soap_s2base64(soap, a.__ptr, NULL, a.__size);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, a->__ptr, a->__size, a->id, a->type, a->options, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_xsd__base64Binary, NULL);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap *soap, const char *s, xsd__base64Binary *a)
{
	a->__ptr = (unsigned char*)soap_base642s(soap, s, NULL, 0, &a->__size);
	if (!a->__ptr)
		return soap->error;
	return SOAP_OK;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_attachment_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__base64Binary *p;
	size_t k = sizeof(xsd__base64Binary);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__base64Binary);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__base64Binary, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__base64Binary location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__base64Binary(soap, tag ? tag : "xsd:base64Binary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__anyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int xsd__anyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const xsd__anyType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_outliteral(soap, tag, (char*const*)&a->xsd__anyType::__item, NULL);
}

void *xsd__anyType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap *soap, const char *tag, xsd__anyType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__anyType)
		return (xsd__anyType *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_inliteral(soap, tag, (char**)&a->xsd__anyType::__item))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (soap && type && !soap_match_tag(soap, type, "xsd:base64Binary"))
		return soap_instantiate_xsd__base64Binary_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:boolean"))
		return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:dateTime"))
		return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:int"))
		return soap_instantiate_xsd__int(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:long"))
		return soap_instantiate_xsd__long(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:string"))
		return soap_instantiate_xsd__string(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:classPresentationType"))
		return soap_instantiate_ns1__classPresentationType_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:variableStoreType"))
		return soap_instantiate_ns1__variableStoreType_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:authenticateByCallerPrincipal"))
		return soap_instantiate_ns1__authenticateByCallerPrincipal(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:authenticateByCallerPrincipalResponse"))
		return soap_instantiate_ns1__authenticateByCallerPrincipalResponse(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:user"))
		return soap_instantiate_ns1__user(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:identifiable"))
		return soap_instantiate_ns1__identifiable(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:authenticateByLoginPassword"))
		return soap_instantiate_ns1__authenticateByLoginPassword(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:authenticateByLoginPasswordResponse"))
		return soap_instantiate_ns1__authenticateByLoginPasswordResponse(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:authenticateByTrustedPrincipal"))
		return soap_instantiate_ns1__authenticateByTrustedPrincipal(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:authenticateByTrustedPrincipalResponse"))
		return soap_instantiate_ns1__authenticateByTrustedPrincipalResponse(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:authenticateByKerberos"))
		return soap_instantiate_ns1__authenticateByKerberos(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:authenticateByKerberosResponse"))
		return soap_instantiate_ns1__authenticateByKerberosResponse(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:reassignTask"))
		return soap_instantiate_ns1__reassignTask(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:reassignTaskResponse"))
		return soap_instantiate_ns1__reassignTaskResponse(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:getMyTasks"))
		return soap_instantiate_ns1__getMyTasks(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:batchPresentation"))
		return soap_instantiate_ns1__batchPresentation(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:getMyTasksResponse"))
		return soap_instantiate_ns1__getMyTasksResponse(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:wfTask"))
		return soap_instantiate_ns1__wfTask(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:wfVariable"))
		return soap_instantiate_ns1__wfVariable(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:variableDefinition"))
		return soap_instantiate_ns1__variableDefinition(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:userType"))
		return soap_instantiate_ns1__userType(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:markTaskOpened"))
		return soap_instantiate_ns1__markTaskOpened(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:markTaskOpenedResponse"))
		return soap_instantiate_ns1__markTaskOpenedResponse(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:assignTask"))
		return soap_instantiate_ns1__assignTask(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:assignTaskResponse"))
		return soap_instantiate_ns1__assignTaskResponse(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:getTasks"))
		return soap_instantiate_ns1__getTasks(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:getTasksResponse"))
		return soap_instantiate_ns1__getTasksResponse(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:completeTaskWS"))
		return soap_instantiate_ns1__completeTaskWS(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:variable"))
		return soap_instantiate_ns1__variable(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:completeTaskWSResponse"))
		return soap_instantiate_ns1__completeTaskWSResponse(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:getProcessTasks"))
		return soap_instantiate_ns1__getProcessTasks(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:getProcessTasksResponse"))
		return soap_instantiate_ns1__getProcessTasksResponse(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:getTask"))
		return soap_instantiate_ns1__getTask(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:getTaskResponse"))
		return soap_instantiate_ns1__getTaskResponse(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:reassignTasks"))
		return soap_instantiate_ns1__reassignTasks(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:reassignTasksResponse"))
		return soap_instantiate_ns1__reassignTasksResponse(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:identifiableBase"))
		return soap_instantiate_ns1__identifiableBase(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:executor"))
		return soap_instantiate_ns1__executor(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:actor"))
		return soap_instantiate_ns1__actor(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:wfExecutor"))
		return soap_instantiate_ns1__wfExecutor(soap, n, NULL, NULL, size);
	xsd__anyType *p;
	size_t k = sizeof(xsd__anyType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__anyType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__anyType);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__anyType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__anyType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__anyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__anyType(soap, tag ? tag : "xsd:anyType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap *soap, xsd__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__reassignTasks(struct soap *soap, struct __ns1__reassignTasks *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__reassignTasks_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__reassignTasks(struct soap *soap, const struct __ns1__reassignTasks *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__reassignTasks(soap, &a->ns1__reassignTasks_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__reassignTasks(struct soap *soap, const char *tag, int id, const struct __ns1__reassignTasks *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__reassignTasks(soap, "ns1:reassignTasks", -1, &a->ns1__reassignTasks_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__reassignTasks * SOAP_FMAC4 soap_in___ns1__reassignTasks(struct soap *soap, const char *tag, struct __ns1__reassignTasks *a, const char *type)
{
	size_t soap_flag_ns1__reassignTasks_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__reassignTasks *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__reassignTasks, sizeof(struct __ns1__reassignTasks), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__reassignTasks(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__reassignTasks_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__reassignTasks(soap, "ns1:reassignTasks", &a->ns1__reassignTasks_, "ns1:reassignTasks"))
				{	soap_flag_ns1__reassignTasks_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__reassignTasks * SOAP_FMAC2 soap_instantiate___ns1__reassignTasks(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__reassignTasks(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__reassignTasks *p;
	size_t k = sizeof(struct __ns1__reassignTasks);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__reassignTasks, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__reassignTasks);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__reassignTasks, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__reassignTasks location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__reassignTasks(struct soap *soap, const struct __ns1__reassignTasks *a, const char *tag, const char *type)
{
	if (soap_out___ns1__reassignTasks(soap, tag ? tag : "-ns1:reassignTasks", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__reassignTasks * SOAP_FMAC4 soap_get___ns1__reassignTasks(struct soap *soap, struct __ns1__reassignTasks *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__reassignTasks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getTask(struct soap *soap, struct __ns1__getTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getTask_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getTask(struct soap *soap, const struct __ns1__getTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__getTask(soap, &a->ns1__getTask_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getTask(struct soap *soap, const char *tag, int id, const struct __ns1__getTask *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__getTask(soap, "ns1:getTask", -1, &a->ns1__getTask_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getTask * SOAP_FMAC4 soap_in___ns1__getTask(struct soap *soap, const char *tag, struct __ns1__getTask *a, const char *type)
{
	size_t soap_flag_ns1__getTask_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getTask *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getTask, sizeof(struct __ns1__getTask), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getTask(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getTask_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__getTask(soap, "ns1:getTask", &a->ns1__getTask_, "ns1:getTask"))
				{	soap_flag_ns1__getTask_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getTask * SOAP_FMAC2 soap_instantiate___ns1__getTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getTask(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getTask *p;
	size_t k = sizeof(struct __ns1__getTask);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getTask, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getTask);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getTask, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getTask location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getTask(struct soap *soap, const struct __ns1__getTask *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getTask(soap, tag ? tag : "-ns1:getTask", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getTask * SOAP_FMAC4 soap_get___ns1__getTask(struct soap *soap, struct __ns1__getTask *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getProcessTasks(struct soap *soap, struct __ns1__getProcessTasks *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getProcessTasks_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getProcessTasks(struct soap *soap, const struct __ns1__getProcessTasks *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__getProcessTasks(soap, &a->ns1__getProcessTasks_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getProcessTasks(struct soap *soap, const char *tag, int id, const struct __ns1__getProcessTasks *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__getProcessTasks(soap, "ns1:getProcessTasks", -1, &a->ns1__getProcessTasks_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getProcessTasks * SOAP_FMAC4 soap_in___ns1__getProcessTasks(struct soap *soap, const char *tag, struct __ns1__getProcessTasks *a, const char *type)
{
	size_t soap_flag_ns1__getProcessTasks_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getProcessTasks *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getProcessTasks, sizeof(struct __ns1__getProcessTasks), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getProcessTasks(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getProcessTasks_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__getProcessTasks(soap, "ns1:getProcessTasks", &a->ns1__getProcessTasks_, "ns1:getProcessTasks"))
				{	soap_flag_ns1__getProcessTasks_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getProcessTasks * SOAP_FMAC2 soap_instantiate___ns1__getProcessTasks(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getProcessTasks(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getProcessTasks *p;
	size_t k = sizeof(struct __ns1__getProcessTasks);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getProcessTasks, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getProcessTasks);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getProcessTasks, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getProcessTasks location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getProcessTasks(struct soap *soap, const struct __ns1__getProcessTasks *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getProcessTasks(soap, tag ? tag : "-ns1:getProcessTasks", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getProcessTasks * SOAP_FMAC4 soap_get___ns1__getProcessTasks(struct soap *soap, struct __ns1__getProcessTasks *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getProcessTasks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__completeTaskWS(struct soap *soap, struct __ns1__completeTaskWS *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__completeTaskWS_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__completeTaskWS(struct soap *soap, const struct __ns1__completeTaskWS *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__completeTaskWS(soap, &a->ns1__completeTaskWS_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__completeTaskWS(struct soap *soap, const char *tag, int id, const struct __ns1__completeTaskWS *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__completeTaskWS(soap, "ns1:completeTaskWS", -1, &a->ns1__completeTaskWS_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__completeTaskWS * SOAP_FMAC4 soap_in___ns1__completeTaskWS(struct soap *soap, const char *tag, struct __ns1__completeTaskWS *a, const char *type)
{
	size_t soap_flag_ns1__completeTaskWS_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__completeTaskWS *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__completeTaskWS, sizeof(struct __ns1__completeTaskWS), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__completeTaskWS(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__completeTaskWS_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__completeTaskWS(soap, "ns1:completeTaskWS", &a->ns1__completeTaskWS_, "ns1:completeTaskWS"))
				{	soap_flag_ns1__completeTaskWS_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__completeTaskWS * SOAP_FMAC2 soap_instantiate___ns1__completeTaskWS(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__completeTaskWS(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__completeTaskWS *p;
	size_t k = sizeof(struct __ns1__completeTaskWS);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__completeTaskWS, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__completeTaskWS);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__completeTaskWS, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__completeTaskWS location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__completeTaskWS(struct soap *soap, const struct __ns1__completeTaskWS *a, const char *tag, const char *type)
{
	if (soap_out___ns1__completeTaskWS(soap, tag ? tag : "-ns1:completeTaskWS", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__completeTaskWS * SOAP_FMAC4 soap_get___ns1__completeTaskWS(struct soap *soap, struct __ns1__completeTaskWS *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__completeTaskWS(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__completeTaskWSResponse(struct soap *soap, struct __ns1__completeTaskWSResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__completeTaskWSResponse_.ns1__completeTaskWSResponse::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__completeTaskWSResponse(struct soap *soap, const struct __ns1__completeTaskWSResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	a->ns1__completeTaskWSResponse_.soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__completeTaskWSResponse(struct soap *soap, const char *tag, int id, const struct __ns1__completeTaskWSResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	soap_element_result(soap, "ns1:completeTaskWSResponse");
	if (a->ns1__completeTaskWSResponse_.soap_out(soap, "ns1:completeTaskWSResponse", -1, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__completeTaskWSResponse * SOAP_FMAC4 soap_in___ns1__completeTaskWSResponse(struct soap *soap, const char *tag, struct __ns1__completeTaskWSResponse *a, const char *type)
{
	size_t soap_flag_ns1__completeTaskWSResponse_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__completeTaskWSResponse *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__completeTaskWSResponse, sizeof(struct __ns1__completeTaskWSResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default___ns1__completeTaskWSResponse(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__completeTaskWSResponse_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (a->ns1__completeTaskWSResponse_.soap_in(soap, "ns1:completeTaskWSResponse", "ns1:completeTaskWSResponse"))
				{	soap_flag_ns1__completeTaskWSResponse_--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:completeTaskWSResponse");
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ns1__completeTaskWSResponse_ > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__completeTaskWSResponse * SOAP_FMAC2 soap_instantiate___ns1__completeTaskWSResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__completeTaskWSResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__completeTaskWSResponse *p;
	size_t k = sizeof(struct __ns1__completeTaskWSResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__completeTaskWSResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__completeTaskWSResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__completeTaskWSResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__completeTaskWSResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__completeTaskWSResponse(struct soap *soap, const struct __ns1__completeTaskWSResponse *a, const char *tag, const char *type)
{
	if (soap_out___ns1__completeTaskWSResponse(soap, tag ? tag : "-ns1:completeTaskWSResponse", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__completeTaskWSResponse * SOAP_FMAC4 soap_get___ns1__completeTaskWSResponse(struct soap *soap, struct __ns1__completeTaskWSResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__completeTaskWSResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getTasks(struct soap *soap, struct __ns1__getTasks *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getTasks_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getTasks(struct soap *soap, const struct __ns1__getTasks *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__getTasks(soap, &a->ns1__getTasks_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getTasks(struct soap *soap, const char *tag, int id, const struct __ns1__getTasks *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__getTasks(soap, "ns1:getTasks", -1, &a->ns1__getTasks_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getTasks * SOAP_FMAC4 soap_in___ns1__getTasks(struct soap *soap, const char *tag, struct __ns1__getTasks *a, const char *type)
{
	size_t soap_flag_ns1__getTasks_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getTasks *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getTasks, sizeof(struct __ns1__getTasks), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getTasks(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getTasks_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__getTasks(soap, "ns1:getTasks", &a->ns1__getTasks_, "ns1:getTasks"))
				{	soap_flag_ns1__getTasks_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getTasks * SOAP_FMAC2 soap_instantiate___ns1__getTasks(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getTasks(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getTasks *p;
	size_t k = sizeof(struct __ns1__getTasks);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getTasks, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getTasks);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getTasks, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getTasks location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getTasks(struct soap *soap, const struct __ns1__getTasks *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getTasks(soap, tag ? tag : "-ns1:getTasks", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getTasks * SOAP_FMAC4 soap_get___ns1__getTasks(struct soap *soap, struct __ns1__getTasks *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getTasks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__assignTask(struct soap *soap, struct __ns1__assignTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__assignTask_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__assignTask(struct soap *soap, const struct __ns1__assignTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__assignTask(soap, &a->ns1__assignTask_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__assignTask(struct soap *soap, const char *tag, int id, const struct __ns1__assignTask *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__assignTask(soap, "ns1:assignTask", -1, &a->ns1__assignTask_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__assignTask * SOAP_FMAC4 soap_in___ns1__assignTask(struct soap *soap, const char *tag, struct __ns1__assignTask *a, const char *type)
{
	size_t soap_flag_ns1__assignTask_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__assignTask *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__assignTask, sizeof(struct __ns1__assignTask), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__assignTask(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__assignTask_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__assignTask(soap, "ns1:assignTask", &a->ns1__assignTask_, "ns1:assignTask"))
				{	soap_flag_ns1__assignTask_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__assignTask * SOAP_FMAC2 soap_instantiate___ns1__assignTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__assignTask(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__assignTask *p;
	size_t k = sizeof(struct __ns1__assignTask);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__assignTask, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__assignTask);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__assignTask, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__assignTask location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__assignTask(struct soap *soap, const struct __ns1__assignTask *a, const char *tag, const char *type)
{
	if (soap_out___ns1__assignTask(soap, tag ? tag : "-ns1:assignTask", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__assignTask * SOAP_FMAC4 soap_get___ns1__assignTask(struct soap *soap, struct __ns1__assignTask *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__assignTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__assignTaskResponse(struct soap *soap, struct __ns1__assignTaskResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__assignTaskResponse_.ns1__assignTaskResponse::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__assignTaskResponse(struct soap *soap, const struct __ns1__assignTaskResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	a->ns1__assignTaskResponse_.soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__assignTaskResponse(struct soap *soap, const char *tag, int id, const struct __ns1__assignTaskResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	soap_element_result(soap, "ns1:assignTaskResponse");
	if (a->ns1__assignTaskResponse_.soap_out(soap, "ns1:assignTaskResponse", -1, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__assignTaskResponse * SOAP_FMAC4 soap_in___ns1__assignTaskResponse(struct soap *soap, const char *tag, struct __ns1__assignTaskResponse *a, const char *type)
{
	size_t soap_flag_ns1__assignTaskResponse_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__assignTaskResponse *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__assignTaskResponse, sizeof(struct __ns1__assignTaskResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default___ns1__assignTaskResponse(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__assignTaskResponse_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (a->ns1__assignTaskResponse_.soap_in(soap, "ns1:assignTaskResponse", "ns1:assignTaskResponse"))
				{	soap_flag_ns1__assignTaskResponse_--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:assignTaskResponse");
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ns1__assignTaskResponse_ > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__assignTaskResponse * SOAP_FMAC2 soap_instantiate___ns1__assignTaskResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__assignTaskResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__assignTaskResponse *p;
	size_t k = sizeof(struct __ns1__assignTaskResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__assignTaskResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__assignTaskResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__assignTaskResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__assignTaskResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__assignTaskResponse(struct soap *soap, const struct __ns1__assignTaskResponse *a, const char *tag, const char *type)
{
	if (soap_out___ns1__assignTaskResponse(soap, tag ? tag : "-ns1:assignTaskResponse", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__assignTaskResponse * SOAP_FMAC4 soap_get___ns1__assignTaskResponse(struct soap *soap, struct __ns1__assignTaskResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__assignTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__markTaskOpened(struct soap *soap, struct __ns1__markTaskOpened *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__markTaskOpened_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__markTaskOpened(struct soap *soap, const struct __ns1__markTaskOpened *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__markTaskOpened(soap, &a->ns1__markTaskOpened_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__markTaskOpened(struct soap *soap, const char *tag, int id, const struct __ns1__markTaskOpened *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__markTaskOpened(soap, "ns1:markTaskOpened", -1, &a->ns1__markTaskOpened_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__markTaskOpened * SOAP_FMAC4 soap_in___ns1__markTaskOpened(struct soap *soap, const char *tag, struct __ns1__markTaskOpened *a, const char *type)
{
	size_t soap_flag_ns1__markTaskOpened_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__markTaskOpened *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__markTaskOpened, sizeof(struct __ns1__markTaskOpened), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__markTaskOpened(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__markTaskOpened_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__markTaskOpened(soap, "ns1:markTaskOpened", &a->ns1__markTaskOpened_, "ns1:markTaskOpened"))
				{	soap_flag_ns1__markTaskOpened_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__markTaskOpened * SOAP_FMAC2 soap_instantiate___ns1__markTaskOpened(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__markTaskOpened(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__markTaskOpened *p;
	size_t k = sizeof(struct __ns1__markTaskOpened);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__markTaskOpened, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__markTaskOpened);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__markTaskOpened, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__markTaskOpened location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__markTaskOpened(struct soap *soap, const struct __ns1__markTaskOpened *a, const char *tag, const char *type)
{
	if (soap_out___ns1__markTaskOpened(soap, tag ? tag : "-ns1:markTaskOpened", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__markTaskOpened * SOAP_FMAC4 soap_get___ns1__markTaskOpened(struct soap *soap, struct __ns1__markTaskOpened *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__markTaskOpened(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__markTaskOpenedResponse(struct soap *soap, struct __ns1__markTaskOpenedResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__markTaskOpenedResponse_.ns1__markTaskOpenedResponse::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__markTaskOpenedResponse(struct soap *soap, const struct __ns1__markTaskOpenedResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	a->ns1__markTaskOpenedResponse_.soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__markTaskOpenedResponse(struct soap *soap, const char *tag, int id, const struct __ns1__markTaskOpenedResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	soap_element_result(soap, "ns1:markTaskOpenedResponse");
	if (a->ns1__markTaskOpenedResponse_.soap_out(soap, "ns1:markTaskOpenedResponse", -1, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__markTaskOpenedResponse * SOAP_FMAC4 soap_in___ns1__markTaskOpenedResponse(struct soap *soap, const char *tag, struct __ns1__markTaskOpenedResponse *a, const char *type)
{
	size_t soap_flag_ns1__markTaskOpenedResponse_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__markTaskOpenedResponse *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__markTaskOpenedResponse, sizeof(struct __ns1__markTaskOpenedResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	soap_default___ns1__markTaskOpenedResponse(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__markTaskOpenedResponse_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (a->ns1__markTaskOpenedResponse_.soap_in(soap, "ns1:markTaskOpenedResponse", "ns1:markTaskOpenedResponse"))
				{	soap_flag_ns1__markTaskOpenedResponse_--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:markTaskOpenedResponse");
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ns1__markTaskOpenedResponse_ > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__markTaskOpenedResponse * SOAP_FMAC2 soap_instantiate___ns1__markTaskOpenedResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__markTaskOpenedResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__markTaskOpenedResponse *p;
	size_t k = sizeof(struct __ns1__markTaskOpenedResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__markTaskOpenedResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__markTaskOpenedResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__markTaskOpenedResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__markTaskOpenedResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__markTaskOpenedResponse(struct soap *soap, const struct __ns1__markTaskOpenedResponse *a, const char *tag, const char *type)
{
	if (soap_out___ns1__markTaskOpenedResponse(soap, tag ? tag : "-ns1:markTaskOpenedResponse", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__markTaskOpenedResponse * SOAP_FMAC4 soap_get___ns1__markTaskOpenedResponse(struct soap *soap, struct __ns1__markTaskOpenedResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__markTaskOpenedResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMyTasks(struct soap *soap, struct __ns1__getMyTasks *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getMyTasks_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMyTasks(struct soap *soap, const struct __ns1__getMyTasks *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__getMyTasks(soap, &a->ns1__getMyTasks_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMyTasks(struct soap *soap, const char *tag, int id, const struct __ns1__getMyTasks *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__getMyTasks(soap, "ns1:getMyTasks", -1, &a->ns1__getMyTasks_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getMyTasks * SOAP_FMAC4 soap_in___ns1__getMyTasks(struct soap *soap, const char *tag, struct __ns1__getMyTasks *a, const char *type)
{
	size_t soap_flag_ns1__getMyTasks_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getMyTasks *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getMyTasks, sizeof(struct __ns1__getMyTasks), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getMyTasks(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getMyTasks_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__getMyTasks(soap, "ns1:getMyTasks", &a->ns1__getMyTasks_, "ns1:getMyTasks"))
				{	soap_flag_ns1__getMyTasks_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getMyTasks * SOAP_FMAC2 soap_instantiate___ns1__getMyTasks(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getMyTasks(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getMyTasks *p;
	size_t k = sizeof(struct __ns1__getMyTasks);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getMyTasks, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getMyTasks);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getMyTasks, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getMyTasks location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMyTasks(struct soap *soap, const struct __ns1__getMyTasks *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getMyTasks(soap, tag ? tag : "-ns1:getMyTasks", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getMyTasks * SOAP_FMAC4 soap_get___ns1__getMyTasks(struct soap *soap, struct __ns1__getMyTasks *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getMyTasks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__reassignTask(struct soap *soap, struct __ns1__reassignTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__reassignTask_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__reassignTask(struct soap *soap, const struct __ns1__reassignTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__reassignTask(soap, &a->ns1__reassignTask_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__reassignTask(struct soap *soap, const char *tag, int id, const struct __ns1__reassignTask *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__reassignTask(soap, "ns1:reassignTask", -1, &a->ns1__reassignTask_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__reassignTask * SOAP_FMAC4 soap_in___ns1__reassignTask(struct soap *soap, const char *tag, struct __ns1__reassignTask *a, const char *type)
{
	size_t soap_flag_ns1__reassignTask_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__reassignTask *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__reassignTask, sizeof(struct __ns1__reassignTask), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__reassignTask(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__reassignTask_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__reassignTask(soap, "ns1:reassignTask", &a->ns1__reassignTask_, "ns1:reassignTask"))
				{	soap_flag_ns1__reassignTask_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__reassignTask * SOAP_FMAC2 soap_instantiate___ns1__reassignTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__reassignTask(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__reassignTask *p;
	size_t k = sizeof(struct __ns1__reassignTask);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__reassignTask, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__reassignTask);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__reassignTask, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__reassignTask location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__reassignTask(struct soap *soap, const struct __ns1__reassignTask *a, const char *tag, const char *type)
{
	if (soap_out___ns1__reassignTask(soap, tag ? tag : "-ns1:reassignTask", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__reassignTask * SOAP_FMAC4 soap_get___ns1__reassignTask(struct soap *soap, struct __ns1__reassignTask *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__reassignTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__authenticateByKerberos(struct soap *soap, struct __ns1__authenticateByKerberos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__authenticateByKerberos_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__authenticateByKerberos(struct soap *soap, const struct __ns1__authenticateByKerberos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__authenticateByKerberos(soap, &a->ns1__authenticateByKerberos_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__authenticateByKerberos(struct soap *soap, const char *tag, int id, const struct __ns1__authenticateByKerberos *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__authenticateByKerberos(soap, "ns1:authenticateByKerberos", -1, &a->ns1__authenticateByKerberos_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__authenticateByKerberos * SOAP_FMAC4 soap_in___ns1__authenticateByKerberos(struct soap *soap, const char *tag, struct __ns1__authenticateByKerberos *a, const char *type)
{
	size_t soap_flag_ns1__authenticateByKerberos_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__authenticateByKerberos *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__authenticateByKerberos, sizeof(struct __ns1__authenticateByKerberos), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__authenticateByKerberos(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__authenticateByKerberos_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__authenticateByKerberos(soap, "ns1:authenticateByKerberos", &a->ns1__authenticateByKerberos_, "ns1:authenticateByKerberos"))
				{	soap_flag_ns1__authenticateByKerberos_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__authenticateByKerberos * SOAP_FMAC2 soap_instantiate___ns1__authenticateByKerberos(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__authenticateByKerberos(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__authenticateByKerberos *p;
	size_t k = sizeof(struct __ns1__authenticateByKerberos);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__authenticateByKerberos, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__authenticateByKerberos);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__authenticateByKerberos, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__authenticateByKerberos location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__authenticateByKerberos(struct soap *soap, const struct __ns1__authenticateByKerberos *a, const char *tag, const char *type)
{
	if (soap_out___ns1__authenticateByKerberos(soap, tag ? tag : "-ns1:authenticateByKerberos", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__authenticateByKerberos * SOAP_FMAC4 soap_get___ns1__authenticateByKerberos(struct soap *soap, struct __ns1__authenticateByKerberos *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__authenticateByKerberos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__authenticateByTrustedPrincipal(struct soap *soap, struct __ns1__authenticateByTrustedPrincipal *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__authenticateByTrustedPrincipal_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__authenticateByTrustedPrincipal(struct soap *soap, const struct __ns1__authenticateByTrustedPrincipal *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__authenticateByTrustedPrincipal(soap, &a->ns1__authenticateByTrustedPrincipal_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__authenticateByTrustedPrincipal(struct soap *soap, const char *tag, int id, const struct __ns1__authenticateByTrustedPrincipal *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__authenticateByTrustedPrincipal(soap, "ns1:authenticateByTrustedPrincipal", -1, &a->ns1__authenticateByTrustedPrincipal_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__authenticateByTrustedPrincipal * SOAP_FMAC4 soap_in___ns1__authenticateByTrustedPrincipal(struct soap *soap, const char *tag, struct __ns1__authenticateByTrustedPrincipal *a, const char *type)
{
	size_t soap_flag_ns1__authenticateByTrustedPrincipal_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__authenticateByTrustedPrincipal *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__authenticateByTrustedPrincipal, sizeof(struct __ns1__authenticateByTrustedPrincipal), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__authenticateByTrustedPrincipal(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__authenticateByTrustedPrincipal_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__authenticateByTrustedPrincipal(soap, "ns1:authenticateByTrustedPrincipal", &a->ns1__authenticateByTrustedPrincipal_, "ns1:authenticateByTrustedPrincipal"))
				{	soap_flag_ns1__authenticateByTrustedPrincipal_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__authenticateByTrustedPrincipal * SOAP_FMAC2 soap_instantiate___ns1__authenticateByTrustedPrincipal(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__authenticateByTrustedPrincipal(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__authenticateByTrustedPrincipal *p;
	size_t k = sizeof(struct __ns1__authenticateByTrustedPrincipal);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__authenticateByTrustedPrincipal, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__authenticateByTrustedPrincipal);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__authenticateByTrustedPrincipal, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__authenticateByTrustedPrincipal location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__authenticateByTrustedPrincipal(struct soap *soap, const struct __ns1__authenticateByTrustedPrincipal *a, const char *tag, const char *type)
{
	if (soap_out___ns1__authenticateByTrustedPrincipal(soap, tag ? tag : "-ns1:authenticateByTrustedPrincipal", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__authenticateByTrustedPrincipal * SOAP_FMAC4 soap_get___ns1__authenticateByTrustedPrincipal(struct soap *soap, struct __ns1__authenticateByTrustedPrincipal *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__authenticateByTrustedPrincipal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__authenticateByLoginPassword(struct soap *soap, struct __ns1__authenticateByLoginPassword *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__authenticateByLoginPassword_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__authenticateByLoginPassword(struct soap *soap, const struct __ns1__authenticateByLoginPassword *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__authenticateByLoginPassword(soap, &a->ns1__authenticateByLoginPassword_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__authenticateByLoginPassword(struct soap *soap, const char *tag, int id, const struct __ns1__authenticateByLoginPassword *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__authenticateByLoginPassword(soap, "ns1:authenticateByLoginPassword", -1, &a->ns1__authenticateByLoginPassword_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__authenticateByLoginPassword * SOAP_FMAC4 soap_in___ns1__authenticateByLoginPassword(struct soap *soap, const char *tag, struct __ns1__authenticateByLoginPassword *a, const char *type)
{
	size_t soap_flag_ns1__authenticateByLoginPassword_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__authenticateByLoginPassword *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__authenticateByLoginPassword, sizeof(struct __ns1__authenticateByLoginPassword), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__authenticateByLoginPassword(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__authenticateByLoginPassword_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__authenticateByLoginPassword(soap, "ns1:authenticateByLoginPassword", &a->ns1__authenticateByLoginPassword_, "ns1:authenticateByLoginPassword"))
				{	soap_flag_ns1__authenticateByLoginPassword_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__authenticateByLoginPassword * SOAP_FMAC2 soap_instantiate___ns1__authenticateByLoginPassword(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__authenticateByLoginPassword(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__authenticateByLoginPassword *p;
	size_t k = sizeof(struct __ns1__authenticateByLoginPassword);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__authenticateByLoginPassword, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__authenticateByLoginPassword);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__authenticateByLoginPassword, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__authenticateByLoginPassword location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__authenticateByLoginPassword(struct soap *soap, const struct __ns1__authenticateByLoginPassword *a, const char *tag, const char *type)
{
	if (soap_out___ns1__authenticateByLoginPassword(soap, tag ? tag : "-ns1:authenticateByLoginPassword", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__authenticateByLoginPassword * SOAP_FMAC4 soap_get___ns1__authenticateByLoginPassword(struct soap *soap, struct __ns1__authenticateByLoginPassword *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__authenticateByLoginPassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__authenticateByCallerPrincipal(struct soap *soap, struct __ns1__authenticateByCallerPrincipal *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__authenticateByCallerPrincipal_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__authenticateByCallerPrincipal(struct soap *soap, const struct __ns1__authenticateByCallerPrincipal *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__authenticateByCallerPrincipal(soap, &a->ns1__authenticateByCallerPrincipal_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__authenticateByCallerPrincipal(struct soap *soap, const char *tag, int id, const struct __ns1__authenticateByCallerPrincipal *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__authenticateByCallerPrincipal(soap, "ns1:authenticateByCallerPrincipal", -1, &a->ns1__authenticateByCallerPrincipal_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__authenticateByCallerPrincipal * SOAP_FMAC4 soap_in___ns1__authenticateByCallerPrincipal(struct soap *soap, const char *tag, struct __ns1__authenticateByCallerPrincipal *a, const char *type)
{
	size_t soap_flag_ns1__authenticateByCallerPrincipal_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__authenticateByCallerPrincipal *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__authenticateByCallerPrincipal, sizeof(struct __ns1__authenticateByCallerPrincipal), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__authenticateByCallerPrincipal(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__authenticateByCallerPrincipal_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__authenticateByCallerPrincipal(soap, "ns1:authenticateByCallerPrincipal", &a->ns1__authenticateByCallerPrincipal_, "ns1:authenticateByCallerPrincipal"))
				{	soap_flag_ns1__authenticateByCallerPrincipal_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__authenticateByCallerPrincipal * SOAP_FMAC2 soap_instantiate___ns1__authenticateByCallerPrincipal(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__authenticateByCallerPrincipal(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__authenticateByCallerPrincipal *p;
	size_t k = sizeof(struct __ns1__authenticateByCallerPrincipal);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__authenticateByCallerPrincipal, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__authenticateByCallerPrincipal);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__authenticateByCallerPrincipal, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__authenticateByCallerPrincipal location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__authenticateByCallerPrincipal(struct soap *soap, const struct __ns1__authenticateByCallerPrincipal *a, const char *tag, const char *type)
{
	if (soap_out___ns1__authenticateByCallerPrincipal(soap, tag ? tag : "-ns1:authenticateByCallerPrincipal", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__authenticateByCallerPrincipal * SOAP_FMAC4 soap_get___ns1__authenticateByCallerPrincipal(struct soap *soap, struct __ns1__authenticateByCallerPrincipal *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__authenticateByCallerPrincipal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__reassignTasks(struct soap *soap, ns1__reassignTasks *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__reassignTasks))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__reassignTasks(struct soap *soap, const char *tag, int id, ns1__reassignTasks *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__reassignTasks, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__reassignTasks ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__reassignTasks ** SOAP_FMAC4 soap_in_PointerTons1__reassignTasks(struct soap *soap, const char *tag, ns1__reassignTasks **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__reassignTasks **)soap_malloc(soap, sizeof(ns1__reassignTasks *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__reassignTasks *)soap_instantiate_ns1__reassignTasks(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__reassignTasks **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__reassignTasks, sizeof(ns1__reassignTasks), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__reassignTasks(struct soap *soap, ns1__reassignTasks *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__reassignTasks(soap, tag ? tag : "ns1:reassignTasks", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__reassignTasks ** SOAP_FMAC4 soap_get_PointerTons1__reassignTasks(struct soap *soap, ns1__reassignTasks **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__reassignTasks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getTask(struct soap *soap, ns1__getTask *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getTask))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getTask(struct soap *soap, const char *tag, int id, ns1__getTask *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getTask, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__getTask ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__getTask ** SOAP_FMAC4 soap_in_PointerTons1__getTask(struct soap *soap, const char *tag, ns1__getTask **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getTask **)soap_malloc(soap, sizeof(ns1__getTask *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getTask *)soap_instantiate_ns1__getTask(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__getTask **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getTask, sizeof(ns1__getTask), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getTask(struct soap *soap, ns1__getTask *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__getTask(soap, tag ? tag : "ns1:getTask", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getTask ** SOAP_FMAC4 soap_get_PointerTons1__getTask(struct soap *soap, ns1__getTask **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getProcessTasks(struct soap *soap, ns1__getProcessTasks *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getProcessTasks))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getProcessTasks(struct soap *soap, const char *tag, int id, ns1__getProcessTasks *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getProcessTasks, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__getProcessTasks ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__getProcessTasks ** SOAP_FMAC4 soap_in_PointerTons1__getProcessTasks(struct soap *soap, const char *tag, ns1__getProcessTasks **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getProcessTasks **)soap_malloc(soap, sizeof(ns1__getProcessTasks *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getProcessTasks *)soap_instantiate_ns1__getProcessTasks(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__getProcessTasks **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getProcessTasks, sizeof(ns1__getProcessTasks), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getProcessTasks(struct soap *soap, ns1__getProcessTasks *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__getProcessTasks(soap, tag ? tag : "ns1:getProcessTasks", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getProcessTasks ** SOAP_FMAC4 soap_get_PointerTons1__getProcessTasks(struct soap *soap, ns1__getProcessTasks **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getProcessTasks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__completeTaskWS(struct soap *soap, ns1__completeTaskWS *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__completeTaskWS))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__completeTaskWS(struct soap *soap, const char *tag, int id, ns1__completeTaskWS *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__completeTaskWS, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__completeTaskWS ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__completeTaskWS ** SOAP_FMAC4 soap_in_PointerTons1__completeTaskWS(struct soap *soap, const char *tag, ns1__completeTaskWS **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__completeTaskWS **)soap_malloc(soap, sizeof(ns1__completeTaskWS *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__completeTaskWS *)soap_instantiate_ns1__completeTaskWS(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__completeTaskWS **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__completeTaskWS, sizeof(ns1__completeTaskWS), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__completeTaskWS(struct soap *soap, ns1__completeTaskWS *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__completeTaskWS(soap, tag ? tag : "ns1:completeTaskWS", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__completeTaskWS ** SOAP_FMAC4 soap_get_PointerTons1__completeTaskWS(struct soap *soap, ns1__completeTaskWS **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__completeTaskWS(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getTasks(struct soap *soap, ns1__getTasks *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getTasks))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getTasks(struct soap *soap, const char *tag, int id, ns1__getTasks *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getTasks, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__getTasks ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__getTasks ** SOAP_FMAC4 soap_in_PointerTons1__getTasks(struct soap *soap, const char *tag, ns1__getTasks **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getTasks **)soap_malloc(soap, sizeof(ns1__getTasks *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getTasks *)soap_instantiate_ns1__getTasks(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__getTasks **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getTasks, sizeof(ns1__getTasks), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getTasks(struct soap *soap, ns1__getTasks *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__getTasks(soap, tag ? tag : "ns1:getTasks", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getTasks ** SOAP_FMAC4 soap_get_PointerTons1__getTasks(struct soap *soap, ns1__getTasks **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getTasks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__assignTask(struct soap *soap, ns1__assignTask *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__assignTask))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__assignTask(struct soap *soap, const char *tag, int id, ns1__assignTask *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__assignTask, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__assignTask ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__assignTask ** SOAP_FMAC4 soap_in_PointerTons1__assignTask(struct soap *soap, const char *tag, ns1__assignTask **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__assignTask **)soap_malloc(soap, sizeof(ns1__assignTask *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__assignTask *)soap_instantiate_ns1__assignTask(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__assignTask **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__assignTask, sizeof(ns1__assignTask), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__assignTask(struct soap *soap, ns1__assignTask *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__assignTask(soap, tag ? tag : "ns1:assignTask", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__assignTask ** SOAP_FMAC4 soap_get_PointerTons1__assignTask(struct soap *soap, ns1__assignTask **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__assignTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__markTaskOpened(struct soap *soap, ns1__markTaskOpened *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__markTaskOpened))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__markTaskOpened(struct soap *soap, const char *tag, int id, ns1__markTaskOpened *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__markTaskOpened, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__markTaskOpened ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__markTaskOpened ** SOAP_FMAC4 soap_in_PointerTons1__markTaskOpened(struct soap *soap, const char *tag, ns1__markTaskOpened **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__markTaskOpened **)soap_malloc(soap, sizeof(ns1__markTaskOpened *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__markTaskOpened *)soap_instantiate_ns1__markTaskOpened(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__markTaskOpened **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__markTaskOpened, sizeof(ns1__markTaskOpened), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__markTaskOpened(struct soap *soap, ns1__markTaskOpened *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__markTaskOpened(soap, tag ? tag : "ns1:markTaskOpened", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__markTaskOpened ** SOAP_FMAC4 soap_get_PointerTons1__markTaskOpened(struct soap *soap, ns1__markTaskOpened **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__markTaskOpened(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getMyTasks(struct soap *soap, ns1__getMyTasks *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getMyTasks))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getMyTasks(struct soap *soap, const char *tag, int id, ns1__getMyTasks *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getMyTasks, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__getMyTasks ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__getMyTasks ** SOAP_FMAC4 soap_in_PointerTons1__getMyTasks(struct soap *soap, const char *tag, ns1__getMyTasks **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getMyTasks **)soap_malloc(soap, sizeof(ns1__getMyTasks *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getMyTasks *)soap_instantiate_ns1__getMyTasks(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__getMyTasks **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getMyTasks, sizeof(ns1__getMyTasks), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getMyTasks(struct soap *soap, ns1__getMyTasks *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__getMyTasks(soap, tag ? tag : "ns1:getMyTasks", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getMyTasks ** SOAP_FMAC4 soap_get_PointerTons1__getMyTasks(struct soap *soap, ns1__getMyTasks **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getMyTasks(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__reassignTask(struct soap *soap, ns1__reassignTask *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__reassignTask))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__reassignTask(struct soap *soap, const char *tag, int id, ns1__reassignTask *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__reassignTask, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__reassignTask ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__reassignTask ** SOAP_FMAC4 soap_in_PointerTons1__reassignTask(struct soap *soap, const char *tag, ns1__reassignTask **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__reassignTask **)soap_malloc(soap, sizeof(ns1__reassignTask *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__reassignTask *)soap_instantiate_ns1__reassignTask(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__reassignTask **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__reassignTask, sizeof(ns1__reassignTask), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__reassignTask(struct soap *soap, ns1__reassignTask *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__reassignTask(soap, tag ? tag : "ns1:reassignTask", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__reassignTask ** SOAP_FMAC4 soap_get_PointerTons1__reassignTask(struct soap *soap, ns1__reassignTask **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__reassignTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authenticateByKerberos(struct soap *soap, ns1__authenticateByKerberos *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__authenticateByKerberos))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authenticateByKerberos(struct soap *soap, const char *tag, int id, ns1__authenticateByKerberos *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__authenticateByKerberos, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__authenticateByKerberos ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__authenticateByKerberos ** SOAP_FMAC4 soap_in_PointerTons1__authenticateByKerberos(struct soap *soap, const char *tag, ns1__authenticateByKerberos **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__authenticateByKerberos **)soap_malloc(soap, sizeof(ns1__authenticateByKerberos *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__authenticateByKerberos *)soap_instantiate_ns1__authenticateByKerberos(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__authenticateByKerberos **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__authenticateByKerberos, sizeof(ns1__authenticateByKerberos), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authenticateByKerberos(struct soap *soap, ns1__authenticateByKerberos *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__authenticateByKerberos(soap, tag ? tag : "ns1:authenticateByKerberos", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__authenticateByKerberos ** SOAP_FMAC4 soap_get_PointerTons1__authenticateByKerberos(struct soap *soap, ns1__authenticateByKerberos **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__authenticateByKerberos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authenticateByTrustedPrincipal(struct soap *soap, ns1__authenticateByTrustedPrincipal *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__authenticateByTrustedPrincipal))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authenticateByTrustedPrincipal(struct soap *soap, const char *tag, int id, ns1__authenticateByTrustedPrincipal *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__authenticateByTrustedPrincipal, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__authenticateByTrustedPrincipal ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__authenticateByTrustedPrincipal ** SOAP_FMAC4 soap_in_PointerTons1__authenticateByTrustedPrincipal(struct soap *soap, const char *tag, ns1__authenticateByTrustedPrincipal **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__authenticateByTrustedPrincipal **)soap_malloc(soap, sizeof(ns1__authenticateByTrustedPrincipal *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__authenticateByTrustedPrincipal *)soap_instantiate_ns1__authenticateByTrustedPrincipal(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__authenticateByTrustedPrincipal **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__authenticateByTrustedPrincipal, sizeof(ns1__authenticateByTrustedPrincipal), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authenticateByTrustedPrincipal(struct soap *soap, ns1__authenticateByTrustedPrincipal *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__authenticateByTrustedPrincipal(soap, tag ? tag : "ns1:authenticateByTrustedPrincipal", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__authenticateByTrustedPrincipal ** SOAP_FMAC4 soap_get_PointerTons1__authenticateByTrustedPrincipal(struct soap *soap, ns1__authenticateByTrustedPrincipal **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__authenticateByTrustedPrincipal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authenticateByLoginPassword(struct soap *soap, ns1__authenticateByLoginPassword *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__authenticateByLoginPassword))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authenticateByLoginPassword(struct soap *soap, const char *tag, int id, ns1__authenticateByLoginPassword *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__authenticateByLoginPassword, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__authenticateByLoginPassword ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__authenticateByLoginPassword ** SOAP_FMAC4 soap_in_PointerTons1__authenticateByLoginPassword(struct soap *soap, const char *tag, ns1__authenticateByLoginPassword **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__authenticateByLoginPassword **)soap_malloc(soap, sizeof(ns1__authenticateByLoginPassword *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__authenticateByLoginPassword *)soap_instantiate_ns1__authenticateByLoginPassword(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__authenticateByLoginPassword **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__authenticateByLoginPassword, sizeof(ns1__authenticateByLoginPassword), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authenticateByLoginPassword(struct soap *soap, ns1__authenticateByLoginPassword *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__authenticateByLoginPassword(soap, tag ? tag : "ns1:authenticateByLoginPassword", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__authenticateByLoginPassword ** SOAP_FMAC4 soap_get_PointerTons1__authenticateByLoginPassword(struct soap *soap, ns1__authenticateByLoginPassword **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__authenticateByLoginPassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authenticateByCallerPrincipal(struct soap *soap, ns1__authenticateByCallerPrincipal *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__authenticateByCallerPrincipal))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authenticateByCallerPrincipal(struct soap *soap, const char *tag, int id, ns1__authenticateByCallerPrincipal *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__authenticateByCallerPrincipal, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__authenticateByCallerPrincipal ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__authenticateByCallerPrincipal ** SOAP_FMAC4 soap_in_PointerTons1__authenticateByCallerPrincipal(struct soap *soap, const char *tag, ns1__authenticateByCallerPrincipal **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__authenticateByCallerPrincipal **)soap_malloc(soap, sizeof(ns1__authenticateByCallerPrincipal *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__authenticateByCallerPrincipal *)soap_instantiate_ns1__authenticateByCallerPrincipal(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__authenticateByCallerPrincipal **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__authenticateByCallerPrincipal, sizeof(ns1__authenticateByCallerPrincipal), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authenticateByCallerPrincipal(struct soap *soap, ns1__authenticateByCallerPrincipal *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__authenticateByCallerPrincipal(soap, tag ? tag : "ns1:authenticateByCallerPrincipal", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__authenticateByCallerPrincipal ** SOAP_FMAC4 soap_get_PointerTons1__authenticateByCallerPrincipal(struct soap *soap, ns1__authenticateByCallerPrincipal **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__authenticateByCallerPrincipal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__variable(struct soap *soap, ns1__variable *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__variable))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__variable(struct soap *soap, const char *tag, int id, ns1__variable *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__variable, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__variable ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__variable ** SOAP_FMAC4 soap_in_PointerTons1__variable(struct soap *soap, const char *tag, ns1__variable **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__variable **)soap_malloc(soap, sizeof(ns1__variable *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__variable *)soap_instantiate_ns1__variable(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__variable **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__variable, sizeof(ns1__variable), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__variable(struct soap *soap, ns1__variable *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__variable(soap, tag ? tag : "ns1:variable", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__variable ** SOAP_FMAC4 soap_get_PointerTons1__variable(struct soap *soap, ns1__variable **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__variable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__variableStoreType(struct soap *soap, enum ns1__variableStoreType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_ns1__variableStoreType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__variableStoreType(struct soap *soap, const char *tag, int id, enum ns1__variableStoreType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__variableStoreType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns1__variableStoreType(soap, tag, id, *a, type);
}

SOAP_FMAC3 enum ns1__variableStoreType ** SOAP_FMAC4 soap_in_PointerTons1__variableStoreType(struct soap *soap, const char *tag, enum ns1__variableStoreType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (enum ns1__variableStoreType **)soap_malloc(soap, sizeof(enum ns1__variableStoreType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns1__variableStoreType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (enum ns1__variableStoreType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__variableStoreType, sizeof(enum ns1__variableStoreType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__variableStoreType(struct soap *soap, enum ns1__variableStoreType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__variableStoreType(soap, tag ? tag : "ns1:variableStoreType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns1__variableStoreType ** SOAP_FMAC4 soap_get_PointerTons1__variableStoreType(struct soap *soap, enum ns1__variableStoreType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__variableStoreType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__userType(struct soap *soap, ns1__userType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__userType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__userType(struct soap *soap, const char *tag, int id, ns1__userType *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__userType, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__userType ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__userType ** SOAP_FMAC4 soap_in_PointerTons1__userType(struct soap *soap, const char *tag, ns1__userType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__userType **)soap_malloc(soap, sizeof(ns1__userType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__userType *)soap_instantiate_ns1__userType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__userType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__userType, sizeof(ns1__userType), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__userType(struct soap *soap, ns1__userType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__userType(soap, tag ? tag : "ns1:userType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__userType ** SOAP_FMAC4 soap_get_PointerTons1__userType(struct soap *soap, ns1__userType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__userType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyType(struct soap *soap, xsd__anyType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__anyType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyType(struct soap *soap, const char *tag, int id, xsd__anyType *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__anyType, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_xsd__anyType ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_in_PointerToxsd__anyType(struct soap *soap, const char *tag, xsd__anyType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__anyType **)soap_malloc(soap, sizeof(xsd__anyType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__anyType *)soap_instantiate_xsd__anyType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyType(struct soap *soap, xsd__anyType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxsd__anyType(soap, tag ? tag : "xsd:anyType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_get_PointerToxsd__anyType(struct soap *soap, xsd__anyType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__variableDefinition(struct soap *soap, ns1__variableDefinition *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__variableDefinition))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__variableDefinition(struct soap *soap, const char *tag, int id, ns1__variableDefinition *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__variableDefinition, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__variableDefinition ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__variableDefinition ** SOAP_FMAC4 soap_in_PointerTons1__variableDefinition(struct soap *soap, const char *tag, ns1__variableDefinition **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__variableDefinition **)soap_malloc(soap, sizeof(ns1__variableDefinition *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__variableDefinition *)soap_instantiate_ns1__variableDefinition(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__variableDefinition **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__variableDefinition, sizeof(ns1__variableDefinition), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__variableDefinition(struct soap *soap, ns1__variableDefinition *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__variableDefinition(soap, tag ? tag : "ns1:variableDefinition", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__variableDefinition ** SOAP_FMAC4 soap_get_PointerTons1__variableDefinition(struct soap *soap, ns1__variableDefinition **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__variableDefinition(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__wfVariable(struct soap *soap, ns1__wfVariable *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__wfVariable))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__wfVariable(struct soap *soap, const char *tag, int id, ns1__wfVariable *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__wfVariable, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__wfVariable ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__wfVariable ** SOAP_FMAC4 soap_in_PointerTons1__wfVariable(struct soap *soap, const char *tag, ns1__wfVariable **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__wfVariable **)soap_malloc(soap, sizeof(ns1__wfVariable *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__wfVariable *)soap_instantiate_ns1__wfVariable(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__wfVariable **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__wfVariable, sizeof(ns1__wfVariable), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__wfVariable(struct soap *soap, ns1__wfVariable *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__wfVariable(soap, tag ? tag : "ns1:wfVariable", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__wfVariable ** SOAP_FMAC4 soap_get_PointerTons1__wfVariable(struct soap *soap, ns1__wfVariable **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__wfVariable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToint(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__wfExecutor(struct soap *soap, ns1__wfExecutor *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__wfExecutor))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__wfExecutor(struct soap *soap, const char *tag, int id, ns1__wfExecutor *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__wfExecutor, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__wfExecutor ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__wfExecutor ** SOAP_FMAC4 soap_in_PointerTons1__wfExecutor(struct soap *soap, const char *tag, ns1__wfExecutor **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__wfExecutor **)soap_malloc(soap, sizeof(ns1__wfExecutor *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__wfExecutor *)soap_instantiate_ns1__wfExecutor(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__wfExecutor **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__wfExecutor, sizeof(ns1__wfExecutor), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__wfExecutor(struct soap *soap, ns1__wfExecutor *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__wfExecutor(soap, tag ? tag : "ns1:wfExecutor", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__wfExecutor ** SOAP_FMAC4 soap_get_PointerTons1__wfExecutor(struct soap *soap, ns1__wfExecutor **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__wfExecutor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__wfTask(struct soap *soap, ns1__wfTask *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__wfTask))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__wfTask(struct soap *soap, const char *tag, int id, ns1__wfTask *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__wfTask, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__wfTask ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__wfTask ** SOAP_FMAC4 soap_in_PointerTons1__wfTask(struct soap *soap, const char *tag, ns1__wfTask **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__wfTask **)soap_malloc(soap, sizeof(ns1__wfTask *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__wfTask *)soap_instantiate_ns1__wfTask(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__wfTask **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__wfTask, sizeof(ns1__wfTask), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__wfTask(struct soap *soap, ns1__wfTask *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__wfTask(soap, tag ? tag : "ns1:wfTask", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__wfTask ** SOAP_FMAC4 soap_get_PointerTons1__wfTask(struct soap *soap, ns1__wfTask **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__wfTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap *soap, time_t *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_dateTime);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap *soap, const char *tag, int id, time_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_dateTime, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_dateTime(soap, tag, id, *a, type);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap *soap, const char *tag, time_t **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (time_t **)soap_malloc(soap, sizeof(time_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_dateTime(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (time_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_dateTime, sizeof(time_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap *soap, time_t *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTodateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap *soap, time_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTodateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__classPresentationType(struct soap *soap, enum ns1__classPresentationType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_ns1__classPresentationType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__classPresentationType(struct soap *soap, const char *tag, int id, enum ns1__classPresentationType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__classPresentationType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ns1__classPresentationType(soap, tag, id, *a, type);
}

SOAP_FMAC3 enum ns1__classPresentationType ** SOAP_FMAC4 soap_in_PointerTons1__classPresentationType(struct soap *soap, const char *tag, enum ns1__classPresentationType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (enum ns1__classPresentationType **)soap_malloc(soap, sizeof(enum ns1__classPresentationType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns1__classPresentationType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (enum ns1__classPresentationType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__classPresentationType, sizeof(enum ns1__classPresentationType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__classPresentationType(struct soap *soap, enum ns1__classPresentationType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__classPresentationType(soap, tag ? tag : "ns1:classPresentationType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns1__classPresentationType ** SOAP_FMAC4 soap_get_PointerTons1__classPresentationType(struct soap *soap, enum ns1__classPresentationType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__classPresentationType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__batchPresentation(struct soap *soap, ns1__batchPresentation *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__batchPresentation))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__batchPresentation(struct soap *soap, const char *tag, int id, ns1__batchPresentation *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__batchPresentation, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__batchPresentation ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__batchPresentation ** SOAP_FMAC4 soap_in_PointerTons1__batchPresentation(struct soap *soap, const char *tag, ns1__batchPresentation **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__batchPresentation **)soap_malloc(soap, sizeof(ns1__batchPresentation *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__batchPresentation *)soap_instantiate_ns1__batchPresentation(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__batchPresentation **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__batchPresentation, sizeof(ns1__batchPresentation), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__batchPresentation(struct soap *soap, ns1__batchPresentation *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__batchPresentation(soap, tag ? tag : "ns1:batchPresentation", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__batchPresentation ** SOAP_FMAC4 soap_get_PointerTons1__batchPresentation(struct soap *soap, ns1__batchPresentation **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__batchPresentation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToLONG64(struct soap *soap, LONG64 *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_LONG64);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToLONG64(struct soap *soap, const char *tag, int id, LONG64 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_LONG64, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_LONG64(soap, tag, id, *a, type);
}

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToLONG64(struct soap *soap, const char *tag, LONG64 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (LONG64 **)soap_malloc(soap, sizeof(LONG64 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_LONG64(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (LONG64 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_LONG64, sizeof(LONG64), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToLONG64(struct soap *soap, LONG64 *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToLONG64(soap, tag ? tag : "long", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToLONG64(struct soap *soap, LONG64 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToLONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, *a ? (*a)->__ptr : NULL, *a ? (*a)->__size : 0, type, SOAP_TYPE_xsd__base64Binary, NULL);
	if (!*a || id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_xsd__base64Binary ? type : NULL);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxsd__base64Binary(soap, tag ? tag : "xsd:base64Binary", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__actor(struct soap *soap, ns1__actor *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__actor))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__actor(struct soap *soap, const char *tag, int id, ns1__actor *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__actor, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__actor ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__actor ** SOAP_FMAC4 soap_in_PointerTons1__actor(struct soap *soap, const char *tag, ns1__actor **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__actor **)soap_malloc(soap, sizeof(ns1__actor *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__actor *)soap_instantiate_ns1__actor(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__actor **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__actor, sizeof(ns1__actor), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__actor(struct soap *soap, ns1__actor *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__actor(soap, tag ? tag : "ns1:actor", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__actor ** SOAP_FMAC4 soap_get_PointerTons1__actor(struct soap *soap, ns1__actor **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__actor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__user(struct soap *soap, ns1__user *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__user))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__user(struct soap *soap, const char *tag, int id, ns1__user *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__user, &mark);
	if (id < 0)
		return soap->error;
	(void)(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__user ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__user ** SOAP_FMAC4 soap_in_PointerTons1__user(struct soap *soap, const char *tag, ns1__user **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__user **)soap_malloc(soap, sizeof(ns1__user *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__user *)soap_instantiate_ns1__user(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__user **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__user, sizeof(ns1__user), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__user(struct soap *soap, ns1__user *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__user(soap, tag ? tag : "ns1:user", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__user ** SOAP_FMAC4 soap_get_PointerTons1__user(struct soap *soap, ns1__user **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__user(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstring(struct soap *soap, wchar_t *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_wstring);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstring(struct soap *soap, const char *tag, int id, wchar_t *const*a, const char *type)
{
	return soap_outwstring(soap, tag, id, a, type, SOAP_TYPE_wstring);
}

SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_in_wstring(struct soap *soap, const char *tag, wchar_t **a, const char *type)
{
	a = soap_inwstring(soap, tag, a, type, SOAP_TYPE_wstring, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_new_wstring(struct soap *soap, int n)
{
	wchar_t * *a = static_cast<wchar_t * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(wchar_t *)));
	for (wchar_t * *p = a; p && n--; ++p)
		soap_default_wstring(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstring(struct soap *soap, wchar_t *const*a, const char *tag, const char *type)
{
	if (soap_out_wstring(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wchar_t ** SOAP_FMAC4 soap_get_wstring(struct soap *soap, wchar_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTounsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__variable(struct soap *soap, std::vector<ns1__variable *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__variable(struct soap *soap, const std::vector<ns1__variable *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__variable *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__variable(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__variable(struct soap *soap, const char *tag, int id, const std::vector<ns1__variable *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__variable *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__variable(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__variable *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__variable(struct soap *soap, const char *tag, std::vector<ns1__variable *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__variable(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__variable *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__variable, SOAP_TYPE_std__vectorTemplateOfPointerTons1__variable, sizeof(ns1__variable), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__variable(soap, tag, NULL, "ns1:variable"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__variable(soap, tag, &n, "ns1:variable"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__variable *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__variable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__variable(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__variable *> *p;
	size_t k = sizeof(std::vector<ns1__variable *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__variable, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__variable *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__variable *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__variable *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns1__userType_attributesMap_entry(struct soap *soap, std::vector<_ns1__userType_attributesMap_entry> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns1__userType_attributesMap_entry(struct soap *soap, const std::vector<_ns1__userType_attributesMap_entry> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<_ns1__userType_attributesMap_entry> ::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns1__userType_attributesMap_entry(struct soap *soap, const char *tag, int id, const std::vector<_ns1__userType_attributesMap_entry> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<_ns1__userType_attributesMap_entry> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns1__userType_attributesMap_entry> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns1__userType_attributesMap_entry(struct soap *soap, const char *tag, std::vector<_ns1__userType_attributesMap_entry> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns1__userType_attributesMap_entry(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		_ns1__userType_attributesMap_entry n;
		n.soap_default(soap);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE__ns1__userType_attributesMap_entry, SOAP_TYPE_std__vectorTemplateOf_ns1__userType_attributesMap_entry, sizeof(_ns1__userType_attributesMap_entry), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in__ns1__userType_attributesMap_entry(soap, tag, NULL, ""))
				break;
		}
		else
		{	if (!soap_in__ns1__userType_attributesMap_entry(soap, tag, &n, ""))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns1__userType_attributesMap_entry));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(_ns1__userType_attributesMap_entry));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(_ns1__userType_attributesMap_entry));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns1__userType_attributesMap_entry>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns1__userType_attributesMap_entry(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns1__userType_attributesMap_entry(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<_ns1__userType_attributesMap_entry> *p;
	size_t k = sizeof(std::vector<_ns1__userType_attributesMap_entry> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOf_ns1__userType_attributesMap_entry, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<_ns1__userType_attributesMap_entry> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<_ns1__userType_attributesMap_entry> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<_ns1__userType_attributesMap_entry>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__variableDefinition(struct soap *soap, std::vector<ns1__variableDefinition *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__variableDefinition(struct soap *soap, const std::vector<ns1__variableDefinition *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__variableDefinition *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__variableDefinition(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__variableDefinition(struct soap *soap, const char *tag, int id, const std::vector<ns1__variableDefinition *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__variableDefinition *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__variableDefinition(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__variableDefinition *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__variableDefinition(struct soap *soap, const char *tag, std::vector<ns1__variableDefinition *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__variableDefinition(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__variableDefinition *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__variableDefinition, SOAP_TYPE_std__vectorTemplateOfPointerTons1__variableDefinition, sizeof(ns1__variableDefinition), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__variableDefinition(soap, tag, NULL, "ns1:variableDefinition"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__variableDefinition(soap, tag, &n, "ns1:variableDefinition"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__variableDefinition *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__variableDefinition(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__variableDefinition(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__variableDefinition *> *p;
	size_t k = sizeof(std::vector<ns1__variableDefinition *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__variableDefinition, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__variableDefinition *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__variableDefinition *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__variableDefinition *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__userType(struct soap *soap, std::vector<ns1__userType *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__userType(struct soap *soap, const std::vector<ns1__userType *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__userType *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__userType(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__userType(struct soap *soap, const char *tag, int id, const std::vector<ns1__userType *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__userType *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__userType(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__userType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__userType(struct soap *soap, const char *tag, std::vector<ns1__userType *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__userType(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__userType *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__userType, SOAP_TYPE_std__vectorTemplateOfPointerTons1__userType, sizeof(ns1__userType), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__userType(soap, tag, NULL, "ns1:userType"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__userType(soap, tag, &n, "ns1:userType"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__userType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__userType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__userType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__userType *> *p;
	size_t k = sizeof(std::vector<ns1__userType *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__userType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__userType *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__userType *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__userType *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__wfVariable(struct soap *soap, std::vector<ns1__wfVariable *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__wfVariable(struct soap *soap, const std::vector<ns1__wfVariable *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__wfVariable *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__wfVariable(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__wfVariable(struct soap *soap, const char *tag, int id, const std::vector<ns1__wfVariable *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__wfVariable *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__wfVariable(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__wfVariable *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__wfVariable(struct soap *soap, const char *tag, std::vector<ns1__wfVariable *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__wfVariable(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__wfVariable *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__wfVariable, SOAP_TYPE_std__vectorTemplateOfPointerTons1__wfVariable, sizeof(ns1__wfVariable), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__wfVariable(soap, tag, NULL, "ns1:wfVariable"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__wfVariable(soap, tag, &n, "ns1:wfVariable"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__wfVariable *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__wfVariable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__wfVariable(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__wfVariable *> *p;
	size_t k = sizeof(std::vector<ns1__wfVariable *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__wfVariable, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__wfVariable *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__wfVariable *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__wfVariable *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__wfTask(struct soap *soap, std::vector<ns1__wfTask *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__wfTask(struct soap *soap, const std::vector<ns1__wfTask *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__wfTask *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__wfTask(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__wfTask(struct soap *soap, const char *tag, int id, const std::vector<ns1__wfTask *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__wfTask *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__wfTask(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__wfTask *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__wfTask(struct soap *soap, const char *tag, std::vector<ns1__wfTask *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__wfTask(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__wfTask *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__wfTask, SOAP_TYPE_std__vectorTemplateOfPointerTons1__wfTask, sizeof(ns1__wfTask), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__wfTask(soap, tag, NULL, "ns1:wfTask"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__wfTask(soap, tag, &n, "ns1:wfTask"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__wfTask *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__wfTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__wfTask(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__wfTask *> *p;
	size_t k = sizeof(std::vector<ns1__wfTask *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__wfTask, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__wfTask *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__wfTask *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__wfTask *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
